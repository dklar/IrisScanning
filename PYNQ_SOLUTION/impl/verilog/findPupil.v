// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module findPupil (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_data_stream_V_dout,
        img_data_stream_V_empty_n,
        img_data_stream_V_read,
        dst_img_data_stream_V_din,
        dst_img_data_stream_V_full_n,
        dst_img_data_stream_V_write,
        r_out_din,
        r_out_full_n,
        r_out_write,
        x_out_din,
        x_out_full_n,
        x_out_write,
        y_out_din,
        y_out_full_n,
        y_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_state6 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] img_data_stream_V_dout;
input   img_data_stream_V_empty_n;
output   img_data_stream_V_read;
output  [7:0] dst_img_data_stream_V_din;
input   dst_img_data_stream_V_full_n;
output   dst_img_data_stream_V_write;
output  [31:0] r_out_din;
input   r_out_full_n;
output   r_out_write;
output  [31:0] x_out_din;
input   x_out_full_n;
output   x_out_write;
output  [31:0] y_out_din;
input   y_out_full_n;
output   y_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_data_stream_V_read;
reg dst_img_data_stream_V_write;
reg r_out_write;
reg x_out_write;
reg y_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln27_reg_732;
reg    dst_img_data_stream_V_blk_n;
reg    r_out_blk_n;
wire    ap_CS_fsm_state7;
reg    x_out_blk_n;
reg    y_out_blk_n;
reg   [8:0] startX_line_reg_164;
wire   [31:0] zext_ln70_fu_225_p1;
reg   [31:0] zext_ln70_reg_707;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln25_fu_229_p2;
wire   [7:0] y_fu_235_p2;
reg   [7:0] y_reg_716;
wire   [31:0] select_ln79_fu_289_p3;
reg   [31:0] select_ln79_reg_721;
wire   [31:0] zext_ln69_fu_297_p1;
reg   [31:0] zext_ln69_reg_727;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] zext_ln69_reg_727_pp0_iter1_reg;
wire   [0:0] icmp_ln27_fu_301_p2;
reg   [0:0] icmp_ln27_reg_732_pp0_iter1_reg;
wire   [8:0] x_fu_307_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] is_line_0_i_load_reg_741;
reg   [31:0] length_line_0_i_load_reg_748;
wire   [0:0] icmp_ln33_fu_322_p2;
reg   [0:0] icmp_ln33_reg_754;
wire   [0:0] icmp_ln55_fu_334_p2;
reg   [0:0] icmp_ln55_reg_760;
wire   [31:0] total_longest_line_fu_340_p2;
reg   [31:0] total_longest_line_reg_765;
wire   [0:0] sel_tmp2_fu_346_p2;
reg   [0:0] sel_tmp2_reg_774;
wire   [0:0] sel_tmp7_fu_358_p2;
reg   [0:0] sel_tmp7_reg_779;
wire   [0:0] and_ln55_fu_370_p2;
reg   [0:0] and_ln55_reg_788;
wire   [31:0] select_ln55_2_fu_384_p3;
reg   [31:0] select_ln55_2_reg_799;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg   [7:0] total_y_reg_153;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
reg   [31:0] total_x_0_i_fu_86;
wire   [31:0] select_ln55_12_fu_599_p3;
reg   [31:0] y_dc_0_fu_90;
wire   [31:0] select_ln55_11_fu_577_p3;
reg   [31:0] total_longest_line_0_fu_94;
wire   [31:0] select_ln55_10_fu_555_p3;
reg   [0:0] is_line_0_i_fu_98;
wire   [0:0] or_ln55_3_fu_535_p2;
reg   [0:0] ap_sig_allocacmp_is_line_0_i_load;
reg   [31:0] start_longest_lineX_fu_102;
wire   [31:0] total_x_fu_516_p3;
reg   [31:0] length_line_0_i_fu_106;
wire   [31:0] select_ln55_7_fu_502_p3;
reg   [31:0] ap_sig_allocacmp_length_line_0_i_load;
reg   [31:0] gap_count_0_i_fu_110;
reg   [31:0] ap_sig_allocacmp_gap_count_0_i_load;
reg   [31:0] longest_line_in_row_fu_114;
wire   [31:0] longest_line_in_row_2_fu_456_p3;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state7;
wire   [31:0] sub_ln79_fu_249_p2;
wire   [30:0] lshr_ln79_1_fu_255_p4;
wire   [31:0] zext_ln79_fu_265_p1;
wire   [30:0] lshr_ln79_2_fu_275_p4;
wire   [0:0] tmp_fu_241_p3;
wire   [31:0] sub_ln79_1_fu_269_p2;
wire   [31:0] zext_ln79_1_fu_285_p1;
wire   [31:0] gap_count_fu_328_p2;
wire   [0:0] sel_tmp6_fu_352_p2;
wire   [0:0] xor_ln55_fu_364_p2;
wire   [31:0] sel_tmp21_fu_376_p3;
wire   [0:0] icmp_ln66_fu_408_p2;
wire   [0:0] icmp_ln61_fu_403_p2;
wire   [0:0] and_ln61_fu_435_p2;
wire   [0:0] and_ln61_1_fu_440_p2;
wire   [0:0] or_ln55_fu_445_p2;
wire   [31:0] select_ln55_fu_449_p3;
wire   [31:0] length_line_fu_398_p2;
wire   [31:0] select_ln55_3_fu_464_p3;
wire   [31:0] select_ln55_4_fu_470_p3;
wire   [0:0] or_ln55_1_fu_477_p2;
wire   [0:0] or_ln55_2_fu_497_p2;
wire   [31:0] select_ln55_6_fu_489_p3;
wire   [31:0] select_ln55_5_fu_482_p3;
wire   [31:0] select_ln55_8_fu_510_p3;
wire   [0:0] xor_ln33_fu_524_p2;
wire   [0:0] sel_tmp60_fu_529_p3;
wire   [31:0] select_ln66_fu_413_p3;
wire   [31:0] select_ln61_fu_540_p3;
wire   [31:0] sel_tmp73_fu_548_p3;
wire   [31:0] select_ln66_1_fu_420_p3;
wire   [31:0] select_ln61_1_fu_562_p3;
wire   [31:0] sel_tmp86_fu_570_p3;
wire   [31:0] select_ln66_2_fu_427_p3;
wire   [31:0] select_ln61_2_fu_584_p3;
wire   [31:0] sel_tmp99_fu_592_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln25_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln25_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gap_count_0_i_fu_110 <= select_ln55_2_reg_799;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gap_count_0_i_fu_110 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        is_line_0_i_fu_98 <= or_ln55_3_fu_535_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_line_0_i_fu_98 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        length_line_0_i_fu_106 <= select_ln55_7_fu_502_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        length_line_0_i_fu_106 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        longest_line_in_row_fu_114 <= longest_line_in_row_2_fu_456_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        longest_line_in_row_fu_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        startX_line_reg_164 <= x_fu_307_p2;
    end else if (((icmp_ln25_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        startX_line_reg_164 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        start_longest_lineX_fu_102 <= total_x_fu_516_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        start_longest_lineX_fu_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        total_longest_line_0_fu_94 <= select_ln55_10_fu_555_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_longest_line_0_fu_94 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        total_x_0_i_fu_86 <= select_ln55_12_fu_599_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_x_0_i_fu_86 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        total_y_reg_153 <= y_reg_716;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_y_reg_153 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_dc_0_fu_90 <= select_ln55_11_fu_577_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_dc_0_fu_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_732 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln55_reg_788 <= and_ln55_fu_370_p2;
        icmp_ln33_reg_754 <= icmp_ln33_fu_322_p2;
        icmp_ln55_reg_760 <= icmp_ln55_fu_334_p2;
        is_line_0_i_load_reg_741 <= ap_sig_allocacmp_is_line_0_i_load;
        length_line_0_i_load_reg_748 <= ap_sig_allocacmp_length_line_0_i_load;
        sel_tmp2_reg_774 <= sel_tmp2_fu_346_p2;
        sel_tmp7_reg_779 <= sel_tmp7_fu_358_p2;
        select_ln55_2_reg_799 <= select_ln55_2_fu_384_p3;
        total_longest_line_reg_765 <= total_longest_line_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln27_reg_732 <= icmp_ln27_fu_301_p2;
        icmp_ln27_reg_732_pp0_iter1_reg <= icmp_ln27_reg_732;
        zext_ln69_reg_727[8 : 0] <= zext_ln69_fu_297_p1[8 : 0];
        zext_ln69_reg_727_pp0_iter1_reg[8 : 0] <= zext_ln69_reg_727[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        select_ln79_reg_721 <= select_ln79_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_reg_716 <= y_fu_235_p2;
        zext_ln70_reg_707[7 : 0] <= zext_ln70_fu_225_p1[7 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln27_fu_301_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_gap_count_0_i_load = select_ln55_2_reg_799;
    end else begin
        ap_sig_allocacmp_gap_count_0_i_load = gap_count_0_i_fu_110;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_is_line_0_i_load = or_ln55_3_fu_535_p2;
    end else begin
        ap_sig_allocacmp_is_line_0_i_load = is_line_0_i_fu_98;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_732_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_length_line_0_i_load = select_ln55_7_fu_502_p3;
    end else begin
        ap_sig_allocacmp_length_line_0_i_load = length_line_0_i_fu_106;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_732 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_img_data_stream_V_blk_n = dst_img_data_stream_V_full_n;
    end else begin
        dst_img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_732 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_img_data_stream_V_write = 1'b1;
    end else begin
        dst_img_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_732 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_data_stream_V_blk_n = img_data_stream_V_empty_n;
    end else begin
        img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_732 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_data_stream_V_read = 1'b1;
    end else begin
        img_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_out_blk_n = r_out_full_n;
    end else begin
        r_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        r_out_write = 1'b1;
    end else begin
        r_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_out_blk_n = x_out_full_n;
    end else begin
        x_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        x_out_write = 1'b1;
    end else begin
        x_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_out_blk_n = y_out_full_n;
    end else begin
        y_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        y_out_write = 1'b1;
    end else begin
        y_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln25_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln27_fu_301_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln27_fu_301_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln55_fu_370_p2 = (xor_ln55_fu_364_p2 & sel_tmp2_fu_346_p2);

assign and_ln61_1_fu_440_p2 = (sel_tmp2_reg_774 & and_ln61_fu_435_p2);

assign and_ln61_fu_435_p2 = (icmp_ln61_fu_403_p2 & icmp_ln55_reg_760);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln27_reg_732 == 1'd0) & (dst_img_data_stream_V_full_n == 1'b0)) | ((icmp_ln27_reg_732 == 1'd0) & (img_data_stream_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln27_reg_732 == 1'd0) & (dst_img_data_stream_V_full_n == 1'b0)) | ((icmp_ln27_reg_732 == 1'd0) & (img_data_stream_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln27_reg_732 == 1'd0) & (dst_img_data_stream_V_full_n == 1'b0)) | ((icmp_ln27_reg_732 == 1'd0) & (img_data_stream_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln27_reg_732 == 1'd0) & (dst_img_data_stream_V_full_n == 1'b0)) | ((icmp_ln27_reg_732 == 1'd0) & (img_data_stream_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7 = ((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dst_img_data_stream_V_din = img_data_stream_V_dout;

assign gap_count_fu_328_p2 = (ap_sig_allocacmp_gap_count_0_i_load + 32'd1);

assign icmp_ln25_fu_229_p2 = ((total_y_reg_153 == 8'd240) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_301_p2 = ((startX_line_reg_164 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_322_p2 = ((img_data_stream_V_dout > 8'd5) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_334_p2 = (($signed(gap_count_fu_328_p2) > $signed(32'd9)) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_403_p2 = (($signed(total_longest_line_reg_765) > $signed(longest_line_in_row_fu_114)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_408_p2 = (($signed(total_longest_line_reg_765) > $signed(total_longest_line_0_fu_94)) ? 1'b1 : 1'b0);

assign length_line_fu_398_p2 = (length_line_0_i_load_reg_748 + 32'd1);

assign longest_line_in_row_2_fu_456_p3 = ((or_ln55_fu_445_p2[0:0] === 1'b1) ? longest_line_in_row_fu_114 : select_ln55_fu_449_p3);

assign lshr_ln79_1_fu_255_p4 = {{sub_ln79_fu_249_p2[31:1]}};

assign lshr_ln79_2_fu_275_p4 = {{total_longest_line_0_fu_94[31:1]}};

assign or_ln55_1_fu_477_p2 = (icmp_ln33_reg_754 | and_ln61_1_fu_440_p2);

assign or_ln55_2_fu_497_p2 = (or_ln55_1_fu_477_p2 | and_ln55_reg_788);

assign or_ln55_3_fu_535_p2 = (sel_tmp60_fu_529_p3 | and_ln55_reg_788);

assign or_ln55_fu_445_p2 = (sel_tmp7_reg_779 | and_ln55_reg_788);

assign r_out_din = select_ln79_reg_721;

assign sel_tmp21_fu_376_p3 = ((sel_tmp7_fu_358_p2[0:0] === 1'b1) ? ap_sig_allocacmp_gap_count_0_i_load : 32'd0);

assign sel_tmp2_fu_346_p2 = (icmp_ln33_fu_322_p2 & ap_sig_allocacmp_is_line_0_i_load);

assign sel_tmp60_fu_529_p3 = ((sel_tmp7_reg_779[0:0] === 1'b1) ? is_line_0_i_load_reg_741 : xor_ln33_fu_524_p2);

assign sel_tmp6_fu_352_p2 = (ap_sig_allocacmp_is_line_0_i_load ^ 1'd1);

assign sel_tmp73_fu_548_p3 = ((sel_tmp7_reg_779[0:0] === 1'b1) ? total_longest_line_0_fu_94 : select_ln61_fu_540_p3);

assign sel_tmp7_fu_358_p2 = (sel_tmp6_fu_352_p2 & icmp_ln33_fu_322_p2);

assign sel_tmp86_fu_570_p3 = ((sel_tmp7_reg_779[0:0] === 1'b1) ? y_dc_0_fu_90 : select_ln61_1_fu_562_p3);

assign sel_tmp99_fu_592_p3 = ((sel_tmp7_reg_779[0:0] === 1'b1) ? total_x_0_i_fu_86 : select_ln61_2_fu_584_p3);

assign select_ln55_10_fu_555_p3 = ((and_ln55_reg_788[0:0] === 1'b1) ? total_longest_line_0_fu_94 : sel_tmp73_fu_548_p3);

assign select_ln55_11_fu_577_p3 = ((and_ln55_reg_788[0:0] === 1'b1) ? y_dc_0_fu_90 : sel_tmp86_fu_570_p3);

assign select_ln55_12_fu_599_p3 = ((and_ln55_reg_788[0:0] === 1'b1) ? total_x_0_i_fu_86 : sel_tmp99_fu_592_p3);

assign select_ln55_2_fu_384_p3 = ((and_ln55_fu_370_p2[0:0] === 1'b1) ? gap_count_fu_328_p2 : sel_tmp21_fu_376_p3);

assign select_ln55_3_fu_464_p3 = ((and_ln55_reg_788[0:0] === 1'b1) ? length_line_fu_398_p2 : length_line_0_i_load_reg_748);

assign select_ln55_4_fu_470_p3 = ((and_ln61_1_fu_440_p2[0:0] === 1'b1) ? 32'd0 : total_longest_line_reg_765);

assign select_ln55_5_fu_482_p3 = ((is_line_0_i_load_reg_741[0:0] === 1'b1) ? length_line_fu_398_p2 : 32'd1);

assign select_ln55_6_fu_489_p3 = ((or_ln55_fu_445_p2[0:0] === 1'b1) ? select_ln55_3_fu_464_p3 : select_ln55_4_fu_470_p3);

assign select_ln55_7_fu_502_p3 = ((or_ln55_2_fu_497_p2[0:0] === 1'b1) ? select_ln55_6_fu_489_p3 : select_ln55_5_fu_482_p3);

assign select_ln55_8_fu_510_p3 = ((is_line_0_i_load_reg_741[0:0] === 1'b1) ? start_longest_lineX_fu_102 : zext_ln69_reg_727_pp0_iter1_reg);

assign select_ln55_fu_449_p3 = ((and_ln61_1_fu_440_p2[0:0] === 1'b1) ? total_longest_line_reg_765 : longest_line_in_row_fu_114);

assign select_ln61_1_fu_562_p3 = ((and_ln61_1_fu_440_p2[0:0] === 1'b1) ? select_ln66_1_fu_420_p3 : y_dc_0_fu_90);

assign select_ln61_2_fu_584_p3 = ((and_ln61_1_fu_440_p2[0:0] === 1'b1) ? select_ln66_2_fu_427_p3 : total_x_0_i_fu_86);

assign select_ln61_fu_540_p3 = ((and_ln61_1_fu_440_p2[0:0] === 1'b1) ? select_ln66_fu_413_p3 : total_longest_line_0_fu_94);

assign select_ln66_1_fu_420_p3 = ((icmp_ln66_fu_408_p2[0:0] === 1'b1) ? zext_ln70_reg_707 : y_dc_0_fu_90);

assign select_ln66_2_fu_427_p3 = ((icmp_ln66_fu_408_p2[0:0] === 1'b1) ? start_longest_lineX_fu_102 : total_x_0_i_fu_86);

assign select_ln66_fu_413_p3 = ((icmp_ln66_fu_408_p2[0:0] === 1'b1) ? total_longest_line_reg_765 : total_longest_line_0_fu_94);

assign select_ln79_fu_289_p3 = ((tmp_fu_241_p3[0:0] === 1'b1) ? sub_ln79_1_fu_269_p2 : zext_ln79_1_fu_285_p1);

assign start_out = real_start;

assign sub_ln79_1_fu_269_p2 = (32'd0 - zext_ln79_fu_265_p1);

assign sub_ln79_fu_249_p2 = (32'd0 - total_longest_line_0_fu_94);

assign tmp_fu_241_p3 = total_longest_line_0_fu_94[32'd31];

assign total_longest_line_fu_340_p2 = ($signed(ap_sig_allocacmp_length_line_0_i_load) + $signed(32'd4294967287));

assign total_x_fu_516_p3 = ((or_ln55_2_fu_497_p2[0:0] === 1'b1) ? start_longest_lineX_fu_102 : select_ln55_8_fu_510_p3);

assign x_fu_307_p2 = (startX_line_reg_164 + 9'd1);

assign x_out_din = (total_x_0_i_fu_86 + select_ln79_reg_721);

assign xor_ln33_fu_524_p2 = (icmp_ln33_reg_754 ^ 1'd1);

assign xor_ln55_fu_364_p2 = (icmp_ln55_fu_334_p2 ^ 1'd1);

assign y_fu_235_p2 = (total_y_reg_153 + 8'd1);

assign y_out_din = y_dc_0_fu_90;

assign zext_ln69_fu_297_p1 = startX_line_reg_164;

assign zext_ln70_fu_225_p1 = total_y_reg_153;

assign zext_ln79_1_fu_285_p1 = lshr_ln79_2_fu_275_p4;

assign zext_ln79_fu_265_p1 = lshr_ln79_1_fu_255_p4;

always @ (posedge ap_clk) begin
    zext_ln70_reg_707[31:8] <= 24'b000000000000000000000000;
    zext_ln69_reg_727[31:9] <= 23'b00000000000000000000000;
    zext_ln69_reg_727_pp0_iter1_reg[31:9] <= 23'b00000000000000000000000;
end

endmodule //findPupil
