// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module findPupil (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_data_stream_V_dout,
        img_data_stream_V_empty_n,
        img_data_stream_V_read,
        dst_img_data_stream_V_din,
        dst_img_data_stream_V_full_n,
        dst_img_data_stream_V_write,
        r_out_din,
        r_out_full_n,
        r_out_write,
        x_out_din,
        x_out_full_n,
        x_out_write,
        y_out_din,
        y_out_full_n,
        y_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_state6 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] img_data_stream_V_dout;
input   img_data_stream_V_empty_n;
output   img_data_stream_V_read;
output  [7:0] dst_img_data_stream_V_din;
input   dst_img_data_stream_V_full_n;
output   dst_img_data_stream_V_write;
output  [31:0] r_out_din;
input   r_out_full_n;
output   r_out_write;
output  [31:0] x_out_din;
input   x_out_full_n;
output   x_out_write;
output  [31:0] y_out_din;
input   y_out_full_n;
output   y_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_data_stream_V_read;
reg dst_img_data_stream_V_write;
reg r_out_write;
reg x_out_write;
reg y_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln21_reg_787;
reg    dst_img_data_stream_V_blk_n;
reg    r_out_blk_n;
wire    ap_CS_fsm_state7;
reg    x_out_blk_n;
reg    y_out_blk_n;
reg   [8:0] startX_line_reg_214;
wire   [31:0] zext_ln53_fu_275_p1;
reg   [31:0] zext_ln53_reg_762;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln20_fu_279_p2;
wire   [8:0] y_fu_285_p2;
reg   [8:0] y_reg_771;
wire   [31:0] select_ln64_fu_339_p3;
reg   [31:0] select_ln64_reg_776;
wire   [31:0] zext_ln52_fu_347_p1;
reg   [31:0] zext_ln52_reg_782;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] zext_ln52_reg_782_pp0_iter1_reg;
wire   [0:0] icmp_ln21_fu_351_p2;
reg   [0:0] icmp_ln21_reg_787_pp0_iter1_reg;
wire   [8:0] x_fu_357_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] length_line_0_i_load_reg_796;
reg   [0:0] is_line_0_i_load_reg_802;
wire   [0:0] icmp_ln26_fu_372_p2;
reg   [0:0] icmp_ln26_reg_809;
wire   [0:0] icmp_ln41_fu_384_p2;
reg   [0:0] icmp_ln41_reg_816;
wire   [31:0] total_longest_line_fu_390_p2;
reg   [31:0] total_longest_line_reg_821;
wire   [0:0] sel_tmp2_fu_402_p2;
reg   [0:0] sel_tmp2_reg_830;
wire   [0:0] sel_tmp8_demorgan_fu_408_p2;
reg   [0:0] sel_tmp8_demorgan_reg_835;
wire   [0:0] and_ln41_fu_420_p2;
reg   [0:0] and_ln41_reg_846;
wire   [31:0] select_ln41_fu_434_p3;
reg   [31:0] select_ln41_reg_857;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg   [8:0] total_y_reg_203;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
reg   [31:0] total_x_0_i_fu_136;
wire   [31:0] select_ln41_5_fu_654_p3;
reg   [31:0] y_dc_0_fu_140;
wire   [31:0] select_ln41_4_fu_632_p3;
reg   [31:0] total_longest_line_0_fu_144;
wire   [31:0] select_ln41_3_fu_610_p3;
reg   [31:0] start_longest_lineX_fu_148;
wire   [31:0] total_x_4_fu_588_p3;
reg   [31:0] length_line_0_i_fu_152;
wire   [31:0] select_ln41_1_fu_559_p3;
reg   [31:0] ap_sig_allocacmp_length_line_0_i_load;
reg   [31:0] gap_count_0_i_fu_156;
reg   [31:0] ap_sig_allocacmp_gap_count_0_i_load;
reg   [0:0] is_line_0_i_fu_160;
wire   [0:0] or_ln41_fu_534_p2;
reg   [0:0] ap_sig_allocacmp_is_line_0_i_load;
reg   [31:0] longest_line_in_row_fu_164;
wire   [31:0] longest_line_in_row_4_fu_522_p3;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state7;
wire   [31:0] sub_ln64_fu_299_p2;
wire   [30:0] lshr_ln64_1_fu_305_p4;
wire   [31:0] zext_ln64_fu_315_p1;
wire   [30:0] lshr_ln64_2_fu_325_p4;
wire   [0:0] tmp_fu_291_p3;
wire   [31:0] sub_ln64_1_fu_319_p2;
wire   [31:0] zext_ln64_1_fu_335_p1;
wire   [31:0] gap_count_fu_378_p2;
wire   [0:0] xor_ln26_fu_396_p2;
wire   [0:0] xor_ln41_fu_414_p2;
wire   [31:0] sel_tmp39_fu_426_p3;
wire   [31:0] length_line_fu_448_p2;
wire   [0:0] icmp_ln50_fu_471_p2;
wire   [0:0] icmp_ln46_fu_466_p2;
wire   [0:0] and_ln46_fu_498_p2;
wire   [0:0] and_ln46_1_fu_503_p2;
wire   [31:0] longest_line_in_row_2_fu_508_p3;
wire   [31:0] longest_line_in_row_3_fu_515_p3;
wire   [0:0] sel_tmp24_fu_529_p3;
wire   [31:0] length_line_1_fu_453_p3;
wire   [31:0] select_ln26_fu_539_p3;
wire   [31:0] select_ln46_fu_545_p3;
wire   [31:0] sel_tmp54_fu_553_p3;
wire   [31:0] total_x_1_fu_460_p3;
wire   [31:0] total_x_fu_566_p3;
wire   [31:0] total_x_2_fu_573_p3;
wire   [31:0] total_x_3_fu_581_p3;
wire   [31:0] select_ln50_fu_476_p3;
wire   [31:0] select_ln46_2_fu_595_p3;
wire   [31:0] sel_tmp84_fu_603_p3;
wire   [31:0] select_ln50_1_fu_483_p3;
wire   [31:0] select_ln46_3_fu_617_p3;
wire   [31:0] sel_tmp99_fu_625_p3;
wire   [31:0] select_ln50_2_fu_490_p3;
wire   [31:0] select_ln46_4_fu_639_p3;
wire   [31:0] sel_tmp114_fu_647_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln20_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln20_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gap_count_0_i_fu_156 <= select_ln41_reg_857;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gap_count_0_i_fu_156 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        is_line_0_i_fu_160 <= or_ln41_fu_534_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_line_0_i_fu_160 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        length_line_0_i_fu_152 <= select_ln41_1_fu_559_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        length_line_0_i_fu_152 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        longest_line_in_row_fu_164 <= longest_line_in_row_4_fu_522_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        longest_line_in_row_fu_164 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        startX_line_reg_214 <= x_fu_357_p2;
    end else if (((icmp_ln20_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        startX_line_reg_214 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        start_longest_lineX_fu_148 <= total_x_4_fu_588_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        start_longest_lineX_fu_148 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        total_longest_line_0_fu_144 <= select_ln41_3_fu_610_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_longest_line_0_fu_144 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        total_x_0_i_fu_136 <= select_ln41_5_fu_654_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_x_0_i_fu_136 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        total_y_reg_203 <= y_reg_771;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        total_y_reg_203 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_dc_0_fu_140 <= select_ln41_4_fu_632_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_dc_0_fu_140 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_787 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln41_reg_846 <= and_ln41_fu_420_p2;
        icmp_ln26_reg_809 <= icmp_ln26_fu_372_p2;
        icmp_ln41_reg_816 <= icmp_ln41_fu_384_p2;
        is_line_0_i_load_reg_802 <= ap_sig_allocacmp_is_line_0_i_load;
        length_line_0_i_load_reg_796 <= ap_sig_allocacmp_length_line_0_i_load;
        sel_tmp2_reg_830 <= sel_tmp2_fu_402_p2;
        sel_tmp8_demorgan_reg_835 <= sel_tmp8_demorgan_fu_408_p2;
        select_ln41_reg_857 <= select_ln41_fu_434_p3;
        total_longest_line_reg_821 <= total_longest_line_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln21_reg_787 <= icmp_ln21_fu_351_p2;
        icmp_ln21_reg_787_pp0_iter1_reg <= icmp_ln21_reg_787;
        zext_ln52_reg_782[8 : 0] <= zext_ln52_fu_347_p1[8 : 0];
        zext_ln52_reg_782_pp0_iter1_reg[8 : 0] <= zext_ln52_reg_782[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        select_ln64_reg_776 <= select_ln64_fu_339_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_reg_771 <= y_fu_285_p2;
        zext_ln53_reg_762[8 : 0] <= zext_ln53_fu_275_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln21_fu_351_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_gap_count_0_i_load = select_ln41_reg_857;
    end else begin
        ap_sig_allocacmp_gap_count_0_i_load = gap_count_0_i_fu_156;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_is_line_0_i_load = or_ln41_fu_534_p2;
    end else begin
        ap_sig_allocacmp_is_line_0_i_load = is_line_0_i_fu_160;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_787_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_length_line_0_i_load = select_ln41_1_fu_559_p3;
    end else begin
        ap_sig_allocacmp_length_line_0_i_load = length_line_0_i_fu_152;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_787 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_img_data_stream_V_blk_n = dst_img_data_stream_V_full_n;
    end else begin
        dst_img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_787 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_img_data_stream_V_write = 1'b1;
    end else begin
        dst_img_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_787 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_data_stream_V_blk_n = img_data_stream_V_empty_n;
    end else begin
        img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_787 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_data_stream_V_read = 1'b1;
    end else begin
        img_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_out_blk_n = r_out_full_n;
    end else begin
        r_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        r_out_write = 1'b1;
    end else begin
        r_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_out_blk_n = x_out_full_n;
    end else begin
        x_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        x_out_write = 1'b1;
    end else begin
        x_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_out_blk_n = y_out_full_n;
    end else begin
        y_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        y_out_write = 1'b1;
    end else begin
        y_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln20_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln21_fu_351_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln21_fu_351_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if ((~((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln41_fu_420_p2 = (xor_ln41_fu_414_p2 & sel_tmp2_fu_402_p2);

assign and_ln46_1_fu_503_p2 = (sel_tmp2_reg_830 & and_ln46_fu_498_p2);

assign and_ln46_fu_498_p2 = (icmp_ln46_fu_466_p2 & icmp_ln41_reg_816);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln21_reg_787 == 1'd0) & (dst_img_data_stream_V_full_n == 1'b0)) | ((icmp_ln21_reg_787 == 1'd0) & (img_data_stream_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln21_reg_787 == 1'd0) & (dst_img_data_stream_V_full_n == 1'b0)) | ((icmp_ln21_reg_787 == 1'd0) & (img_data_stream_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln21_reg_787 == 1'd0) & (dst_img_data_stream_V_full_n == 1'b0)) | ((icmp_ln21_reg_787 == 1'd0) & (img_data_stream_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln21_reg_787 == 1'd0) & (dst_img_data_stream_V_full_n == 1'b0)) | ((icmp_ln21_reg_787 == 1'd0) & (img_data_stream_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7 = ((y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (r_out_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dst_img_data_stream_V_din = img_data_stream_V_dout;

assign gap_count_fu_378_p2 = (ap_sig_allocacmp_gap_count_0_i_load + 32'd1);

assign icmp_ln20_fu_279_p2 = ((total_y_reg_203 == 9'd280) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_351_p2 = ((startX_line_reg_214 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_372_p2 = ((img_data_stream_V_dout < 8'd71) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_384_p2 = (($signed(gap_count_fu_378_p2) > $signed(32'd4)) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_466_p2 = (($signed(total_longest_line_reg_821) > $signed(longest_line_in_row_fu_164)) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_471_p2 = (($signed(total_longest_line_reg_821) > $signed(total_longest_line_0_fu_144)) ? 1'b1 : 1'b0);

assign length_line_1_fu_453_p3 = ((is_line_0_i_load_reg_802[0:0] === 1'b1) ? length_line_fu_448_p2 : 32'd1);

assign length_line_fu_448_p2 = (length_line_0_i_load_reg_796 + 32'd1);

assign longest_line_in_row_2_fu_508_p3 = ((and_ln46_1_fu_503_p2[0:0] === 1'b1) ? total_longest_line_reg_821 : longest_line_in_row_fu_164);

assign longest_line_in_row_3_fu_515_p3 = ((sel_tmp8_demorgan_reg_835[0:0] === 1'b1) ? longest_line_in_row_2_fu_508_p3 : longest_line_in_row_fu_164);

assign longest_line_in_row_4_fu_522_p3 = ((and_ln41_reg_846[0:0] === 1'b1) ? longest_line_in_row_fu_164 : longest_line_in_row_3_fu_515_p3);

assign lshr_ln64_1_fu_305_p4 = {{sub_ln64_fu_299_p2[31:1]}};

assign lshr_ln64_2_fu_325_p4 = {{total_longest_line_0_fu_144[31:1]}};

assign or_ln41_fu_534_p2 = (sel_tmp24_fu_529_p3 | and_ln41_reg_846);

assign r_out_din = select_ln64_reg_776;

assign sel_tmp114_fu_647_p3 = ((sel_tmp8_demorgan_reg_835[0:0] === 1'b1) ? select_ln46_4_fu_639_p3 : total_x_0_i_fu_136);

assign sel_tmp24_fu_529_p3 = ((sel_tmp8_demorgan_reg_835[0:0] === 1'b1) ? icmp_ln26_reg_809 : is_line_0_i_load_reg_802);

assign sel_tmp2_fu_402_p2 = (xor_ln26_fu_396_p2 & ap_sig_allocacmp_is_line_0_i_load);

assign sel_tmp39_fu_426_p3 = ((sel_tmp8_demorgan_fu_408_p2[0:0] === 1'b1) ? 32'd0 : ap_sig_allocacmp_gap_count_0_i_load);

assign sel_tmp54_fu_553_p3 = ((sel_tmp8_demorgan_reg_835[0:0] === 1'b1) ? select_ln46_fu_545_p3 : length_line_0_i_load_reg_796);

assign sel_tmp84_fu_603_p3 = ((sel_tmp8_demorgan_reg_835[0:0] === 1'b1) ? select_ln46_2_fu_595_p3 : total_longest_line_0_fu_144);

assign sel_tmp8_demorgan_fu_408_p2 = (icmp_ln26_fu_372_p2 | ap_sig_allocacmp_is_line_0_i_load);

assign sel_tmp99_fu_625_p3 = ((sel_tmp8_demorgan_reg_835[0:0] === 1'b1) ? select_ln46_3_fu_617_p3 : y_dc_0_fu_140);

assign select_ln26_fu_539_p3 = ((icmp_ln26_reg_809[0:0] === 1'b1) ? length_line_1_fu_453_p3 : total_longest_line_reg_821);

assign select_ln41_1_fu_559_p3 = ((and_ln41_reg_846[0:0] === 1'b1) ? length_line_fu_448_p2 : sel_tmp54_fu_553_p3);

assign select_ln41_3_fu_610_p3 = ((and_ln41_reg_846[0:0] === 1'b1) ? total_longest_line_0_fu_144 : sel_tmp84_fu_603_p3);

assign select_ln41_4_fu_632_p3 = ((and_ln41_reg_846[0:0] === 1'b1) ? y_dc_0_fu_140 : sel_tmp99_fu_625_p3);

assign select_ln41_5_fu_654_p3 = ((and_ln41_reg_846[0:0] === 1'b1) ? total_x_0_i_fu_136 : sel_tmp114_fu_647_p3);

assign select_ln41_fu_434_p3 = ((and_ln41_fu_420_p2[0:0] === 1'b1) ? gap_count_fu_378_p2 : sel_tmp39_fu_426_p3);

assign select_ln46_2_fu_595_p3 = ((and_ln46_1_fu_503_p2[0:0] === 1'b1) ? select_ln50_fu_476_p3 : total_longest_line_0_fu_144);

assign select_ln46_3_fu_617_p3 = ((and_ln46_1_fu_503_p2[0:0] === 1'b1) ? select_ln50_1_fu_483_p3 : y_dc_0_fu_140);

assign select_ln46_4_fu_639_p3 = ((and_ln46_1_fu_503_p2[0:0] === 1'b1) ? select_ln50_2_fu_490_p3 : total_x_0_i_fu_136);

assign select_ln46_fu_545_p3 = ((and_ln46_1_fu_503_p2[0:0] === 1'b1) ? 32'd0 : select_ln26_fu_539_p3);

assign select_ln50_1_fu_483_p3 = ((icmp_ln50_fu_471_p2[0:0] === 1'b1) ? zext_ln53_reg_762 : y_dc_0_fu_140);

assign select_ln50_2_fu_490_p3 = ((icmp_ln50_fu_471_p2[0:0] === 1'b1) ? start_longest_lineX_fu_148 : total_x_0_i_fu_136);

assign select_ln50_fu_476_p3 = ((icmp_ln50_fu_471_p2[0:0] === 1'b1) ? total_longest_line_reg_821 : total_longest_line_0_fu_144);

assign select_ln64_fu_339_p3 = ((tmp_fu_291_p3[0:0] === 1'b1) ? sub_ln64_1_fu_319_p2 : zext_ln64_1_fu_335_p1);

assign start_out = real_start;

assign sub_ln64_1_fu_319_p2 = (32'd0 - zext_ln64_fu_315_p1);

assign sub_ln64_fu_299_p2 = (32'd0 - total_longest_line_0_fu_144);

assign tmp_fu_291_p3 = total_longest_line_0_fu_144[32'd31];

assign total_longest_line_fu_390_p2 = ($signed(ap_sig_allocacmp_length_line_0_i_load) + $signed(32'd4294967292));

assign total_x_1_fu_460_p3 = ((is_line_0_i_load_reg_802[0:0] === 1'b1) ? start_longest_lineX_fu_148 : zext_ln52_reg_782_pp0_iter1_reg);

assign total_x_2_fu_573_p3 = ((and_ln46_1_fu_503_p2[0:0] === 1'b1) ? start_longest_lineX_fu_148 : total_x_fu_566_p3);

assign total_x_3_fu_581_p3 = ((sel_tmp8_demorgan_reg_835[0:0] === 1'b1) ? total_x_2_fu_573_p3 : start_longest_lineX_fu_148);

assign total_x_4_fu_588_p3 = ((and_ln41_reg_846[0:0] === 1'b1) ? start_longest_lineX_fu_148 : total_x_3_fu_581_p3);

assign total_x_fu_566_p3 = ((icmp_ln26_reg_809[0:0] === 1'b1) ? total_x_1_fu_460_p3 : start_longest_lineX_fu_148);

assign x_fu_357_p2 = (startX_line_reg_214 + 9'd1);

assign x_out_din = (total_x_0_i_fu_136 + select_ln64_reg_776);

assign xor_ln26_fu_396_p2 = (icmp_ln26_fu_372_p2 ^ 1'd1);

assign xor_ln41_fu_414_p2 = (icmp_ln41_fu_384_p2 ^ 1'd1);

assign y_fu_285_p2 = (total_y_reg_203 + 9'd1);

assign y_out_din = y_dc_0_fu_140;

assign zext_ln52_fu_347_p1 = startX_line_reg_214;

assign zext_ln53_fu_275_p1 = total_y_reg_203;

assign zext_ln64_1_fu_335_p1 = lshr_ln64_2_fu_325_p4;

assign zext_ln64_fu_315_p1 = lshr_ln64_1_fu_305_p4;

always @ (posedge ap_clk) begin
    zext_ln53_reg_762[31:9] <= 23'b00000000000000000000000;
    zext_ln52_reg_782[31:9] <= 23'b00000000000000000000000;
    zext_ln52_reg_782_pp0_iter1_reg[31:9] <= 23'b00000000000000000000000;
end

endmodule //findPupil
