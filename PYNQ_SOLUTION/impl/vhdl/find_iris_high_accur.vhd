-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity find_iris_high_accur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_V_empty_n : IN STD_LOGIC;
    img_data_stream_V_read : OUT STD_LOGIC;
    x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    x_empty_n : IN STD_LOGIC;
    x_read : OUT STD_LOGIC;
    y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    y_empty_n : IN STD_LOGIC;
    y_read : OUT STD_LOGIC;
    dst_img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_img_data_stream_V_full_n : IN STD_LOGIC;
    dst_img_data_stream_V_write : OUT STD_LOGIC;
    x_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_out_full_n : IN STD_LOGIC;
    x_out_write : OUT STD_LOGIC;
    y_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_out_full_n : IN STD_LOGIC;
    y_out_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of find_iris_high_accur is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv8_54 : STD_LOGIC_VECTOR (7 downto 0) := "01010100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_97 : STD_LOGIC_VECTOR (7 downto 0) := "10010111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_2D : STD_LOGIC_VECTOR (8 downto 0) := "000101101";
    constant ap_const_lv9_5A : STD_LOGIC_VECTOR (8 downto 0) := "001011010";
    constant ap_const_lv9_87 : STD_LOGIC_VECTOR (8 downto 0) := "010000111";
    constant ap_const_lv9_B4 : STD_LOGIC_VECTOR (8 downto 0) := "010110100";
    constant ap_const_lv9_13B : STD_LOGIC_VECTOR (8 downto 0) := "100111011";
    constant ap_const_lv9_E1 : STD_LOGIC_VECTOR (8 downto 0) := "011100001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_42280000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010001010000000000000000000";
    constant ap_const_lv32_BF34FDF4 : STD_LOGIC_VECTOR (31 downto 0) := "10111111001101001111110111110100";
    constant ap_const_lv32_3F34FDF4 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001101001111110111110100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv9_118 : STD_LOGIC_VECTOR (8 downto 0) := "100011000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1BC : STD_LOGIC_VECTOR (8 downto 0) := "110111100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv20_2AB : STD_LOGIC_VECTOR (19 downto 0) := "00000000001010101011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal img_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln240_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_blk_n : STD_LOGIC;
    signal y_blk_n : STD_LOGIC;
    signal dst_img_data_stream_V_blk_n : STD_LOGIC;
    signal x_out_blk_n : STD_LOGIC;
    signal y_out_blk_n : STD_LOGIC;
    signal x_read_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal y_read_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln220_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal count1_fu_525_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal count1_reg_1399 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i_38_reg_1404 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sub_ln227_fu_555_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln227_reg_1410 : STD_LOGIC_VECTOR (11 downto 0);
    signal count2_fu_567_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal count2_reg_1418 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln15_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_1423 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln222_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1428 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_reg_1434 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_1440 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_reg_1445 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln16_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln16_reg_1450 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_1_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_1_reg_1463 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_2_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_2_reg_1469 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_3_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_3_reg_1475 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_697_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln227_reg_1481 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha_fu_702_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal alpha_reg_1486 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_fu_708_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_i_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_i_reg_1511 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_3_reg_1521 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1526 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_Val2_60_fu_1003_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_60_reg_1531 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_53_reg_1537 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_62_fu_1132_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_62_reg_1542 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_1189_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal zext_ln239_fu_1200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln239_reg_1556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal y_1_fu_1210_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_1564 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln240_fu_1216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln240_reg_1569 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state28 : BOOLEAN;
    signal x_1_fu_1226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1_reg_1577 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln248_fu_1232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln248_reg_1582 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln245_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_reg_1595 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln246_1_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_1_reg_1604 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal sums_addr_3_reg_1608 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln248_fu_1290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln248_reg_1613 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal p_fu_1295_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal zext_ln261_fu_1301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln261_reg_1623 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal r_1_fu_1311_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_1_reg_1631 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln255_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_max_fu_1339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_max_reg_1646 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal select_ln259_fu_1350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal select_ln259_1_fu_1357_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal points_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal points_ce0 : STD_LOGIC;
    signal points_we0 : STD_LOGIC;
    signal points_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal points_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal points_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal points_ce1 : STD_LOGIC;
    signal points_we1 : STD_LOGIC;
    signal points_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal points_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sums_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sums_ce0 : STD_LOGIC;
    signal sums_we0 : STD_LOGIC;
    signal sums_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sums_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sums_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sums_ce1 : STD_LOGIC;
    signal sums_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_i_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal count1_0_i_reg_378 : STD_LOGIC_VECTOR (6 downto 0);
    signal val_assign_reg_390 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal count2_0_i_reg_401 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i_reg_412 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln236_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y1_0_i_reg_423 : STD_LOGIC_VECTOR (8 downto 0);
    signal x2_0_i_reg_434 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln239_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_i_reg_445 : STD_LOGIC_VECTOR (8 downto 0);
    signal iris_radius_0_i_reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_max_0_i_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal iris_radius_reg_481 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln227_3_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln228_fu_1178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_fu_1195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_1_fu_1258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln248_1_fu_1285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln256_fu_1317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln257_fu_1328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_508_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_531_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln227_1_fu_543_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln227_fu_539_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln227_1_fu_551_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln16_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln15_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln16_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln17_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln17_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln227_fu_687_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln227_2_fu_693_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln19_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln20_1_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_1_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_742_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln20_fu_734_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln16_1_fu_753_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln20_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp53_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp40_fu_795_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_1_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln5_fu_825_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln10_fu_818_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln7_fu_840_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln5_1_fu_832_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln9_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln9_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_fu_859_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln7_1_fu_847_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_22_fu_903_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_907_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_893_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_921_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_925_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_939_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_931_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_945_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_949_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_2_fu_957_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_5_fu_961_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_917_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_965_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_969_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_981_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_11_fu_975_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_993_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_55_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_24_fu_1032_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_1_fu_1036_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_23_fu_1022_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_1_fu_1050_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_1_fu_1054_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_1_fu_1068_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_1060_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_3_fu_1074_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_1078_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_4_fu_1086_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_6_fu_1090_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_1_fu_1046_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_1_fu_1094_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_12_fu_1098_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_31_fu_1110_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_13_fu_1104_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_1_fu_1118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1122_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_1140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_4_fu_1152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln227_fu_1164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln228_fu_1172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln246_fu_1252_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln247_fu_1364_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_33_fu_1272_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln247_fu_1281_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln257_fu_1322_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln259_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln247_fu_1364_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln247_fu_1364_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln247_fu_1364_p00 : STD_LOGIC_VECTOR (19 downto 0);

    component top_level2_fadd_3g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level2_fmul_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level2_sitofpibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level2_mul_mujbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component find_iris_high_aceOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component find_iris_high_acfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    points_U : component find_iris_high_aceOg
    generic map (
        DataWidth => 32,
        AddressRange => 804,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => points_address0,
        ce0 => points_ce0,
        we0 => points_we0,
        d0 => points_d0,
        q0 => points_q0,
        address1 => points_address1,
        ce1 => points_ce1,
        we1 => points_we1,
        d1 => points_d1,
        q1 => points_q1);

    sums_U : component find_iris_high_acfYi
    generic map (
        DataWidth => 32,
        AddressRange => 37,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sums_address0,
        ce0 => sums_ce0,
        we0 => sums_we0,
        d0 => sums_d0,
        q0 => sums_q0,
        address1 => sums_address1,
        ce1 => sums_ce1,
        q1 => sums_q1);

    top_level2_fadd_3g8j_U34 : component top_level2_fadd_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_1381,
        din1 => tmp_17_i_reg_1506,
        ce => ap_const_logic_1,
        dout => grp_fu_492_p2);

    top_level2_fadd_3g8j_U35 : component top_level2_fadd_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_i_reg_1386,
        din1 => tmp_20_i_reg_1511,
        ce => ap_const_logic_1,
        dout => grp_fu_496_p2);

    top_level2_fmul_3hbi_U36 : component top_level2_fmul_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_38_reg_1404,
        din1 => grp_fu_500_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_500_p2);

    top_level2_fmul_3hbi_U37 : component top_level2_fmul_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_38_reg_1404,
        din1 => grp_fu_504_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_504_p2);

    top_level2_sitofpibs_U38 : component top_level2_sitofpibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_508_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_508_p1);

    top_level2_sitofpibs_U39 : component top_level2_sitofpibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_read_reg_1376,
        ce => ap_const_logic_1,
        dout => grp_fu_511_p1);

    top_level2_mul_mujbC_U40 : component top_level2_mul_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln247_fu_1364_p0,
        din1 => mul_ln247_fu_1364_p1,
        dout => mul_ln247_fu_1364_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln255_fu_1305_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count1_0_i_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln222_fu_561_p2 = ap_const_lv1_1))) then 
                count1_0_i_reg_378 <= count1_reg_1399;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                count1_0_i_reg_378 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    count2_0_i_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                count2_0_i_reg_401 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                count2_0_i_reg_401 <= count2_reg_1418;
            end if; 
        end if;
    end process;

    i_0_i_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln220_fu_519_p2 = ap_const_lv1_1))) then 
                i_0_i_reg_412 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln236_fu_1183_p2 = ap_const_lv1_0))) then 
                i_0_i_reg_412 <= i_fu_1189_p2;
            end if; 
        end if;
    end process;

    i_max_0_i_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln239_fu_1204_p2 = ap_const_lv1_1))) then 
                i_max_0_i_reg_469 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                i_max_0_i_reg_469 <= select_ln259_1_fu_1357_p3;
            end if; 
        end if;
    end process;

    iris_radius_0_i_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln239_fu_1204_p2 = ap_const_lv1_1))) then 
                iris_radius_0_i_reg_457 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                iris_radius_0_i_reg_457 <= select_ln259_fu_1350_p3;
            end if; 
        end if;
    end process;

    iris_radius_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln239_fu_1204_p2 = ap_const_lv1_1))) then 
                iris_radius_reg_481 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                iris_radius_reg_481 <= r_1_reg_1631;
            end if; 
        end if;
    end process;

    p_0_i_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                p_0_i_reg_445 <= p_fu_1295_p2;
            elsif ((not((((dst_img_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)) or ((img_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0))) then 
                p_0_i_reg_445 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    r_0_i_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln222_fu_561_p2 = ap_const_lv1_1))) then 
                r_0_i_reg_366 <= r_fu_708_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                r_0_i_reg_366 <= ap_const_lv8_54;
            end if; 
        end if;
    end process;

    val_assign_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                val_assign_reg_390 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                val_assign_reg_390 <= alpha_reg_1486;
            end if; 
        end if;
    end process;

    x2_0_i_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln245_fu_1236_p2 = ap_const_lv1_0))) then 
                x2_0_i_reg_434 <= x_1_reg_1577;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln239_fu_1204_p2 = ap_const_lv1_0))) then 
                x2_0_i_reg_434 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    y1_0_i_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln236_fu_1183_p2 = ap_const_lv1_1))) then 
                y1_0_i_reg_423 <= ap_const_lv9_0;
            elsif ((not((((dst_img_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)) or ((img_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_1))) then 
                y1_0_i_reg_423 <= y_1_reg_1564;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln222_fu_561_p2 = ap_const_lv1_0))) then
                    add_ln227_reg_1481(11 downto 1) <= add_ln227_fu_697_p2(11 downto 1);
                alpha_reg_1486 <= alpha_fu_702_p2;
                and_ln16_reg_1450 <= and_ln16_fu_639_p2;
                and_ln18_reg_1457 <= and_ln18_fu_663_p2;
                icmp_ln15_reg_1423 <= icmp_ln15_fu_573_p2;
                icmp_ln19_reg_1428 <= icmp_ln19_fu_597_p2;
                icmp_ln20_1_reg_1445 <= icmp_ln20_1_fu_627_p2;
                icmp_ln20_2_reg_1469 <= icmp_ln20_2_fu_675_p2;
                icmp_ln20_3_reg_1475 <= icmp_ln20_3_fu_681_p2;
                icmp_ln20_reg_1440 <= icmp_ln20_fu_621_p2;
                or_ln18_1_reg_1463 <= or_ln18_1_fu_669_p2;
                or_ln18_reg_1434 <= or_ln18_fu_615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_ln248_reg_1613 <= add_ln248_fu_1290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                count1_reg_1399 <= count1_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                count2_reg_1418 <= count2_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                i_max_reg_1646 <= i_max_fu_1339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                icmp_ln246_1_reg_1604 <= icmp_ln246_1_fu_1263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                icmp_ln246_reg_1595 <= icmp_ln246_fu_1247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                p_Result_53_reg_1537 <= p_Val2_55_fu_1011_p1(31 downto 31);
                p_Result_s_reg_1526 <= p_Val2_s_fu_882_p1(31 downto 31);
                p_Val2_60_reg_1531 <= p_Val2_60_fu_1003_p3;
                p_Val2_62_reg_1542 <= p_Val2_62_fu_1132_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln255_fu_1305_p2 = ap_const_lv1_0))) then
                r_1_reg_1631 <= r_1_fu_1311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    sub_ln227_reg_1410(11 downto 2) <= sub_ln227_fu_555_p2(11 downto 2);
                tmp_i_38_reg_1404 <= grp_fu_508_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln246_1_fu_1263_p2 = ap_const_lv1_1))) then
                sums_addr_3_reg_1608 <= zext_ln248_1_fu_1285_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_17_i_reg_1506 <= grp_fu_500_p2;
                tmp_20_i_reg_1511 <= grp_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_19_i_reg_1386 <= grp_fu_511_p1;
                tmp_i_reg_1381 <= grp_fu_508_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((dst_img_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)) or ((img_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                x_1_reg_1577 <= x_1_fu_1226_p2;
                    zext_ln240_reg_1569(8 downto 0) <= zext_ln240_fu_1216_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                x_assign_3_reg_1521 <= grp_fu_496_p2;
                x_assign_reg_1516 <= grp_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (y_out_full_n = ap_const_logic_0) or (x_out_full_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                x_read_reg_1371 <= x_dout;
                y_read_reg_1376 <= y_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                y_1_reg_1564 <= y_1_fu_1210_p2;
                    zext_ln239_reg_1556(8 downto 0) <= zext_ln239_fu_1200_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((dst_img_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)) or ((img_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0))) then
                    zext_ln248_reg_1582(7 downto 0) <= zext_ln248_fu_1232_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                    zext_ln261_reg_1623(5 downto 0) <= zext_ln261_fu_1301_p1(5 downto 0);
            end if;
        end if;
    end process;
    sub_ln227_reg_1410(1 downto 0) <= "00";
    add_ln227_reg_1481(0) <= '0';
    zext_ln239_reg_1556(31 downto 9) <= "00000000000000000000000";
    zext_ln240_reg_1569(31 downto 9) <= "00000000000000000000000";
    zext_ln248_reg_1582(31 downto 8) <= "000000000000000000000000";
    zext_ln261_reg_1623(31 downto 6) <= "00000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_data_stream_V_empty_n, x_empty_n, y_empty_n, dst_img_data_stream_V_full_n, x_out_full_n, y_out_full_n, ap_CS_fsm_state28, icmp_ln240_fu_1220_p2, ap_CS_fsm_state8, ap_CS_fsm_state14, icmp_ln222_fu_561_p2, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state29, icmp_ln245_fu_1236_p2, icmp_ln246_fu_1247_p2, ap_CS_fsm_state30, icmp_ln246_1_fu_1263_p2, ap_CS_fsm_state31, ap_CS_fsm_state35, icmp_ln255_fu_1305_p2, icmp_ln236_fu_1183_p2, icmp_ln220_fu_519_p2, icmp_ln239_fu_1204_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (y_out_full_n = ap_const_logic_0) or (x_out_full_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln220_fu_519_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln222_fu_561_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln236_fu_1183_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln239_fu_1204_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if ((not((((dst_img_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)) or ((img_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif ((not((((dst_img_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)) or ((img_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln245_fu_1236_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln246_fu_1247_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln246_1_fu_1263_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln255_fu_1305_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln227_fu_697_p2 <= std_logic_vector(unsigned(zext_ln227_2_fu_693_p1) + unsigned(sub_ln227_reg_1410));
    add_ln248_fu_1290_p2 <= std_logic_vector(unsigned(sums_q0) + unsigned(zext_ln248_reg_1582));
    add_ln257_fu_1322_p2 <= std_logic_vector(unsigned(iris_radius_reg_481) + unsigned(ap_const_lv6_3F));
    add_ln339_1_fu_1054_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_1_fu_1050_p1));
    add_ln339_fu_925_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_921_p1));
    alpha_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv9_2D) + unsigned(val_assign_reg_390));
    and_ln16_fu_639_p2 <= (xor_ln15_fu_633_p2 and icmp_ln16_fu_579_p2);
    and_ln17_fu_651_p2 <= (xor_ln16_fu_645_p2 and icmp_ln17_fu_585_p2);
    and_ln18_fu_663_p2 <= (xor_ln17_fu_657_p2 and icmp_ln18_fu_591_p2);
    and_ln19_fu_780_p2 <= (xor_ln18_fu_775_p2 and icmp_ln19_reg_1428);
    and_ln20_1_fu_729_p2 <= (icmp_ln20_reg_1440 and and_ln20_fu_724_p2);
    and_ln20_fu_724_p2 <= (xor_ln19_fu_718_p2 and icmp_ln20_1_reg_1445);
    and_ln9_fu_854_p2 <= (xor_ln19_fu_718_p2 and icmp_ln20_3_reg_1475);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, x_empty_n, y_empty_n, x_out_full_n, y_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (y_out_full_n = ap_const_logic_0) or (x_out_full_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state28_assign_proc : process(img_data_stream_V_empty_n, dst_img_data_stream_V_full_n, icmp_ln240_fu_1220_p2)
    begin
                ap_block_state28 <= (((dst_img_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)) or ((img_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state35, icmp_ln255_fu_1305_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln255_fu_1305_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ap_return <= std_logic_vector(unsigned(iris_radius_0_i_reg_457) + unsigned(ap_const_lv32_55));
    count1_fu_525_p2 <= std_logic_vector(unsigned(count1_0_i_reg_378) + unsigned(ap_const_lv7_1));
    count2_fu_567_p2 <= std_logic_vector(unsigned(count2_0_i_reg_401) + unsigned(ap_const_lv4_1));

    dst_img_data_stream_V_blk_n_assign_proc : process(dst_img_data_stream_V_full_n, ap_CS_fsm_state28, icmp_ln240_fu_1220_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0))) then 
            dst_img_data_stream_V_blk_n <= dst_img_data_stream_V_full_n;
        else 
            dst_img_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_img_data_stream_V_din <= img_data_stream_V_dout;

    dst_img_data_stream_V_write_assign_proc : process(img_data_stream_V_empty_n, dst_img_data_stream_V_full_n, ap_CS_fsm_state28, icmp_ln240_fu_1220_p2)
    begin
        if ((not((((dst_img_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)) or ((img_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0))) then 
            dst_img_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_img_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_803_p2 <= (sel_tmp53_fu_789_p2 or and_ln19_fu_780_p2);
    grp_fu_500_p1 <= 
        select_ln9_fu_859_p3 when (or_ln9_fu_867_p2(0) = '1') else 
        select_ln7_1_fu_847_p3;
    grp_fu_504_p1 <= 
        sel_tmp40_fu_795_p3 when (empty_fu_803_p2(0) = '1') else 
        select_ln18_1_fu_768_p3;

    grp_fu_508_p0_assign_proc : process(x_read_reg_1371, zext_ln220_fu_514_p1, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_508_p0 <= zext_ln220_fu_514_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_508_p0 <= x_read_reg_1371;
        else 
            grp_fu_508_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_1189_p2 <= std_logic_vector(unsigned(i_0_i_reg_412) + unsigned(ap_const_lv6_1));
    i_max_fu_1339_p2 <= std_logic_vector(unsigned(sums_q0) - unsigned(sums_q1));
    icmp_ln15_fu_573_p2 <= "1" when (val_assign_reg_390 = ap_const_lv9_0) else "0";
    icmp_ln16_fu_579_p2 <= "1" when (val_assign_reg_390 = ap_const_lv9_2D) else "0";
    icmp_ln17_fu_585_p2 <= "1" when (val_assign_reg_390 = ap_const_lv9_5A) else "0";
    icmp_ln18_fu_591_p2 <= "1" when (val_assign_reg_390 = ap_const_lv9_87) else "0";
    icmp_ln19_fu_597_p2 <= "1" when (val_assign_reg_390 = ap_const_lv9_B4) else "0";
    icmp_ln20_1_fu_627_p2 <= "0" when (val_assign_reg_390 = ap_const_lv9_E1) else "1";
    icmp_ln20_2_fu_675_p2 <= "1" when (val_assign_reg_390 = ap_const_lv9_13B) else "0";
    icmp_ln20_3_fu_681_p2 <= "1" when (val_assign_reg_390 = ap_const_lv9_E1) else "0";
    icmp_ln20_fu_621_p2 <= "0" when (val_assign_reg_390 = ap_const_lv9_13B) else "1";
    icmp_ln220_fu_519_p2 <= "1" when (r_0_i_reg_366 = ap_const_lv8_97) else "0";
    icmp_ln222_fu_561_p2 <= "1" when (count2_0_i_reg_401 = ap_const_lv4_8) else "0";
    icmp_ln236_fu_1183_p2 <= "1" when (i_0_i_reg_412 = ap_const_lv6_25) else "0";
    icmp_ln239_fu_1204_p2 <= "1" when (y1_0_i_reg_423 = ap_const_lv9_118) else "0";
    icmp_ln240_fu_1220_p2 <= "1" when (x2_0_i_reg_434 = ap_const_lv9_140) else "0";
    icmp_ln245_fu_1236_p2 <= "1" when (unsigned(p_0_i_reg_445) < unsigned(ap_const_lv9_1BC)) else "0";
    icmp_ln246_1_fu_1263_p2 <= "1" when (points_q1 = zext_ln239_reg_1556) else "0";
    icmp_ln246_fu_1247_p2 <= "1" when (points_q0 = zext_ln240_reg_1569) else "0";
    icmp_ln255_fu_1305_p2 <= "1" when (iris_radius_reg_481 = ap_const_lv6_25) else "0";
    icmp_ln259_fu_1345_p2 <= "1" when (signed(i_max_reg_1646) > signed(i_max_0_i_reg_469)) else "0";

    img_data_stream_V_blk_n_assign_proc : process(img_data_stream_V_empty_n, ap_CS_fsm_state28, icmp_ln240_fu_1220_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0))) then 
            img_data_stream_V_blk_n <= img_data_stream_V_empty_n;
        else 
            img_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_data_stream_V_read_assign_proc : process(img_data_stream_V_empty_n, dst_img_data_stream_V_full_n, ap_CS_fsm_state28, icmp_ln240_fu_1220_p2)
    begin
        if ((not((((dst_img_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)) or ((img_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0)))) and (ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln240_fu_1220_p2 = ap_const_lv1_0))) then 
            img_data_stream_V_read <= ap_const_logic_1;
        else 
            img_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state35, icmp_ln255_fu_1305_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln255_fu_1305_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_1060_p3 <= add_ln339_1_fu_1054_p2(8 downto 8);
    isNeg_fu_931_p3 <= add_ln339_fu_925_p2(8 downto 8);
    mantissa_V_1_fu_1036_p4 <= ((ap_const_lv1_1 & tmp_V_24_fu_1032_p1) & ap_const_lv1_0);
    mantissa_V_fu_907_p4 <= ((ap_const_lv1_1 & tmp_V_22_fu_903_p1) & ap_const_lv1_0);
    mul_ln247_fu_1364_p0 <= mul_ln247_fu_1364_p00(9 - 1 downto 0);
    mul_ln247_fu_1364_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_i_reg_445),20));
    mul_ln247_fu_1364_p1 <= ap_const_lv20_2AB(11 - 1 downto 0);
    or_ln16_1_fu_749_p2 <= (icmp_ln15_reg_1423 or and_ln16_reg_1450);
    or_ln16_fu_603_p2 <= (icmp_ln16_fu_579_p2 or icmp_ln15_fu_573_p2);
    or_ln17_fu_609_p2 <= (or_ln16_fu_603_p2 or icmp_ln17_fu_585_p2);
    or_ln18_1_fu_669_p2 <= (and_ln18_fu_663_p2 or and_ln17_fu_651_p2);
    or_ln18_fu_615_p2 <= (or_ln17_fu_609_p2 or icmp_ln18_fu_591_p2);
    or_ln19_fu_714_p2 <= (or_ln18_reg_1434 or icmp_ln19_reg_1428);
    or_ln20_fu_785_p2 <= (icmp_ln20_3_reg_1475 or icmp_ln20_2_reg_1469);
    or_ln228_fu_1172_p2 <= (sext_ln227_fu_1164_p1 or ap_const_lv32_1);
    or_ln246_fu_1252_p2 <= (p_0_i_reg_445 or ap_const_lv9_1);
    or_ln9_fu_867_p2 <= (and_ln9_fu_854_p2 or and_ln19_fu_780_p2);
    p_Val2_55_fu_1011_p1 <= x_assign_3_reg_1521;
    p_Val2_60_fu_1003_p3 <= 
        zext_ln662_fu_989_p1 when (isNeg_fu_931_p3(0) = '1') else 
        tmp_4_fu_993_p4;
    p_Val2_62_fu_1132_p3 <= 
        zext_ln662_1_fu_1118_p1 when (isNeg_1_fu_1060_p3(0) = '1') else 
        tmp_8_fu_1122_p4;
    p_Val2_s_fu_882_p1 <= x_assign_reg_1516;
    p_fu_1295_p2 <= std_logic_vector(unsigned(p_0_i_reg_445) + unsigned(ap_const_lv9_2));

    points_address0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state25, zext_ln227_3_fu_1167_p1, zext_ln246_fu_1242_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            points_address0 <= zext_ln246_fu_1242_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            points_address0 <= zext_ln227_3_fu_1167_p1(10 - 1 downto 0);
        else 
            points_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    points_address1_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state25, zext_ln228_fu_1178_p1, zext_ln246_1_fu_1258_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            points_address1 <= zext_ln246_1_fu_1258_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            points_address1 <= zext_ln228_fu_1178_p1(10 - 1 downto 0);
        else 
            points_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    points_ce0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            points_ce0 <= ap_const_logic_1;
        else 
            points_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    points_ce1_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            points_ce1 <= ap_const_logic_1;
        else 
            points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    points_d0 <= 
        result_V_2_fu_1140_p2 when (p_Result_s_reg_1526(0) = '1') else 
        p_Val2_60_reg_1531;
    points_d1 <= 
        result_V_4_fu_1152_p2 when (p_Result_53_reg_1537(0) = '1') else 
        p_Val2_62_reg_1542;

    points_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            points_we0 <= ap_const_logic_1;
        else 
            points_we0 <= ap_const_logic_0;
        end if; 
    end process;


    points_we1_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            points_we1 <= ap_const_logic_1;
        else 
            points_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_1311_p2 <= std_logic_vector(unsigned(iris_radius_reg_481) + unsigned(ap_const_lv6_1));
    r_V_11_fu_975_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_917_p1),to_integer(unsigned('0' & zext_ln1287_fu_965_p1(31-1 downto 0)))));
    r_V_12_fu_1098_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_1036_p4),to_integer(unsigned('0' & sext_ln1311_6_fu_1090_p1(25-1 downto 0)))));
    r_V_13_fu_1104_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_1_fu_1046_p1),to_integer(unsigned('0' & zext_ln1287_1_fu_1094_p1(31-1 downto 0)))));
    r_V_fu_969_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_907_p4),to_integer(unsigned('0' & sext_ln1311_5_fu_961_p1(25-1 downto 0)))));
    r_fu_708_p2 <= std_logic_vector(unsigned(r_0_i_reg_366) + unsigned(ap_const_lv8_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    result_V_2_fu_1140_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_60_reg_1531));
    result_V_4_fu_1152_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_62_reg_1542));
    sel_tmp40_fu_795_p3 <= 
        ap_const_lv32_BF34FDF4 when (sel_tmp53_fu_789_p2(0) = '1') else 
        ap_const_lv32_0;
    sel_tmp53_fu_789_p2 <= (xor_ln19_fu_718_p2 and or_ln20_fu_785_p2);
    select_ln10_fu_818_p3 <= 
        ap_const_lv32_3F34FDF4 when (icmp_ln20_2_reg_1469(0) = '1') else 
        ap_const_lv32_42280000;
    select_ln16_1_fu_753_p3 <= 
        select_ln16_fu_742_p3 when (or_ln16_1_fu_749_p2(0) = '1') else 
        select_ln20_fu_734_p3;
    select_ln16_fu_742_p3 <= 
        ap_const_lv32_3F34FDF4 when (and_ln16_reg_1450(0) = '1') else 
        ap_const_lv32_0;
    select_ln18_1_fu_768_p3 <= 
        select_ln18_fu_761_p3 when (or_ln18_1_reg_1463(0) = '1') else 
        select_ln16_1_fu_753_p3;
    select_ln18_fu_761_p3 <= 
        ap_const_lv32_3F34FDF4 when (and_ln18_reg_1457(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln20_fu_734_p3 <= 
        ap_const_lv32_42280000 when (and_ln20_1_fu_729_p2(0) = '1') else 
        ap_const_lv32_BF34FDF4;
    select_ln259_1_fu_1357_p3 <= 
        i_max_reg_1646 when (icmp_ln259_fu_1345_p2(0) = '1') else 
        i_max_0_i_reg_469;
    select_ln259_fu_1350_p3 <= 
        zext_ln261_reg_1623 when (icmp_ln259_fu_1345_p2(0) = '1') else 
        iris_radius_0_i_reg_457;
    select_ln5_1_fu_832_p3 <= 
        select_ln5_fu_825_p3 when (or_ln16_1_fu_749_p2(0) = '1') else 
        select_ln10_fu_818_p3;
    select_ln5_fu_825_p3 <= 
        ap_const_lv32_3F34FDF4 when (and_ln16_reg_1450(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln7_1_fu_847_p3 <= 
        select_ln7_fu_840_p3 when (or_ln18_1_reg_1463(0) = '1') else 
        select_ln5_1_fu_832_p3;
    select_ln7_fu_840_p3 <= 
        ap_const_lv32_BF34FDF4 when (and_ln18_reg_1457(0) = '1') else 
        ap_const_lv32_0;
    select_ln9_fu_859_p3 <= 
        ap_const_lv32_BF34FDF4 when (and_ln9_fu_854_p2(0) = '1') else 
        ap_const_lv32_BF800000;
        sext_ln1311_2_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_949_p3),32));

        sext_ln1311_3_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_1068_p2),9));

        sext_ln1311_4_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_1078_p3),32));

        sext_ln1311_5_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_949_p3),25));

        sext_ln1311_6_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_1078_p3),25));

        sext_ln1311_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_939_p2),9));

        sext_ln227_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln227_reg_1481),32));

        sext_ln247_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_fu_1272_p4),9));

    shl_ln227_1_fu_543_p3 <= (count1_0_i_reg_378 & ap_const_lv2_0);
    shl_ln227_fu_687_p2 <= std_logic_vector(shift_left(unsigned(count2_0_i_reg_401),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln_fu_531_p3 <= (count1_0_i_reg_378 & ap_const_lv4_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1311_1_fu_1068_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_23_fu_1022_p4));
    sub_ln1311_fu_939_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_893_p4));
    sub_ln227_fu_555_p2 <= std_logic_vector(unsigned(zext_ln227_fu_539_p1) - unsigned(zext_ln227_1_fu_551_p1));

    sums_address0_assign_proc : process(ap_CS_fsm_state26, sums_addr_3_reg_1608, ap_CS_fsm_state34, ap_CS_fsm_state35, zext_ln236_fu_1195_p1, zext_ln256_fu_1317_p1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sums_address0 <= zext_ln256_fu_1317_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            sums_address0 <= sums_addr_3_reg_1608;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sums_address0 <= zext_ln236_fu_1195_p1(6 - 1 downto 0);
        else 
            sums_address0 <= "XXXXXX";
        end if; 
    end process;

    sums_address1 <= zext_ln257_fu_1328_p1(6 - 1 downto 0);

    sums_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            sums_ce0 <= ap_const_logic_1;
        else 
            sums_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sums_ce1_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sums_ce1 <= ap_const_logic_1;
        else 
            sums_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sums_d0_assign_proc : process(ap_CS_fsm_state26, add_ln248_reg_1613, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sums_d0 <= add_ln248_reg_1613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sums_d0 <= ap_const_lv32_0;
        else 
            sums_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sums_we0_assign_proc : process(ap_CS_fsm_state26, icmp_ln246_reg_1595, icmp_ln246_1_reg_1604, ap_CS_fsm_state34, icmp_ln236_fu_1183_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln246_1_reg_1604 = ap_const_lv1_1) and (icmp_ln246_reg_1595 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln236_fu_1183_p2 = ap_const_lv1_0)))) then 
            sums_we0 <= ap_const_logic_1;
        else 
            sums_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_31_fu_1110_p3 <= r_V_12_fu_1098_p2(24 downto 24);
    tmp_33_fu_1272_p4 <= mul_ln247_fu_1364_p2(19 downto 13);
    tmp_4_fu_993_p4 <= r_V_11_fu_975_p2(55 downto 24);
    tmp_8_fu_1122_p4 <= r_V_13_fu_1104_p2(55 downto 24);
    tmp_V_22_fu_903_p1 <= p_Val2_s_fu_882_p1(23 - 1 downto 0);
    tmp_V_23_fu_1022_p4 <= p_Val2_55_fu_1011_p1(30 downto 23);
    tmp_V_24_fu_1032_p1 <= p_Val2_55_fu_1011_p1(23 - 1 downto 0);
    tmp_V_fu_893_p4 <= p_Val2_s_fu_882_p1(30 downto 23);
    tmp_fu_981_p3 <= r_V_fu_969_p2(24 downto 24);
    ush_1_fu_1078_p3 <= 
        sext_ln1311_3_fu_1074_p1 when (isNeg_1_fu_1060_p3(0) = '1') else 
        add_ln339_1_fu_1054_p2;
    ush_fu_949_p3 <= 
        sext_ln1311_fu_945_p1 when (isNeg_fu_931_p3(0) = '1') else 
        add_ln339_fu_925_p2;
    x_1_fu_1226_p2 <= std_logic_vector(unsigned(x2_0_i_reg_434) + unsigned(ap_const_lv9_1));

    x_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_blk_n <= x_empty_n;
        else 
            x_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, x_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_out_blk_n <= x_out_full_n;
        else 
            x_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    x_out_din <= x_dout;

    x_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, x_out_full_n, y_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (y_out_full_n = ap_const_logic_0) or (x_out_full_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_out_write <= ap_const_logic_1;
        else 
            x_out_write <= ap_const_logic_0;
        end if; 
    end process;


    x_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, x_out_full_n, y_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (y_out_full_n = ap_const_logic_0) or (x_out_full_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_read <= ap_const_logic_1;
        else 
            x_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln15_fu_633_p2 <= (icmp_ln15_fu_573_p2 xor ap_const_lv1_1);
    xor_ln16_fu_645_p2 <= (or_ln16_fu_603_p2 xor ap_const_lv1_1);
    xor_ln17_fu_657_p2 <= (or_ln17_fu_609_p2 xor ap_const_lv1_1);
    xor_ln18_fu_775_p2 <= (or_ln18_reg_1434 xor ap_const_lv1_1);
    xor_ln19_fu_718_p2 <= (or_ln19_fu_714_p2 xor ap_const_lv1_1);
    y_1_fu_1210_p2 <= std_logic_vector(unsigned(y1_0_i_reg_423) + unsigned(ap_const_lv9_1));

    y_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_blk_n <= y_empty_n;
        else 
            y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, y_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_out_blk_n <= y_out_full_n;
        else 
            y_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_out_din <= y_dout;

    y_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, x_out_full_n, y_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (y_out_full_n = ap_const_logic_0) or (x_out_full_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_out_write <= ap_const_logic_1;
        else 
            y_out_write <= ap_const_logic_0;
        end if; 
    end process;


    y_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, x_out_full_n, y_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (y_out_full_n = ap_const_logic_0) or (x_out_full_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_read <= ap_const_logic_1;
        else 
            y_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1287_1_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_4_fu_1086_p1),79));
    zext_ln1287_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_2_fu_957_p1),79));
    zext_ln220_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_i_reg_366),32));
    zext_ln227_1_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln227_1_fu_543_p3),12));
    zext_ln227_2_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln227_fu_687_p2),12));
    zext_ln227_3_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln227_fu_1164_p1),64));
    zext_ln227_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_531_p3),12));
    zext_ln228_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln228_fu_1172_p2),64));
    zext_ln236_fu_1195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_412),64));
    zext_ln239_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y1_0_i_reg_423),32));
    zext_ln240_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x2_0_i_reg_434),32));
    zext_ln246_1_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln246_fu_1252_p2),64));
    zext_ln246_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_i_reg_445),64));
    zext_ln248_1_fu_1285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln247_fu_1281_p1),64));
    zext_ln248_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_data_stream_V_dout),32));
    zext_ln256_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_fu_1311_p2),64));
    zext_ln257_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln257_fu_1322_p2),64));
    zext_ln261_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iris_radius_reg_481),32));
    zext_ln339_1_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_23_fu_1022_p4),9));
    zext_ln339_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_893_p4),9));
    zext_ln662_1_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_1110_p3),32));
    zext_ln662_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_981_p3),32));
    zext_ln682_1_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_1036_p4),79));
    zext_ln682_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_907_p4),79));
end behav;
