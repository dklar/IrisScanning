-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_level is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inputStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inputStream_TVALID : IN STD_LOGIC;
    inputStream_TREADY : OUT STD_LOGIC;
    inputStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inputStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inputStream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inputStream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    inputStream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outputStream_TVALID : OUT STD_LOGIC;
    outputStream_TREADY : IN STD_LOGIC;
    outputStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outputStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outputStream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of top_level is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_level,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=84,HLS_SYN_DSP=52,HLS_SYN_FF=11382,HLS_SYN_LUT=26068,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal grp_method1_fu_54_outputStream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_method1_fu_54_outputStream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_method1_fu_54_outputStream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_method1_fu_54_outputStream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_method1_fu_54_outputStream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_method1_fu_54_outputStream_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_method1_fu_54_outputStream_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_method1_fu_54_ap_start : STD_LOGIC;
    signal grp_method1_fu_54_inputStream_TREADY : STD_LOGIC;
    signal grp_method1_fu_54_outputStream_TVALID : STD_LOGIC;
    signal grp_method1_fu_54_outputStream_TREADY : STD_LOGIC;
    signal grp_method1_fu_54_ap_done : STD_LOGIC;
    signal grp_method1_fu_54_ap_ready : STD_LOGIC;
    signal grp_method1_fu_54_ap_idle : STD_LOGIC;
    signal grp_method1_fu_54_ap_continue : STD_LOGIC;
    signal grp_method1_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_method1_fu_54_ap_ready : STD_LOGIC;
    signal ap_sync_grp_method1_fu_54_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_method1_fu_54_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_method1_fu_54_ap_done : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_outputStream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_inputStream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal inputStream_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal inputStream_TVALID_int : STD_LOGIC;
    signal inputStream_TREADY_int : STD_LOGIC;
    signal regslice_both_inputStream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inputStream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal inputStream_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_inputStream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inputStream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inputStream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal inputStream_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_inputStream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inputStream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inputStream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal inputStream_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_inputStream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inputStream_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inputStream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal inputStream_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_inputStream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inputStream_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inputStream_V_id_V_U_apdone_blk : STD_LOGIC;
    signal inputStream_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_inputStream_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inputStream_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inputStream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal inputStream_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_inputStream_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inputStream_V_dest_V_U_ack_in : STD_LOGIC;
    signal outputStream_TREADY_int : STD_LOGIC;
    signal regslice_both_outputStream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outputStream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outputStream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outputStream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outputStream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outputStream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outputStream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outputStream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outputStream_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outputStream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outputStream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outputStream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outputStream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outputStream_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outputStream_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outputStream_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outputStream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outputStream_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outputStream_V_dest_V_U_vld_out : STD_LOGIC;

    component method1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        inputStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        inputStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        inputStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        inputStream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inputStream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        inputStream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        outputStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        outputStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        outputStream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        outputStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        outputStream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        outputStream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_start : IN STD_LOGIC;
        inputStream_TVALID : IN STD_LOGIC;
        inputStream_TREADY : OUT STD_LOGIC;
        outputStream_TVALID : OUT STD_LOGIC;
        outputStream_TREADY : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_method1_fu_54 : component method1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        inputStream_TDATA => inputStream_TDATA_int,
        inputStream_TKEEP => inputStream_TKEEP_int,
        inputStream_TSTRB => inputStream_TSTRB_int,
        inputStream_TUSER => inputStream_TUSER_int,
        inputStream_TLAST => inputStream_TLAST_int,
        inputStream_TID => inputStream_TID_int,
        inputStream_TDEST => inputStream_TDEST_int,
        outputStream_TDATA => grp_method1_fu_54_outputStream_TDATA,
        outputStream_TKEEP => grp_method1_fu_54_outputStream_TKEEP,
        outputStream_TSTRB => grp_method1_fu_54_outputStream_TSTRB,
        outputStream_TUSER => grp_method1_fu_54_outputStream_TUSER,
        outputStream_TLAST => grp_method1_fu_54_outputStream_TLAST,
        outputStream_TID => grp_method1_fu_54_outputStream_TID,
        outputStream_TDEST => grp_method1_fu_54_outputStream_TDEST,
        ap_start => grp_method1_fu_54_ap_start,
        inputStream_TVALID => inputStream_TVALID_int,
        inputStream_TREADY => grp_method1_fu_54_inputStream_TREADY,
        outputStream_TVALID => grp_method1_fu_54_outputStream_TVALID,
        outputStream_TREADY => grp_method1_fu_54_outputStream_TREADY,
        ap_done => grp_method1_fu_54_ap_done,
        ap_ready => grp_method1_fu_54_ap_ready,
        ap_idle => grp_method1_fu_54_ap_idle,
        ap_continue => grp_method1_fu_54_ap_continue);

    regslice_both_inputStream_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inputStream_TDATA,
        vld_in => inputStream_TVALID,
        ack_in => regslice_both_inputStream_V_data_V_U_ack_in,
        data_out => inputStream_TDATA_int,
        vld_out => inputStream_TVALID_int,
        ack_out => inputStream_TREADY_int,
        apdone_blk => regslice_both_inputStream_V_data_V_U_apdone_blk);

    regslice_both_inputStream_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inputStream_TKEEP,
        vld_in => inputStream_TVALID,
        ack_in => regslice_both_inputStream_V_keep_V_U_ack_in,
        data_out => inputStream_TKEEP_int,
        vld_out => regslice_both_inputStream_V_keep_V_U_vld_out,
        ack_out => inputStream_TREADY_int,
        apdone_blk => regslice_both_inputStream_V_keep_V_U_apdone_blk);

    regslice_both_inputStream_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inputStream_TSTRB,
        vld_in => inputStream_TVALID,
        ack_in => regslice_both_inputStream_V_strb_V_U_ack_in,
        data_out => inputStream_TSTRB_int,
        vld_out => regslice_both_inputStream_V_strb_V_U_vld_out,
        ack_out => inputStream_TREADY_int,
        apdone_blk => regslice_both_inputStream_V_strb_V_U_apdone_blk);

    regslice_both_inputStream_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inputStream_TUSER,
        vld_in => inputStream_TVALID,
        ack_in => regslice_both_inputStream_V_user_V_U_ack_in,
        data_out => inputStream_TUSER_int,
        vld_out => regslice_both_inputStream_V_user_V_U_vld_out,
        ack_out => inputStream_TREADY_int,
        apdone_blk => regslice_both_inputStream_V_user_V_U_apdone_blk);

    regslice_both_inputStream_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inputStream_TLAST,
        vld_in => inputStream_TVALID,
        ack_in => regslice_both_inputStream_V_last_V_U_ack_in,
        data_out => inputStream_TLAST_int,
        vld_out => regslice_both_inputStream_V_last_V_U_vld_out,
        ack_out => inputStream_TREADY_int,
        apdone_blk => regslice_both_inputStream_V_last_V_U_apdone_blk);

    regslice_both_inputStream_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inputStream_TID,
        vld_in => inputStream_TVALID,
        ack_in => regslice_both_inputStream_V_id_V_U_ack_in,
        data_out => inputStream_TID_int,
        vld_out => regslice_both_inputStream_V_id_V_U_vld_out,
        ack_out => inputStream_TREADY_int,
        apdone_blk => regslice_both_inputStream_V_id_V_U_apdone_blk);

    regslice_both_inputStream_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => inputStream_TDEST,
        vld_in => inputStream_TVALID,
        ack_in => regslice_both_inputStream_V_dest_V_U_ack_in,
        data_out => inputStream_TDEST_int,
        vld_out => regslice_both_inputStream_V_dest_V_U_vld_out,
        ack_out => inputStream_TREADY_int,
        apdone_blk => regslice_both_inputStream_V_dest_V_U_apdone_blk);

    regslice_both_outputStream_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_method1_fu_54_outputStream_TDATA,
        vld_in => grp_method1_fu_54_outputStream_TVALID,
        ack_in => outputStream_TREADY_int,
        data_out => outputStream_TDATA,
        vld_out => regslice_both_outputStream_V_data_V_U_vld_out,
        ack_out => outputStream_TREADY,
        apdone_blk => regslice_both_outputStream_V_data_V_U_apdone_blk);

    regslice_both_outputStream_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_method1_fu_54_outputStream_TKEEP,
        vld_in => grp_method1_fu_54_outputStream_TVALID,
        ack_in => regslice_both_outputStream_V_keep_V_U_ack_in_dummy,
        data_out => outputStream_TKEEP,
        vld_out => regslice_both_outputStream_V_keep_V_U_vld_out,
        ack_out => outputStream_TREADY,
        apdone_blk => regslice_both_outputStream_V_keep_V_U_apdone_blk);

    regslice_both_outputStream_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_method1_fu_54_outputStream_TSTRB,
        vld_in => grp_method1_fu_54_outputStream_TVALID,
        ack_in => regslice_both_outputStream_V_strb_V_U_ack_in_dummy,
        data_out => outputStream_TSTRB,
        vld_out => regslice_both_outputStream_V_strb_V_U_vld_out,
        ack_out => outputStream_TREADY,
        apdone_blk => regslice_both_outputStream_V_strb_V_U_apdone_blk);

    regslice_both_outputStream_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_method1_fu_54_outputStream_TUSER,
        vld_in => grp_method1_fu_54_outputStream_TVALID,
        ack_in => regslice_both_outputStream_V_user_V_U_ack_in_dummy,
        data_out => outputStream_TUSER,
        vld_out => regslice_both_outputStream_V_user_V_U_vld_out,
        ack_out => outputStream_TREADY,
        apdone_blk => regslice_both_outputStream_V_user_V_U_apdone_blk);

    regslice_both_outputStream_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_method1_fu_54_outputStream_TLAST,
        vld_in => grp_method1_fu_54_outputStream_TVALID,
        ack_in => regslice_both_outputStream_V_last_V_U_ack_in_dummy,
        data_out => outputStream_TLAST,
        vld_out => regslice_both_outputStream_V_last_V_U_vld_out,
        ack_out => outputStream_TREADY,
        apdone_blk => regslice_both_outputStream_V_last_V_U_apdone_blk);

    regslice_both_outputStream_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_method1_fu_54_outputStream_TID,
        vld_in => grp_method1_fu_54_outputStream_TVALID,
        ack_in => regslice_both_outputStream_V_id_V_U_ack_in_dummy,
        data_out => outputStream_TID,
        vld_out => regslice_both_outputStream_V_id_V_U_vld_out,
        ack_out => outputStream_TREADY,
        apdone_blk => regslice_both_outputStream_V_id_V_U_apdone_blk);

    regslice_both_outputStream_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_method1_fu_54_outputStream_TDEST,
        vld_in => grp_method1_fu_54_outputStream_TVALID,
        ack_in => regslice_both_outputStream_V_dest_V_U_ack_in_dummy,
        data_out => outputStream_TDEST,
        vld_out => regslice_both_outputStream_V_dest_V_U_vld_out,
        ack_out => outputStream_TREADY,
        apdone_blk => regslice_both_outputStream_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_method1_fu_54_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_method1_fu_54_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_method1_fu_54_ap_done <= ap_const_logic_0;
                elsif ((grp_method1_fu_54_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_method1_fu_54_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_method1_fu_54_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_method1_fu_54_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_method1_fu_54_ap_ready <= ap_const_logic_0;
                elsif ((grp_method1_fu_54_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_method1_fu_54_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_method1_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_method1_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_method1_fu_54_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_method1_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_method1_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_method1_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state4, regslice_both_outputStream_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_outputStream_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_method1_fu_54_ap_ready, ap_sync_grp_method1_fu_54_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_method1_fu_54_ap_ready and ap_sync_grp_method1_fu_54_ap_done) = ap_const_logic_0);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_method1_fu_54_ap_done <= (grp_method1_fu_54_ap_done or ap_sync_reg_grp_method1_fu_54_ap_done);
    ap_sync_grp_method1_fu_54_ap_ready <= (grp_method1_fu_54_ap_ready or ap_sync_reg_grp_method1_fu_54_ap_ready);

    grp_method1_fu_54_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_method1_fu_54_ap_continue <= ap_const_logic_1;
        else 
            grp_method1_fu_54_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_method1_fu_54_ap_start <= grp_method1_fu_54_ap_start_reg;
    grp_method1_fu_54_outputStream_TREADY <= (outputStream_TREADY_int and ap_CS_fsm_state3);

    inputStream_TREADY_assign_proc : process(inputStream_TVALID, regslice_both_inputStream_V_data_V_U_ack_in)
    begin
        if (((regslice_both_inputStream_V_data_V_U_ack_in = ap_const_logic_1) and (inputStream_TVALID = ap_const_logic_1))) then 
            inputStream_TREADY <= ap_const_logic_1;
        else 
            inputStream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    inputStream_TREADY_int_assign_proc : process(grp_method1_fu_54_inputStream_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputStream_TREADY_int <= grp_method1_fu_54_inputStream_TREADY;
        else 
            inputStream_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    outputStream_TVALID <= regslice_both_outputStream_V_data_V_U_vld_out;
end behav;
