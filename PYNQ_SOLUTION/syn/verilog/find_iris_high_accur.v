// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module find_iris_high_accur (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_data_stream_V_dout,
        img_data_stream_V_empty_n,
        img_data_stream_V_read,
        x_dout,
        x_empty_n,
        x_read,
        y_dout,
        y_empty_n,
        y_read,
        dst_img_data_stream_V_din,
        dst_img_data_stream_V_full_n,
        dst_img_data_stream_V_write,
        x_out_din,
        x_out_full_n,
        x_out_write,
        y_out_din,
        y_out_full_n,
        y_out_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_state34 = 37'd8589934592;
parameter    ap_ST_fsm_state35 = 37'd17179869184;
parameter    ap_ST_fsm_state36 = 37'd34359738368;
parameter    ap_ST_fsm_state37 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] img_data_stream_V_dout;
input   img_data_stream_V_empty_n;
output   img_data_stream_V_read;
input  [31:0] x_dout;
input   x_empty_n;
output   x_read;
input  [31:0] y_dout;
input   y_empty_n;
output   y_read;
output  [7:0] dst_img_data_stream_V_din;
input   dst_img_data_stream_V_full_n;
output   dst_img_data_stream_V_write;
output  [31:0] x_out_din;
input   x_out_full_n;
output   x_out_write;
output  [31:0] y_out_din;
input   y_out_full_n;
output   y_out_write;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_data_stream_V_read;
reg x_read;
reg y_read;
reg dst_img_data_stream_V_write;
reg x_out_write;
reg y_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_data_stream_V_blk_n;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln240_fu_1220_p2;
reg    x_blk_n;
reg    y_blk_n;
reg    dst_img_data_stream_V_blk_n;
reg    x_out_blk_n;
reg    y_out_blk_n;
reg   [31:0] x_read_reg_1371;
reg    ap_block_state1;
reg   [31:0] y_read_reg_1376;
wire   [31:0] grp_fu_508_p1;
reg   [31:0] tmp_i_reg_1381;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_511_p1;
reg   [31:0] tmp_4_i_reg_1386;
wire   [31:0] zext_ln220_fu_514_p1;
wire    ap_CS_fsm_state8;
wire   [6:0] count1_fu_525_p2;
reg   [6:0] count1_reg_1399;
reg   [31:0] tmp_i_48_reg_1404;
wire    ap_CS_fsm_state13;
wire   [11:0] sub_ln227_fu_555_p2;
reg   [11:0] sub_ln227_reg_1410;
wire   [3:0] count2_fu_567_p2;
reg   [3:0] count2_reg_1418;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln15_fu_573_p2;
reg   [0:0] icmp_ln15_reg_1423;
wire   [0:0] icmp_ln222_fu_561_p2;
wire   [0:0] icmp_ln19_fu_597_p2;
reg   [0:0] icmp_ln19_reg_1428;
wire   [0:0] or_ln18_fu_615_p2;
reg   [0:0] or_ln18_reg_1434;
wire   [0:0] icmp_ln20_fu_621_p2;
reg   [0:0] icmp_ln20_reg_1440;
wire   [0:0] icmp_ln20_1_fu_627_p2;
reg   [0:0] icmp_ln20_1_reg_1445;
wire   [0:0] and_ln16_fu_639_p2;
reg   [0:0] and_ln16_reg_1450;
wire   [0:0] and_ln18_fu_663_p2;
reg   [0:0] and_ln18_reg_1457;
wire   [0:0] or_ln18_1_fu_669_p2;
reg   [0:0] or_ln18_1_reg_1463;
wire   [0:0] icmp_ln20_2_fu_675_p2;
reg   [0:0] icmp_ln20_2_reg_1469;
wire   [0:0] icmp_ln20_3_fu_681_p2;
reg   [0:0] icmp_ln20_3_reg_1475;
wire   [11:0] add_ln227_fu_697_p2;
reg   [11:0] add_ln227_reg_1481;
wire   [8:0] alpha_fu_702_p2;
reg   [8:0] alpha_reg_1486;
wire   [7:0] r_fu_708_p2;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_500_p2;
reg   [31:0] tmp_2_i_reg_1506;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_504_p2;
reg   [31:0] tmp_5_i_reg_1511;
wire   [31:0] grp_fu_492_p2;
reg   [31:0] x_assign_reg_1516;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_496_p2;
reg   [31:0] x_assign_1_reg_1521;
reg   [0:0] p_Result_s_reg_1526;
wire    ap_CS_fsm_state24;
wire   [31:0] p_Val2_10_fu_1003_p3;
reg   [31:0] p_Val2_10_reg_1531;
reg   [0:0] p_Result_1_reg_1537;
wire   [31:0] p_Val2_12_fu_1132_p3;
reg   [31:0] p_Val2_12_reg_1542;
wire   [5:0] i_fu_1189_p2;
wire    ap_CS_fsm_state26;
wire   [31:0] zext_ln239_fu_1200_p1;
reg   [31:0] zext_ln239_reg_1556;
wire    ap_CS_fsm_state27;
wire   [8:0] y_1_fu_1210_p2;
reg   [8:0] y_1_reg_1564;
wire   [31:0] zext_ln240_fu_1216_p1;
reg   [31:0] zext_ln240_reg_1569;
reg    ap_block_state28;
wire   [8:0] x_1_fu_1226_p2;
reg   [8:0] x_1_reg_1577;
wire   [31:0] zext_ln248_fu_1232_p1;
reg   [31:0] zext_ln248_reg_1582;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln245_fu_1236_p2;
wire   [0:0] icmp_ln246_fu_1247_p2;
reg   [0:0] icmp_ln246_reg_1595;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln246_1_fu_1263_p2;
reg   [0:0] icmp_ln246_1_reg_1604;
wire    ap_CS_fsm_state31;
reg   [5:0] sums_addr_3_reg_1608;
wire   [31:0] add_ln248_fu_1290_p2;
reg   [31:0] add_ln248_reg_1613;
wire    ap_CS_fsm_state33;
wire   [8:0] p_fu_1295_p2;
wire    ap_CS_fsm_state34;
wire   [31:0] zext_ln261_fu_1301_p1;
reg   [31:0] zext_ln261_reg_1623;
wire    ap_CS_fsm_state35;
wire   [5:0] r_1_fu_1311_p2;
reg   [5:0] r_1_reg_1631;
wire   [0:0] icmp_ln255_fu_1305_p2;
wire   [31:0] i_max_fu_1339_p2;
reg   [31:0] i_max_reg_1646;
wire    ap_CS_fsm_state36;
wire   [31:0] select_ln259_fu_1350_p3;
wire    ap_CS_fsm_state37;
wire   [31:0] select_ln259_1_fu_1357_p3;
reg   [9:0] points_address0;
reg    points_ce0;
reg    points_we0;
wire   [31:0] points_d0;
wire   [31:0] points_q0;
reg   [9:0] points_address1;
reg    points_ce1;
reg    points_we1;
wire   [31:0] points_d1;
wire   [31:0] points_q1;
reg   [5:0] sums_address0;
reg    sums_ce0;
reg    sums_we0;
reg   [31:0] sums_d0;
wire   [31:0] sums_q0;
wire   [5:0] sums_address1;
reg    sums_ce1;
wire   [31:0] sums_q1;
reg   [7:0] r_0_i_reg_366;
reg   [6:0] count1_0_i_reg_378;
reg   [8:0] val_assign_reg_390;
wire    ap_CS_fsm_state25;
reg   [3:0] count2_0_i_reg_401;
reg   [5:0] i_0_i_reg_412;
wire   [0:0] icmp_ln236_fu_1183_p2;
wire   [0:0] icmp_ln220_fu_519_p2;
reg   [8:0] y1_0_i_reg_423;
reg   [8:0] x2_0_i_reg_434;
wire   [0:0] icmp_ln239_fu_1204_p2;
reg   [8:0] p_0_i_reg_445;
reg   [31:0] iris_radius_0_i_reg_457;
reg   [31:0] i_max_0_i_reg_469;
reg   [5:0] iris_radius_reg_481;
wire   [63:0] zext_ln227_3_fu_1167_p1;
wire   [63:0] zext_ln228_fu_1178_p1;
wire   [63:0] zext_ln236_fu_1195_p1;
wire   [63:0] zext_ln246_fu_1242_p1;
wire   [63:0] zext_ln246_1_fu_1258_p1;
wire   [63:0] zext_ln248_1_fu_1285_p1;
wire   [63:0] zext_ln256_fu_1317_p1;
wire   [63:0] zext_ln257_fu_1328_p1;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_500_p1;
wire   [31:0] grp_fu_504_p1;
reg   [31:0] grp_fu_508_p0;
wire    ap_CS_fsm_state2;
wire   [10:0] shl_ln_fu_531_p3;
wire   [8:0] shl_ln227_1_fu_543_p3;
wire   [11:0] zext_ln227_fu_539_p1;
wire   [11:0] zext_ln227_1_fu_551_p1;
wire   [0:0] icmp_ln16_fu_579_p2;
wire   [0:0] or_ln16_fu_603_p2;
wire   [0:0] icmp_ln17_fu_585_p2;
wire   [0:0] or_ln17_fu_609_p2;
wire   [0:0] icmp_ln18_fu_591_p2;
wire   [0:0] xor_ln15_fu_633_p2;
wire   [0:0] xor_ln16_fu_645_p2;
wire   [0:0] xor_ln17_fu_657_p2;
wire   [0:0] and_ln17_fu_651_p2;
wire   [3:0] shl_ln227_fu_687_p2;
wire   [11:0] zext_ln227_2_fu_693_p1;
wire   [0:0] or_ln19_fu_714_p2;
wire   [0:0] xor_ln19_fu_718_p2;
wire   [0:0] and_ln20_fu_724_p2;
wire   [0:0] and_ln20_1_fu_729_p2;
wire   [0:0] or_ln16_1_fu_749_p2;
wire   [31:0] select_ln16_fu_742_p3;
wire   [31:0] select_ln20_fu_734_p3;
wire   [31:0] select_ln18_fu_761_p3;
wire   [31:0] select_ln16_1_fu_753_p3;
wire   [0:0] xor_ln18_fu_775_p2;
wire   [0:0] or_ln20_fu_785_p2;
wire   [0:0] sel_tmp53_fu_789_p2;
wire   [0:0] and_ln19_fu_780_p2;
wire   [0:0] empty_fu_803_p2;
wire   [31:0] sel_tmp40_fu_795_p3;
wire   [31:0] select_ln18_1_fu_768_p3;
wire   [31:0] select_ln5_fu_825_p3;
wire   [31:0] select_ln10_fu_818_p3;
wire   [31:0] select_ln7_fu_840_p3;
wire   [31:0] select_ln5_1_fu_832_p3;
wire   [0:0] and_ln9_fu_854_p2;
wire   [0:0] or_ln9_fu_867_p2;
wire   [31:0] select_ln9_fu_859_p3;
wire   [31:0] select_ln7_1_fu_847_p3;
wire   [31:0] p_Val2_s_fu_882_p1;
wire   [22:0] tmp_V_1_fu_903_p1;
wire   [24:0] mantissa_V_fu_907_p4;
wire   [7:0] tmp_V_fu_893_p4;
wire   [8:0] zext_ln339_fu_921_p1;
wire   [8:0] add_ln339_fu_925_p2;
wire   [7:0] sub_ln1311_fu_939_p2;
wire   [0:0] isNeg_fu_931_p3;
wire  signed [8:0] sext_ln1311_fu_945_p1;
wire  signed [8:0] ush_fu_949_p3;
wire  signed [31:0] sext_ln1311_1_fu_957_p1;
wire  signed [24:0] sext_ln1311_4_fu_961_p1;
wire   [78:0] zext_ln682_fu_917_p1;
wire   [78:0] zext_ln1287_fu_965_p1;
wire   [24:0] r_V_fu_969_p2;
wire   [0:0] tmp_fu_981_p3;
wire   [78:0] r_V_1_fu_975_p2;
wire   [31:0] zext_ln662_fu_989_p1;
wire   [31:0] tmp_2_fu_993_p4;
wire   [31:0] p_Val2_5_fu_1011_p1;
wire   [22:0] tmp_V_3_fu_1032_p1;
wire   [24:0] mantissa_V_1_fu_1036_p4;
wire   [7:0] tmp_V_2_fu_1022_p4;
wire   [8:0] zext_ln339_1_fu_1050_p1;
wire   [8:0] add_ln339_1_fu_1054_p2;
wire   [7:0] sub_ln1311_1_fu_1068_p2;
wire   [0:0] isNeg_1_fu_1060_p3;
wire  signed [8:0] sext_ln1311_2_fu_1074_p1;
wire  signed [8:0] ush_1_fu_1078_p3;
wire  signed [31:0] sext_ln1311_3_fu_1086_p1;
wire  signed [24:0] sext_ln1311_5_fu_1090_p1;
wire   [78:0] zext_ln682_1_fu_1046_p1;
wire   [78:0] zext_ln1287_1_fu_1094_p1;
wire   [24:0] r_V_2_fu_1098_p2;
wire   [0:0] tmp_5_fu_1110_p3;
wire   [78:0] r_V_3_fu_1104_p2;
wire   [31:0] zext_ln662_1_fu_1118_p1;
wire   [31:0] tmp_4_fu_1122_p4;
wire   [31:0] result_V_1_fu_1140_p2;
wire   [31:0] result_V_3_fu_1152_p2;
wire  signed [31:0] sext_ln227_fu_1164_p1;
wire   [31:0] or_ln228_fu_1172_p2;
wire   [8:0] or_ln246_fu_1252_p2;
wire   [19:0] mul_ln247_fu_1364_p2;
wire   [6:0] tmp_7_fu_1272_p4;
wire  signed [8:0] sext_ln247_fu_1281_p1;
wire   [5:0] add_ln257_fu_1322_p2;
wire   [0:0] icmp_ln259_fu_1345_p2;
wire   [8:0] mul_ln247_fu_1364_p0;
wire   [10:0] mul_ln247_fu_1364_p1;
reg   [36:0] ap_NS_fsm;
wire   [19:0] mul_ln247_fu_1364_p00;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 37'd1;
end

find_iris_high_aceOg #(
    .DataWidth( 32 ),
    .AddressRange( 804 ),
    .AddressWidth( 10 ))
points_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(points_address0),
    .ce0(points_ce0),
    .we0(points_we0),
    .d0(points_d0),
    .q0(points_q0),
    .address1(points_address1),
    .ce1(points_ce1),
    .we1(points_we1),
    .d1(points_d1),
    .q1(points_q1)
);

find_iris_high_acfYi #(
    .DataWidth( 32 ),
    .AddressRange( 37 ),
    .AddressWidth( 6 ))
sums_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sums_address0),
    .ce0(sums_ce0),
    .we0(sums_we0),
    .d0(sums_d0),
    .q0(sums_q0),
    .address1(sums_address1),
    .ce1(sums_ce1),
    .q1(sums_q1)
);

top_level_fadd_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fadd_32g8j_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_1381),
    .din1(tmp_2_i_reg_1506),
    .ce(1'b1),
    .dout(grp_fu_492_p2)
);

top_level_fadd_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fadd_32g8j_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_i_reg_1386),
    .din1(tmp_5_i_reg_1511),
    .ce(1'b1),
    .dout(grp_fu_496_p2)
);

top_level_fmul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32hbi_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_48_reg_1404),
    .din1(grp_fu_500_p1),
    .ce(1'b1),
    .dout(grp_fu_500_p2)
);

top_level_fmul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_fmul_32hbi_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_48_reg_1404),
    .din1(grp_fu_504_p1),
    .ce(1'b1),
    .dout(grp_fu_504_p2)
);

top_level_sitofp_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_sitofp_ibs_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_508_p0),
    .ce(1'b1),
    .dout(grp_fu_508_p1)
);

top_level_sitofp_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_level_sitofp_ibs_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_read_reg_1376),
    .ce(1'b1),
    .dout(grp_fu_511_p1)
);

top_level_mul_muljbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 20 ))
top_level_mul_muljbC_U42(
    .din0(mul_ln247_fu_1364_p0),
    .din1(mul_ln247_fu_1364_p1),
    .dout(mul_ln247_fu_1364_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln255_fu_1305_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln222_fu_561_p2 == 1'd1))) begin
        count1_0_i_reg_378 <= count1_reg_1399;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        count1_0_i_reg_378 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        count2_0_i_reg_401 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        count2_0_i_reg_401 <= count2_reg_1418;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln220_fu_519_p2 == 1'd1))) begin
        i_0_i_reg_412 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln236_fu_1183_p2 == 1'd0))) begin
        i_0_i_reg_412 <= i_fu_1189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln239_fu_1204_p2 == 1'd1))) begin
        i_max_0_i_reg_469 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        i_max_0_i_reg_469 <= select_ln259_1_fu_1357_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln239_fu_1204_p2 == 1'd1))) begin
        iris_radius_0_i_reg_457 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        iris_radius_0_i_reg_457 <= select_ln259_fu_1350_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln239_fu_1204_p2 == 1'd1))) begin
        iris_radius_reg_481 <= 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        iris_radius_reg_481 <= r_1_reg_1631;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        p_0_i_reg_445 <= p_fu_1295_p2;
    end else if ((~(((dst_img_data_stream_V_full_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)) | ((img_data_stream_V_empty_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln240_fu_1220_p2 == 1'd0))) begin
        p_0_i_reg_445 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln222_fu_561_p2 == 1'd1))) begin
        r_0_i_reg_366 <= r_fu_708_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_0_i_reg_366 <= 8'd84;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        val_assign_reg_390 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        val_assign_reg_390 <= alpha_reg_1486;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (icmp_ln245_fu_1236_p2 == 1'd0))) begin
        x2_0_i_reg_434 <= x_1_reg_1577;
    end else if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln239_fu_1204_p2 == 1'd0))) begin
        x2_0_i_reg_434 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln236_fu_1183_p2 == 1'd1))) begin
        y1_0_i_reg_423 <= 9'd0;
    end else if ((~(((dst_img_data_stream_V_full_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)) | ((img_data_stream_V_empty_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln240_fu_1220_p2 == 1'd1))) begin
        y1_0_i_reg_423 <= y_1_reg_1564;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln222_fu_561_p2 == 1'd0))) begin
        add_ln227_reg_1481[11 : 1] <= add_ln227_fu_697_p2[11 : 1];
        alpha_reg_1486 <= alpha_fu_702_p2;
        and_ln16_reg_1450 <= and_ln16_fu_639_p2;
        and_ln18_reg_1457 <= and_ln18_fu_663_p2;
        icmp_ln15_reg_1423 <= icmp_ln15_fu_573_p2;
        icmp_ln19_reg_1428 <= icmp_ln19_fu_597_p2;
        icmp_ln20_1_reg_1445 <= icmp_ln20_1_fu_627_p2;
        icmp_ln20_2_reg_1469 <= icmp_ln20_2_fu_675_p2;
        icmp_ln20_3_reg_1475 <= icmp_ln20_3_fu_681_p2;
        icmp_ln20_reg_1440 <= icmp_ln20_fu_621_p2;
        or_ln18_1_reg_1463 <= or_ln18_1_fu_669_p2;
        or_ln18_reg_1434 <= or_ln18_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        add_ln248_reg_1613 <= add_ln248_fu_1290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        count1_reg_1399 <= count1_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        count2_reg_1418 <= count2_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        i_max_reg_1646 <= i_max_fu_1339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        icmp_ln246_1_reg_1604 <= icmp_ln246_1_fu_1263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        icmp_ln246_reg_1595 <= icmp_ln246_fu_1247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        p_Result_1_reg_1537 <= p_Val2_5_fu_1011_p1[32'd31];
        p_Result_s_reg_1526 <= p_Val2_s_fu_882_p1[32'd31];
        p_Val2_10_reg_1531 <= p_Val2_10_fu_1003_p3;
        p_Val2_12_reg_1542 <= p_Val2_12_fu_1132_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln255_fu_1305_p2 == 1'd0))) begin
        r_1_reg_1631 <= r_1_fu_1311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sub_ln227_reg_1410[11 : 2] <= sub_ln227_fu_555_p2[11 : 2];
        tmp_i_48_reg_1404 <= grp_fu_508_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln246_1_fu_1263_p2 == 1'd1))) begin
        sums_addr_3_reg_1608 <= zext_ln248_1_fu_1285_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_2_i_reg_1506 <= grp_fu_500_p2;
        tmp_5_i_reg_1511 <= grp_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_4_i_reg_1386 <= grp_fu_511_p1;
        tmp_i_reg_1381 <= grp_fu_508_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((dst_img_data_stream_V_full_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)) | ((img_data_stream_V_empty_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state28))) begin
        x_1_reg_1577 <= x_1_fu_1226_p2;
        zext_ln240_reg_1569[8 : 0] <= zext_ln240_fu_1216_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        x_assign_1_reg_1521 <= grp_fu_496_p2;
        x_assign_reg_1516 <= grp_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (y_empty_n == 1'b0) | (x_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_read_reg_1371 <= x_dout;
        y_read_reg_1376 <= y_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        y_1_reg_1564 <= y_1_fu_1210_p2;
        zext_ln239_reg_1556[8 : 0] <= zext_ln239_fu_1200_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~(((dst_img_data_stream_V_full_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)) | ((img_data_stream_V_empty_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln240_fu_1220_p2 == 1'd0))) begin
        zext_ln248_reg_1582[7 : 0] <= zext_ln248_fu_1232_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        zext_ln261_reg_1623[5 : 0] <= zext_ln261_fu_1301_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln255_fu_1305_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln240_fu_1220_p2 == 1'd0))) begin
        dst_img_data_stream_V_blk_n = dst_img_data_stream_V_full_n;
    end else begin
        dst_img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((dst_img_data_stream_V_full_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)) | ((img_data_stream_V_empty_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln240_fu_1220_p2 == 1'd0))) begin
        dst_img_data_stream_V_write = 1'b1;
    end else begin
        dst_img_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_508_p0 = zext_ln220_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_508_p0 = x_read_reg_1371;
    end else begin
        grp_fu_508_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln240_fu_1220_p2 == 1'd0))) begin
        img_data_stream_V_blk_n = img_data_stream_V_empty_n;
    end else begin
        img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((dst_img_data_stream_V_full_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)) | ((img_data_stream_V_empty_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln240_fu_1220_p2 == 1'd0))) begin
        img_data_stream_V_read = 1'b1;
    end else begin
        img_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln255_fu_1305_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        points_address0 = zext_ln246_fu_1242_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        points_address0 = zext_ln227_3_fu_1167_p1;
    end else begin
        points_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        points_address1 = zext_ln246_1_fu_1258_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        points_address1 = zext_ln228_fu_1178_p1;
    end else begin
        points_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state29))) begin
        points_ce0 = 1'b1;
    end else begin
        points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state30))) begin
        points_ce1 = 1'b1;
    end else begin
        points_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        points_we0 = 1'b1;
    end else begin
        points_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        points_we1 = 1'b1;
    end else begin
        points_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        sums_address0 = zext_ln256_fu_1317_p1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state34))) begin
        sums_address0 = sums_addr_3_reg_1608;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sums_address0 = zext_ln236_fu_1195_p1;
    end else begin
        sums_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26))) begin
        sums_ce0 = 1'b1;
    end else begin
        sums_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        sums_ce1 = 1'b1;
    end else begin
        sums_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        sums_d0 = add_ln248_reg_1613;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        sums_d0 = 32'd0;
    end else begin
        sums_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state34) & (icmp_ln246_1_reg_1604 == 1'd1) & (icmp_ln246_reg_1595 == 1'd1)) | ((1'b1 == ap_CS_fsm_state26) & (icmp_ln236_fu_1183_p2 == 1'd0)))) begin
        sums_we0 = 1'b1;
    end else begin
        sums_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_blk_n = x_empty_n;
    end else begin
        x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_out_blk_n = x_out_full_n;
    end else begin
        x_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (y_empty_n == 1'b0) | (x_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_out_write = 1'b1;
    end else begin
        x_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (y_empty_n == 1'b0) | (x_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_read = 1'b1;
    end else begin
        x_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_blk_n = y_empty_n;
    end else begin
        y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_out_blk_n = y_out_full_n;
    end else begin
        y_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (y_empty_n == 1'b0) | (x_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_out_write = 1'b1;
    end else begin
        y_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (y_empty_n == 1'b0) | (x_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_read = 1'b1;
    end else begin
        y_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (y_empty_n == 1'b0) | (x_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln220_fu_519_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln222_fu_561_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln236_fu_1183_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln239_fu_1204_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~(((dst_img_data_stream_V_full_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)) | ((img_data_stream_V_empty_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln240_fu_1220_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if ((~(((dst_img_data_stream_V_full_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)) | ((img_data_stream_V_empty_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln240_fu_1220_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (icmp_ln245_fu_1236_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln246_fu_1247_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln246_1_fu_1263_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln255_fu_1305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln227_fu_697_p2 = (zext_ln227_2_fu_693_p1 + sub_ln227_reg_1410);

assign add_ln248_fu_1290_p2 = (sums_q0 + zext_ln248_reg_1582);

assign add_ln257_fu_1322_p2 = ($signed(iris_radius_reg_481) + $signed(6'd63));

assign add_ln339_1_fu_1054_p2 = ($signed(9'd385) + $signed(zext_ln339_1_fu_1050_p1));

assign add_ln339_fu_925_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_921_p1));

assign alpha_fu_702_p2 = (9'd45 + val_assign_reg_390);

assign and_ln16_fu_639_p2 = (xor_ln15_fu_633_p2 & icmp_ln16_fu_579_p2);

assign and_ln17_fu_651_p2 = (xor_ln16_fu_645_p2 & icmp_ln17_fu_585_p2);

assign and_ln18_fu_663_p2 = (xor_ln17_fu_657_p2 & icmp_ln18_fu_591_p2);

assign and_ln19_fu_780_p2 = (xor_ln18_fu_775_p2 & icmp_ln19_reg_1428);

assign and_ln20_1_fu_729_p2 = (icmp_ln20_reg_1440 & and_ln20_fu_724_p2);

assign and_ln20_fu_724_p2 = (xor_ln19_fu_718_p2 & icmp_ln20_1_reg_1445);

assign and_ln9_fu_854_p2 = (xor_ln19_fu_718_p2 & icmp_ln20_3_reg_1475);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (y_out_full_n == 1'b0) | (x_out_full_n == 1'b0) | (y_empty_n == 1'b0) | (x_empty_n == 1'b0) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state28 = (((dst_img_data_stream_V_full_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)) | ((img_data_stream_V_empty_n == 1'b0) & (icmp_ln240_fu_1220_p2 == 1'd0)));
end

assign ap_ready = internal_ap_ready;

assign ap_return = (iris_radius_0_i_reg_457 + 32'd85);

assign count1_fu_525_p2 = (count1_0_i_reg_378 + 7'd1);

assign count2_fu_567_p2 = (count2_0_i_reg_401 + 4'd1);

assign dst_img_data_stream_V_din = img_data_stream_V_dout;

assign empty_fu_803_p2 = (sel_tmp53_fu_789_p2 | and_ln19_fu_780_p2);

assign grp_fu_500_p1 = ((or_ln9_fu_867_p2[0:0] === 1'b1) ? select_ln9_fu_859_p3 : select_ln7_1_fu_847_p3);

assign grp_fu_504_p1 = ((empty_fu_803_p2[0:0] === 1'b1) ? sel_tmp40_fu_795_p3 : select_ln18_1_fu_768_p3);

assign i_fu_1189_p2 = (i_0_i_reg_412 + 6'd1);

assign i_max_fu_1339_p2 = (sums_q0 - sums_q1);

assign icmp_ln15_fu_573_p2 = ((val_assign_reg_390 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_579_p2 = ((val_assign_reg_390 == 9'd45) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_585_p2 = ((val_assign_reg_390 == 9'd90) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_591_p2 = ((val_assign_reg_390 == 9'd135) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_597_p2 = ((val_assign_reg_390 == 9'd180) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_627_p2 = ((val_assign_reg_390 != 9'd225) ? 1'b1 : 1'b0);

assign icmp_ln20_2_fu_675_p2 = ((val_assign_reg_390 == 9'd315) ? 1'b1 : 1'b0);

assign icmp_ln20_3_fu_681_p2 = ((val_assign_reg_390 == 9'd225) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_621_p2 = ((val_assign_reg_390 != 9'd315) ? 1'b1 : 1'b0);

assign icmp_ln220_fu_519_p2 = ((r_0_i_reg_366 == 8'd151) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_561_p2 = ((count2_0_i_reg_401 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln236_fu_1183_p2 = ((i_0_i_reg_412 == 6'd37) ? 1'b1 : 1'b0);

assign icmp_ln239_fu_1204_p2 = ((y1_0_i_reg_423 == 9'd280) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_1220_p2 = ((x2_0_i_reg_434 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln245_fu_1236_p2 = ((p_0_i_reg_445 < 9'd444) ? 1'b1 : 1'b0);

assign icmp_ln246_1_fu_1263_p2 = ((points_q1 == zext_ln239_reg_1556) ? 1'b1 : 1'b0);

assign icmp_ln246_fu_1247_p2 = ((points_q0 == zext_ln240_reg_1569) ? 1'b1 : 1'b0);

assign icmp_ln255_fu_1305_p2 = ((iris_radius_reg_481 == 6'd37) ? 1'b1 : 1'b0);

assign icmp_ln259_fu_1345_p2 = (($signed(i_max_reg_1646) > $signed(i_max_0_i_reg_469)) ? 1'b1 : 1'b0);

assign isNeg_1_fu_1060_p3 = add_ln339_1_fu_1054_p2[32'd8];

assign isNeg_fu_931_p3 = add_ln339_fu_925_p2[32'd8];

assign mantissa_V_1_fu_1036_p4 = {{{{1'd1}, {tmp_V_3_fu_1032_p1}}}, {1'd0}};

assign mantissa_V_fu_907_p4 = {{{{1'd1}, {tmp_V_1_fu_903_p1}}}, {1'd0}};

assign mul_ln247_fu_1364_p0 = mul_ln247_fu_1364_p00;

assign mul_ln247_fu_1364_p00 = p_0_i_reg_445;

assign mul_ln247_fu_1364_p1 = 20'd683;

assign or_ln16_1_fu_749_p2 = (icmp_ln15_reg_1423 | and_ln16_reg_1450);

assign or_ln16_fu_603_p2 = (icmp_ln16_fu_579_p2 | icmp_ln15_fu_573_p2);

assign or_ln17_fu_609_p2 = (or_ln16_fu_603_p2 | icmp_ln17_fu_585_p2);

assign or_ln18_1_fu_669_p2 = (and_ln18_fu_663_p2 | and_ln17_fu_651_p2);

assign or_ln18_fu_615_p2 = (or_ln17_fu_609_p2 | icmp_ln18_fu_591_p2);

assign or_ln19_fu_714_p2 = (or_ln18_reg_1434 | icmp_ln19_reg_1428);

assign or_ln20_fu_785_p2 = (icmp_ln20_3_reg_1475 | icmp_ln20_2_reg_1469);

assign or_ln228_fu_1172_p2 = (sext_ln227_fu_1164_p1 | 32'd1);

assign or_ln246_fu_1252_p2 = (p_0_i_reg_445 | 9'd1);

assign or_ln9_fu_867_p2 = (and_ln9_fu_854_p2 | and_ln19_fu_780_p2);

assign p_Val2_10_fu_1003_p3 = ((isNeg_fu_931_p3[0:0] === 1'b1) ? zext_ln662_fu_989_p1 : tmp_2_fu_993_p4);

assign p_Val2_12_fu_1132_p3 = ((isNeg_1_fu_1060_p3[0:0] === 1'b1) ? zext_ln662_1_fu_1118_p1 : tmp_4_fu_1122_p4);

assign p_Val2_5_fu_1011_p1 = x_assign_1_reg_1521;

assign p_Val2_s_fu_882_p1 = x_assign_reg_1516;

assign p_fu_1295_p2 = (p_0_i_reg_445 + 9'd2);

assign points_d0 = ((p_Result_s_reg_1526[0:0] === 1'b1) ? result_V_1_fu_1140_p2 : p_Val2_10_reg_1531);

assign points_d1 = ((p_Result_1_reg_1537[0:0] === 1'b1) ? result_V_3_fu_1152_p2 : p_Val2_12_reg_1542);

assign r_1_fu_1311_p2 = (iris_radius_reg_481 + 6'd1);

assign r_V_1_fu_975_p2 = zext_ln682_fu_917_p1 << zext_ln1287_fu_965_p1;

assign r_V_2_fu_1098_p2 = mantissa_V_1_fu_1036_p4 >> sext_ln1311_5_fu_1090_p1;

assign r_V_3_fu_1104_p2 = zext_ln682_1_fu_1046_p1 << zext_ln1287_1_fu_1094_p1;

assign r_V_fu_969_p2 = mantissa_V_fu_907_p4 >> sext_ln1311_4_fu_961_p1;

assign r_fu_708_p2 = (r_0_i_reg_366 + 8'd1);

assign result_V_1_fu_1140_p2 = (32'd0 - p_Val2_10_reg_1531);

assign result_V_3_fu_1152_p2 = (32'd0 - p_Val2_12_reg_1542);

assign sel_tmp40_fu_795_p3 = ((sel_tmp53_fu_789_p2[0:0] === 1'b1) ? 32'd3207921140 : 32'd0);

assign sel_tmp53_fu_789_p2 = (xor_ln19_fu_718_p2 & or_ln20_fu_785_p2);

assign select_ln10_fu_818_p3 = ((icmp_ln20_2_reg_1469[0:0] === 1'b1) ? 32'd1060437492 : 32'd1109917696);

assign select_ln16_1_fu_753_p3 = ((or_ln16_1_fu_749_p2[0:0] === 1'b1) ? select_ln16_fu_742_p3 : select_ln20_fu_734_p3);

assign select_ln16_fu_742_p3 = ((and_ln16_reg_1450[0:0] === 1'b1) ? 32'd1060437492 : 32'd0);

assign select_ln18_1_fu_768_p3 = ((or_ln18_1_reg_1463[0:0] === 1'b1) ? select_ln18_fu_761_p3 : select_ln16_1_fu_753_p3);

assign select_ln18_fu_761_p3 = ((and_ln18_reg_1457[0:0] === 1'b1) ? 32'd1060437492 : 32'd1065353216);

assign select_ln20_fu_734_p3 = ((and_ln20_1_fu_729_p2[0:0] === 1'b1) ? 32'd1109917696 : 32'd3207921140);

assign select_ln259_1_fu_1357_p3 = ((icmp_ln259_fu_1345_p2[0:0] === 1'b1) ? i_max_reg_1646 : i_max_0_i_reg_469);

assign select_ln259_fu_1350_p3 = ((icmp_ln259_fu_1345_p2[0:0] === 1'b1) ? zext_ln261_reg_1623 : iris_radius_0_i_reg_457);

assign select_ln5_1_fu_832_p3 = ((or_ln16_1_fu_749_p2[0:0] === 1'b1) ? select_ln5_fu_825_p3 : select_ln10_fu_818_p3);

assign select_ln5_fu_825_p3 = ((and_ln16_reg_1450[0:0] === 1'b1) ? 32'd1060437492 : 32'd1065353216);

assign select_ln7_1_fu_847_p3 = ((or_ln18_1_reg_1463[0:0] === 1'b1) ? select_ln7_fu_840_p3 : select_ln5_1_fu_832_p3);

assign select_ln7_fu_840_p3 = ((and_ln18_reg_1457[0:0] === 1'b1) ? 32'd3207921140 : 32'd0);

assign select_ln9_fu_859_p3 = ((and_ln9_fu_854_p2[0:0] === 1'b1) ? 32'd3207921140 : 32'd3212836864);

assign sext_ln1311_1_fu_957_p1 = ush_fu_949_p3;

assign sext_ln1311_2_fu_1074_p1 = $signed(sub_ln1311_1_fu_1068_p2);

assign sext_ln1311_3_fu_1086_p1 = ush_1_fu_1078_p3;

assign sext_ln1311_4_fu_961_p1 = ush_fu_949_p3;

assign sext_ln1311_5_fu_1090_p1 = ush_1_fu_1078_p3;

assign sext_ln1311_fu_945_p1 = $signed(sub_ln1311_fu_939_p2);

assign sext_ln227_fu_1164_p1 = $signed(add_ln227_reg_1481);

assign sext_ln247_fu_1281_p1 = $signed(tmp_7_fu_1272_p4);

assign shl_ln227_1_fu_543_p3 = {{count1_0_i_reg_378}, {2'd0}};

assign shl_ln227_fu_687_p2 = count2_0_i_reg_401 << 4'd1;

assign shl_ln_fu_531_p3 = {{count1_0_i_reg_378}, {4'd0}};

assign start_out = real_start;

assign sub_ln1311_1_fu_1068_p2 = (8'd127 - tmp_V_2_fu_1022_p4);

assign sub_ln1311_fu_939_p2 = (8'd127 - tmp_V_fu_893_p4);

assign sub_ln227_fu_555_p2 = (zext_ln227_fu_539_p1 - zext_ln227_1_fu_551_p1);

assign sums_address1 = zext_ln257_fu_1328_p1;

assign tmp_2_fu_993_p4 = {{r_V_1_fu_975_p2[55:24]}};

assign tmp_4_fu_1122_p4 = {{r_V_3_fu_1104_p2[55:24]}};

assign tmp_5_fu_1110_p3 = r_V_2_fu_1098_p2[32'd24];

assign tmp_7_fu_1272_p4 = {{mul_ln247_fu_1364_p2[19:13]}};

assign tmp_V_1_fu_903_p1 = p_Val2_s_fu_882_p1[22:0];

assign tmp_V_2_fu_1022_p4 = {{p_Val2_5_fu_1011_p1[30:23]}};

assign tmp_V_3_fu_1032_p1 = p_Val2_5_fu_1011_p1[22:0];

assign tmp_V_fu_893_p4 = {{p_Val2_s_fu_882_p1[30:23]}};

assign tmp_fu_981_p3 = r_V_fu_969_p2[32'd24];

assign ush_1_fu_1078_p3 = ((isNeg_1_fu_1060_p3[0:0] === 1'b1) ? sext_ln1311_2_fu_1074_p1 : add_ln339_1_fu_1054_p2);

assign ush_fu_949_p3 = ((isNeg_fu_931_p3[0:0] === 1'b1) ? sext_ln1311_fu_945_p1 : add_ln339_fu_925_p2);

assign x_1_fu_1226_p2 = (x2_0_i_reg_434 + 9'd1);

assign x_out_din = x_dout;

assign xor_ln15_fu_633_p2 = (icmp_ln15_fu_573_p2 ^ 1'd1);

assign xor_ln16_fu_645_p2 = (or_ln16_fu_603_p2 ^ 1'd1);

assign xor_ln17_fu_657_p2 = (or_ln17_fu_609_p2 ^ 1'd1);

assign xor_ln18_fu_775_p2 = (or_ln18_reg_1434 ^ 1'd1);

assign xor_ln19_fu_718_p2 = (or_ln19_fu_714_p2 ^ 1'd1);

assign y_1_fu_1210_p2 = (y1_0_i_reg_423 + 9'd1);

assign y_out_din = y_dout;

assign zext_ln1287_1_fu_1094_p1 = $unsigned(sext_ln1311_3_fu_1086_p1);

assign zext_ln1287_fu_965_p1 = $unsigned(sext_ln1311_1_fu_957_p1);

assign zext_ln220_fu_514_p1 = r_0_i_reg_366;

assign zext_ln227_1_fu_551_p1 = shl_ln227_1_fu_543_p3;

assign zext_ln227_2_fu_693_p1 = shl_ln227_fu_687_p2;

assign zext_ln227_3_fu_1167_p1 = $unsigned(sext_ln227_fu_1164_p1);

assign zext_ln227_fu_539_p1 = shl_ln_fu_531_p3;

assign zext_ln228_fu_1178_p1 = or_ln228_fu_1172_p2;

assign zext_ln236_fu_1195_p1 = i_0_i_reg_412;

assign zext_ln239_fu_1200_p1 = y1_0_i_reg_423;

assign zext_ln240_fu_1216_p1 = x2_0_i_reg_434;

assign zext_ln246_1_fu_1258_p1 = or_ln246_fu_1252_p2;

assign zext_ln246_fu_1242_p1 = p_0_i_reg_445;

assign zext_ln248_1_fu_1285_p1 = $unsigned(sext_ln247_fu_1281_p1);

assign zext_ln248_fu_1232_p1 = img_data_stream_V_dout;

assign zext_ln256_fu_1317_p1 = r_1_fu_1311_p2;

assign zext_ln257_fu_1328_p1 = add_ln257_fu_1322_p2;

assign zext_ln261_fu_1301_p1 = iris_radius_reg_481;

assign zext_ln339_1_fu_1050_p1 = tmp_V_2_fu_1022_p4;

assign zext_ln339_fu_921_p1 = tmp_V_fu_893_p4;

assign zext_ln662_1_fu_1118_p1 = tmp_5_fu_1110_p3;

assign zext_ln662_fu_989_p1 = tmp_fu_981_p3;

assign zext_ln682_1_fu_1046_p1 = mantissa_V_1_fu_1036_p4;

assign zext_ln682_fu_917_p1 = mantissa_V_fu_907_p4;

always @ (posedge ap_clk) begin
    sub_ln227_reg_1410[1:0] <= 2'b00;
    add_ln227_reg_1481[0] <= 1'b0;
    zext_ln239_reg_1556[31:9] <= 23'b00000000000000000000000;
    zext_ln240_reg_1569[31:9] <= 23'b00000000000000000000000;
    zext_ln248_reg_1582[31:8] <= 24'b000000000000000000000000;
    zext_ln261_reg_1623[31:6] <= 26'b00000000000000000000000000;
end

endmodule //find_iris_high_accur
