// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_level,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=84,HLS_SYN_DSP=52,HLS_SYN_FF=11382,HLS_SYN_LUT=26068,HLS_VERSION=2019_2}" *)

module top_level (
        ap_clk,
        ap_rst_n,
        inputStream_TDATA,
        inputStream_TVALID,
        inputStream_TREADY,
        inputStream_TKEEP,
        inputStream_TSTRB,
        inputStream_TUSER,
        inputStream_TLAST,
        inputStream_TID,
        inputStream_TDEST,
        outputStream_TDATA,
        outputStream_TVALID,
        outputStream_TREADY,
        outputStream_TKEEP,
        outputStream_TSTRB,
        outputStream_TUSER,
        outputStream_TLAST,
        outputStream_TID,
        outputStream_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] inputStream_TDATA;
input   inputStream_TVALID;
output   inputStream_TREADY;
input  [3:0] inputStream_TKEEP;
input  [3:0] inputStream_TSTRB;
input  [0:0] inputStream_TUSER;
input  [0:0] inputStream_TLAST;
input  [0:0] inputStream_TID;
input  [0:0] inputStream_TDEST;
output  [31:0] outputStream_TDATA;
output   outputStream_TVALID;
input   outputStream_TREADY;
output  [3:0] outputStream_TKEEP;
output  [3:0] outputStream_TSTRB;
output  [0:0] outputStream_TUSER;
output  [0:0] outputStream_TLAST;
output  [0:0] outputStream_TID;
output  [0:0] outputStream_TDEST;

reg inputStream_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] grp_method1_fu_54_outputStream_TDATA;
wire   [3:0] grp_method1_fu_54_outputStream_TKEEP;
wire   [3:0] grp_method1_fu_54_outputStream_TSTRB;
wire   [0:0] grp_method1_fu_54_outputStream_TUSER;
wire   [0:0] grp_method1_fu_54_outputStream_TLAST;
wire   [0:0] grp_method1_fu_54_outputStream_TID;
wire   [0:0] grp_method1_fu_54_outputStream_TDEST;
wire    grp_method1_fu_54_ap_start;
wire    grp_method1_fu_54_inputStream_TREADY;
wire    grp_method1_fu_54_outputStream_TVALID;
wire    grp_method1_fu_54_outputStream_TREADY;
wire    grp_method1_fu_54_ap_done;
wire    grp_method1_fu_54_ap_ready;
wire    grp_method1_fu_54_ap_idle;
reg    grp_method1_fu_54_ap_continue;
reg    grp_method1_fu_54_ap_start_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_method1_fu_54_ap_ready;
wire    ap_sync_grp_method1_fu_54_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_method1_fu_54_ap_ready;
reg    ap_sync_reg_grp_method1_fu_54_ap_done;
reg   [3:0] ap_NS_fsm;
wire    ap_CS_fsm_state4;
wire    regslice_both_outputStream_V_data_V_U_apdone_blk;
wire    regslice_both_inputStream_V_data_V_U_apdone_blk;
wire   [31:0] inputStream_TDATA_int;
wire    inputStream_TVALID_int;
reg    inputStream_TREADY_int;
wire    regslice_both_inputStream_V_data_V_U_ack_in;
wire    regslice_both_inputStream_V_keep_V_U_apdone_blk;
wire   [3:0] inputStream_TKEEP_int;
wire    regslice_both_inputStream_V_keep_V_U_vld_out;
wire    regslice_both_inputStream_V_keep_V_U_ack_in;
wire    regslice_both_inputStream_V_strb_V_U_apdone_blk;
wire   [3:0] inputStream_TSTRB_int;
wire    regslice_both_inputStream_V_strb_V_U_vld_out;
wire    regslice_both_inputStream_V_strb_V_U_ack_in;
wire    regslice_both_inputStream_V_user_V_U_apdone_blk;
wire   [0:0] inputStream_TUSER_int;
wire    regslice_both_inputStream_V_user_V_U_vld_out;
wire    regslice_both_inputStream_V_user_V_U_ack_in;
wire    regslice_both_inputStream_V_last_V_U_apdone_blk;
wire   [0:0] inputStream_TLAST_int;
wire    regslice_both_inputStream_V_last_V_U_vld_out;
wire    regslice_both_inputStream_V_last_V_U_ack_in;
wire    regslice_both_inputStream_V_id_V_U_apdone_blk;
wire   [0:0] inputStream_TID_int;
wire    regslice_both_inputStream_V_id_V_U_vld_out;
wire    regslice_both_inputStream_V_id_V_U_ack_in;
wire    regslice_both_inputStream_V_dest_V_U_apdone_blk;
wire   [0:0] inputStream_TDEST_int;
wire    regslice_both_inputStream_V_dest_V_U_vld_out;
wire    regslice_both_inputStream_V_dest_V_U_ack_in;
wire    outputStream_TREADY_int;
wire    regslice_both_outputStream_V_data_V_U_vld_out;
wire    regslice_both_outputStream_V_keep_V_U_apdone_blk;
wire    regslice_both_outputStream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_outputStream_V_keep_V_U_vld_out;
wire    regslice_both_outputStream_V_strb_V_U_apdone_blk;
wire    regslice_both_outputStream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_outputStream_V_strb_V_U_vld_out;
wire    regslice_both_outputStream_V_user_V_U_apdone_blk;
wire    regslice_both_outputStream_V_user_V_U_ack_in_dummy;
wire    regslice_both_outputStream_V_user_V_U_vld_out;
wire    regslice_both_outputStream_V_last_V_U_apdone_blk;
wire    regslice_both_outputStream_V_last_V_U_ack_in_dummy;
wire    regslice_both_outputStream_V_last_V_U_vld_out;
wire    regslice_both_outputStream_V_id_V_U_apdone_blk;
wire    regslice_both_outputStream_V_id_V_U_ack_in_dummy;
wire    regslice_both_outputStream_V_id_V_U_vld_out;
wire    regslice_both_outputStream_V_dest_V_U_apdone_blk;
wire    regslice_both_outputStream_V_dest_V_U_ack_in_dummy;
wire    regslice_both_outputStream_V_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 grp_method1_fu_54_ap_start_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_sync_reg_grp_method1_fu_54_ap_ready = 1'b0;
#0 ap_sync_reg_grp_method1_fu_54_ap_done = 1'b0;
end

method1 grp_method1_fu_54(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .inputStream_TDATA(inputStream_TDATA_int),
    .inputStream_TKEEP(inputStream_TKEEP_int),
    .inputStream_TSTRB(inputStream_TSTRB_int),
    .inputStream_TUSER(inputStream_TUSER_int),
    .inputStream_TLAST(inputStream_TLAST_int),
    .inputStream_TID(inputStream_TID_int),
    .inputStream_TDEST(inputStream_TDEST_int),
    .outputStream_TDATA(grp_method1_fu_54_outputStream_TDATA),
    .outputStream_TKEEP(grp_method1_fu_54_outputStream_TKEEP),
    .outputStream_TSTRB(grp_method1_fu_54_outputStream_TSTRB),
    .outputStream_TUSER(grp_method1_fu_54_outputStream_TUSER),
    .outputStream_TLAST(grp_method1_fu_54_outputStream_TLAST),
    .outputStream_TID(grp_method1_fu_54_outputStream_TID),
    .outputStream_TDEST(grp_method1_fu_54_outputStream_TDEST),
    .ap_start(grp_method1_fu_54_ap_start),
    .inputStream_TVALID(inputStream_TVALID_int),
    .inputStream_TREADY(grp_method1_fu_54_inputStream_TREADY),
    .outputStream_TVALID(grp_method1_fu_54_outputStream_TVALID),
    .outputStream_TREADY(grp_method1_fu_54_outputStream_TREADY),
    .ap_done(grp_method1_fu_54_ap_done),
    .ap_ready(grp_method1_fu_54_ap_ready),
    .ap_idle(grp_method1_fu_54_ap_idle),
    .ap_continue(grp_method1_fu_54_ap_continue)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_inputStream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputStream_TDATA),
    .vld_in(inputStream_TVALID),
    .ack_in(regslice_both_inputStream_V_data_V_U_ack_in),
    .data_out(inputStream_TDATA_int),
    .vld_out(inputStream_TVALID_int),
    .ack_out(inputStream_TREADY_int),
    .apdone_blk(regslice_both_inputStream_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_inputStream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputStream_TKEEP),
    .vld_in(inputStream_TVALID),
    .ack_in(regslice_both_inputStream_V_keep_V_U_ack_in),
    .data_out(inputStream_TKEEP_int),
    .vld_out(regslice_both_inputStream_V_keep_V_U_vld_out),
    .ack_out(inputStream_TREADY_int),
    .apdone_blk(regslice_both_inputStream_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_inputStream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputStream_TSTRB),
    .vld_in(inputStream_TVALID),
    .ack_in(regslice_both_inputStream_V_strb_V_U_ack_in),
    .data_out(inputStream_TSTRB_int),
    .vld_out(regslice_both_inputStream_V_strb_V_U_vld_out),
    .ack_out(inputStream_TREADY_int),
    .apdone_blk(regslice_both_inputStream_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_inputStream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputStream_TUSER),
    .vld_in(inputStream_TVALID),
    .ack_in(regslice_both_inputStream_V_user_V_U_ack_in),
    .data_out(inputStream_TUSER_int),
    .vld_out(regslice_both_inputStream_V_user_V_U_vld_out),
    .ack_out(inputStream_TREADY_int),
    .apdone_blk(regslice_both_inputStream_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_inputStream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputStream_TLAST),
    .vld_in(inputStream_TVALID),
    .ack_in(regslice_both_inputStream_V_last_V_U_ack_in),
    .data_out(inputStream_TLAST_int),
    .vld_out(regslice_both_inputStream_V_last_V_U_vld_out),
    .ack_out(inputStream_TREADY_int),
    .apdone_blk(regslice_both_inputStream_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_inputStream_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputStream_TID),
    .vld_in(inputStream_TVALID),
    .ack_in(regslice_both_inputStream_V_id_V_U_ack_in),
    .data_out(inputStream_TID_int),
    .vld_out(regslice_both_inputStream_V_id_V_U_vld_out),
    .ack_out(inputStream_TREADY_int),
    .apdone_blk(regslice_both_inputStream_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_inputStream_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(inputStream_TDEST),
    .vld_in(inputStream_TVALID),
    .ack_in(regslice_both_inputStream_V_dest_V_U_ack_in),
    .data_out(inputStream_TDEST_int),
    .vld_out(regslice_both_inputStream_V_dest_V_U_vld_out),
    .ack_out(inputStream_TREADY_int),
    .apdone_blk(regslice_both_inputStream_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_outputStream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_method1_fu_54_outputStream_TDATA),
    .vld_in(grp_method1_fu_54_outputStream_TVALID),
    .ack_in(outputStream_TREADY_int),
    .data_out(outputStream_TDATA),
    .vld_out(regslice_both_outputStream_V_data_V_U_vld_out),
    .ack_out(outputStream_TREADY),
    .apdone_blk(regslice_both_outputStream_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_outputStream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_method1_fu_54_outputStream_TKEEP),
    .vld_in(grp_method1_fu_54_outputStream_TVALID),
    .ack_in(regslice_both_outputStream_V_keep_V_U_ack_in_dummy),
    .data_out(outputStream_TKEEP),
    .vld_out(regslice_both_outputStream_V_keep_V_U_vld_out),
    .ack_out(outputStream_TREADY),
    .apdone_blk(regslice_both_outputStream_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_outputStream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_method1_fu_54_outputStream_TSTRB),
    .vld_in(grp_method1_fu_54_outputStream_TVALID),
    .ack_in(regslice_both_outputStream_V_strb_V_U_ack_in_dummy),
    .data_out(outputStream_TSTRB),
    .vld_out(regslice_both_outputStream_V_strb_V_U_vld_out),
    .ack_out(outputStream_TREADY),
    .apdone_blk(regslice_both_outputStream_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_outputStream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_method1_fu_54_outputStream_TUSER),
    .vld_in(grp_method1_fu_54_outputStream_TVALID),
    .ack_in(regslice_both_outputStream_V_user_V_U_ack_in_dummy),
    .data_out(outputStream_TUSER),
    .vld_out(regslice_both_outputStream_V_user_V_U_vld_out),
    .ack_out(outputStream_TREADY),
    .apdone_blk(regslice_both_outputStream_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_outputStream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_method1_fu_54_outputStream_TLAST),
    .vld_in(grp_method1_fu_54_outputStream_TVALID),
    .ack_in(regslice_both_outputStream_V_last_V_U_ack_in_dummy),
    .data_out(outputStream_TLAST),
    .vld_out(regslice_both_outputStream_V_last_V_U_vld_out),
    .ack_out(outputStream_TREADY),
    .apdone_blk(regslice_both_outputStream_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_outputStream_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_method1_fu_54_outputStream_TID),
    .vld_in(grp_method1_fu_54_outputStream_TVALID),
    .ack_in(regslice_both_outputStream_V_id_V_U_ack_in_dummy),
    .data_out(outputStream_TID),
    .vld_out(regslice_both_outputStream_V_id_V_U_vld_out),
    .ack_out(outputStream_TREADY),
    .apdone_blk(regslice_both_outputStream_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_outputStream_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_method1_fu_54_outputStream_TDEST),
    .vld_in(grp_method1_fu_54_outputStream_TVALID),
    .ack_in(regslice_both_outputStream_V_dest_V_U_ack_in_dummy),
    .data_out(outputStream_TDEST),
    .vld_out(regslice_both_outputStream_V_dest_V_U_vld_out),
    .ack_out(outputStream_TREADY),
    .apdone_blk(regslice_both_outputStream_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_method1_fu_54_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_method1_fu_54_ap_done <= 1'b0;
        end else if ((grp_method1_fu_54_ap_done == 1'b1)) begin
            ap_sync_reg_grp_method1_fu_54_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_method1_fu_54_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_method1_fu_54_ap_ready <= 1'b0;
        end else if ((grp_method1_fu_54_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_method1_fu_54_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_method1_fu_54_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) | ((ap_sync_grp_method1_fu_54_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_method1_fu_54_ap_start_reg <= 1'b1;
        end else if ((grp_method1_fu_54_ap_ready == 1'b1)) begin
            grp_method1_fu_54_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_method1_fu_54_ap_continue = 1'b1;
    end else begin
        grp_method1_fu_54_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_inputStream_V_data_V_U_ack_in == 1'b1) & (inputStream_TVALID == 1'b1))) begin
        inputStream_TREADY = 1'b1;
    end else begin
        inputStream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputStream_TREADY_int = grp_method1_fu_54_inputStream_TREADY;
    end else begin
        inputStream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_outputStream_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_method1_fu_54_ap_ready & ap_sync_grp_method1_fu_54_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_method1_fu_54_ap_done = (grp_method1_fu_54_ap_done | ap_sync_reg_grp_method1_fu_54_ap_done);

assign ap_sync_grp_method1_fu_54_ap_ready = (grp_method1_fu_54_ap_ready | ap_sync_reg_grp_method1_fu_54_ap_ready);

assign grp_method1_fu_54_ap_start = grp_method1_fu_54_ap_start_reg;

assign grp_method1_fu_54_outputStream_TREADY = (outputStream_TREADY_int & ap_CS_fsm_state3);

assign outputStream_TVALID = regslice_both_outputStream_V_data_V_U_vld_out;

endmodule //top_level
