-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordicSin_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of cordicSin_fix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_4D : STD_LOGIC_VECTOR (7 downto 0) := "01001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_FF9 : STD_LOGIC_VECTOR (11 downto 0) := "111111111001";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal arctan_V232_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal arctan_V232_ce0 : STD_LOGIC;
    signal arctan_V232_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal man_V_12_fu_200_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_12_reg_626 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln571_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_631 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_248_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_643 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln583_reg_656 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_662 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln603_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal or_ln603_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_7_fu_368_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_7_reg_677 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln603_6_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_6_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_9_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal n_fu_444_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_reg_695 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln99_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_705 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_V_fu_556_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal z_r_V_fu_584_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_i_V_fu_612_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_i_old_V_reg_99 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_r_old_V_reg_111 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_75_reg_123 : STD_LOGIC_VECTOR (7 downto 0);
    signal ush_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln100_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_164_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_178_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_182_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_84_fu_190_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_11_fu_194_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_152_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_174_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_214_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_54_fu_220_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln581_fu_236_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_242_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_289_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_293_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal xor_ln571_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_7_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_fu_298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln582_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_5_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln696_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln581_fu_387_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln604_fu_409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln588_fu_401_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_fu_414_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_8_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln99_fu_434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_469_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln703_fu_477_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1193_fu_502_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1193_fu_502_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_fu_487_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_494_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1193_fu_502_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1192_fu_526_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1192_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_4_fu_518_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1192_fu_526_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_57_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_fu_538_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln703_fu_481_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_508_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_7_fu_544_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_564_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_6_fu_532_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_8_fu_550_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_14_fu_602_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_592_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component top_level2_fpext_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cordicCos_fix_arckbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    arctan_V232_U : component cordicCos_fix_arckbM
    generic map (
        DataWidth => 4,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => arctan_V232_address0,
        ce0 => arctan_V232_ce0,
        q0 => arctan_V232_q0);

    top_level2_fpext_lbW_U63 : component top_level2_fpext_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x,
        ce => ap_const_logic_1,
        dout => grp_fu_144_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((icmp_ln99_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_return_preg <= z_i_old_V_reg_99;
                end if; 
            end if;
        end if;
    end process;


    p_Val2_75_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_75_reg_123 <= select_ln603_9_fu_427_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_75_reg_123 <= phi_V_fu_556_p3;
            end if; 
        end if;
    end process;

    ush_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ush_reg_133 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ush_reg_133 <= n_reg_695;
            end if; 
        end if;
    end process;

    z_i_old_V_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                z_i_old_V_reg_99 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                z_i_old_V_reg_99 <= z_i_V_fu_612_p3;
            end if; 
        end if;
    end process;

    z_r_old_V_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                z_r_old_V_reg_111 <= ap_const_lv8_4D;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                z_r_old_V_reg_111 <= z_r_V_fu_584_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                and_ln603_reg_667 <= and_ln603_fu_356_p2;
                or_ln603_6_reg_682 <= or_ln603_6_fu_381_p2;
                or_ln603_reg_672 <= or_ln603_fu_362_p2;
                select_ln603_7_reg_677 <= select_ln603_7_fu_368_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln571_reg_631 <= icmp_ln571_fu_208_p2;
                icmp_ln581_reg_637 <= icmp_ln581_fu_230_p2;
                icmp_ln582_reg_650 <= icmp_ln582_fu_256_p2;
                man_V_12_reg_626 <= man_V_12_fu_200_p3;
                sh_amt_reg_643 <= sh_amt_fu_248_p3;
                tmp_55_reg_662 <= sh_amt_fu_248_p3(11 downto 3);
                trunc_ln583_reg_656 <= trunc_ln583_fu_262_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                n_reg_695 <= n_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                r_V_reg_705 <= r_V_fu_455_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln99_fu_438_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln99_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    F2_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_174_p1));
    add_ln581_fu_236_p2 <= std_logic_vector(signed(ap_const_lv12_FF9) + signed(F2_fu_214_p2));
    add_ln703_fu_538_p2 <= std_logic_vector(unsigned(p_Val2_75_reg_123) + unsigned(zext_ln703_fu_477_p1));
    and_ln581_fu_322_p2 <= (xor_ln582_fu_316_p2 and icmp_ln581_reg_637);
    and_ln582_fu_307_p2 <= (xor_ln571_fu_302_p2 and icmp_ln582_reg_650);
    and_ln585_7_fu_339_p2 <= (xor_ln585_fu_333_p2 and and_ln581_fu_322_p2);
    and_ln585_fu_327_p2 <= (icmp_ln585_fu_279_p2 and and_ln581_fu_322_p2);
    and_ln603_fu_356_p2 <= (xor_ln581_fu_350_p2 and icmp_ln603_fu_284_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln99_fu_438_p2)
    begin
        if ((((icmp_ln99_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln99_fu_438_p2)
    begin
        if (((icmp_ln99_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state5, icmp_ln99_fu_438_p2, z_i_old_V_reg_99, ap_return_preg)
    begin
        if (((icmp_ln99_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_return <= z_i_old_V_reg_99;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    arctan_V232_address0 <= zext_ln100_fu_450_p1(6 - 1 downto 0);

    arctan_V232_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            arctan_V232_ce0 <= ap_const_logic_1;
        else 
            arctan_V232_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_293_p2 <= std_logic_vector(shift_right(signed(man_V_12_reg_626),to_integer(unsigned('0' & zext_ln586_fu_289_p1(31-1 downto 0)))));
    bitcast_ln696_fu_390_p1 <= x;
    exp_tmp_V_fu_164_p4 <= ireg_V_fu_148_p1(62 downto 52);
    icmp_ln571_fu_208_p2 <= "1" when (trunc_ln556_fu_152_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_230_p2 <= "1" when (signed(tmp_54_fu_220_p4) > signed(ap_const_lv9_0)) else "0";
    icmp_ln582_fu_256_p2 <= "1" when (F2_fu_214_p2 = ap_const_lv12_7) else "0";
    icmp_ln585_fu_279_p2 <= "1" when (unsigned(sh_amt_reg_643) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_284_p2 <= "1" when (tmp_55_reg_662 = ap_const_lv9_0) else "0";
    icmp_ln99_fu_438_p2 <= "1" when (ush_reg_133 = ap_const_lv4_A) else "0";
    ireg_V_fu_148_p1 <= grp_fu_144_p1;
    lhs_V_4_fu_518_p3 <= (z_i_old_V_reg_99 & ap_const_lv7_0);
    lhs_V_fu_494_p3 <= (z_r_old_V_reg_111 & ap_const_lv7_0);
    man_V_11_fu_194_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_84_fu_190_p1));
    man_V_12_fu_200_p3 <= 
        man_V_11_fu_194_p2 when (p_Result_s_fu_156_p3(0) = '1') else 
        p_Result_84_fu_190_p1;
    mul_ln1192_fu_526_p0 <= z_r_old_V_reg_111;
    mul_ln1192_fu_526_p1 <= sext_ln1118_fu_487_p1(8 - 1 downto 0);
    mul_ln1192_fu_526_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_526_p0) * signed(mul_ln1192_fu_526_p1))), 15));
    mul_ln1193_fu_502_p0 <= z_i_old_V_reg_99;
    mul_ln1193_fu_502_p1 <= sext_ln1118_fu_487_p1(8 - 1 downto 0);
    mul_ln1193_fu_502_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1193_fu_502_p0) * signed(mul_ln1193_fu_502_p1))), 15));
    n_fu_444_p2 <= std_logic_vector(unsigned(ush_reg_133) + unsigned(ap_const_lv4_1));
    or_ln581_fu_345_p2 <= (or_ln582_fu_312_p2 or icmp_ln581_reg_637);
    or_ln582_fu_312_p2 <= (icmp_ln582_reg_650 or icmp_ln571_reg_631);
    or_ln603_5_fu_375_p2 <= (and_ln585_fu_327_p2 or and_ln582_fu_307_p2);
    or_ln603_6_fu_381_p2 <= (or_ln603_fu_362_p2 or or_ln603_5_fu_375_p2);
    or_ln603_fu_362_p2 <= (and_ln603_fu_356_p2 or and_ln585_7_fu_339_p2);
    p_Result_84_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_182_p3),54));
    p_Result_s_fu_156_p3 <= ireg_V_fu_148_p1(63 downto 63);
    phi_V_fu_556_p3 <= 
        add_ln703_fu_538_p2 when (tmp_57_fu_461_p3(0) = '1') else 
        sub_ln703_fu_481_p2;
    r_V_fu_455_p2 <= std_logic_vector(shift_right(signed(ap_const_lv8_80),to_integer(unsigned('0' & zext_ln99_fu_434_p1(8-1 downto 0)))));
    ret_V_6_fu_532_p2 <= std_logic_vector(unsigned(lhs_V_4_fu_518_p3) + unsigned(mul_ln1192_fu_526_p2));
    ret_V_7_fu_544_p2 <= std_logic_vector(unsigned(mul_ln1193_fu_502_p2) + unsigned(lhs_V_fu_494_p3));
    ret_V_8_fu_550_p2 <= std_logic_vector(unsigned(lhs_V_4_fu_518_p3) - unsigned(mul_ln1192_fu_526_p2));
    ret_V_fu_508_p2 <= std_logic_vector(unsigned(lhs_V_fu_494_p3) - unsigned(mul_ln1193_fu_502_p2));
    select_ln588_fu_401_p3 <= 
        ap_const_lv8_FF when (tmp_56_fu_393_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln603_7_fu_368_p3 <= 
        trunc_ln586_fu_298_p1 when (and_ln585_fu_327_p2(0) = '1') else 
        trunc_ln583_reg_656;
    select_ln603_8_fu_421_p3 <= 
        select_ln603_fu_414_p3 when (or_ln603_reg_672(0) = '1') else 
        select_ln603_7_reg_677;
    select_ln603_9_fu_427_p3 <= 
        select_ln603_8_fu_421_p3 when (or_ln603_6_reg_682(0) = '1') else 
        ap_const_lv8_0;
    select_ln603_fu_414_p3 <= 
        shl_ln604_fu_409_p2 when (and_ln603_reg_667(0) = '1') else 
        select_ln588_fu_401_p3;
        sext_ln1118_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_705),15));

        sext_ln581_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_643),32));

    sh_amt_fu_248_p3 <= 
        add_ln581_fu_236_p2 when (icmp_ln581_fu_230_p2(0) = '1') else 
        sub_ln581_fu_242_p2;
    shl_ln604_fu_409_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_656),to_integer(unsigned('0' & trunc_ln581_fu_387_p1(8-1 downto 0)))));
    shl_ln_fu_469_p3 <= (arctan_V232_q0 & ap_const_lv3_0);
    sub_ln581_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv12_7) - unsigned(F2_fu_214_p2));
    sub_ln703_fu_481_p2 <= std_logic_vector(unsigned(p_Val2_75_reg_123) - unsigned(zext_ln703_fu_477_p1));
    tmp_12_fu_574_p4 <= ret_V_7_fu_544_p2(14 downto 7);
    tmp_13_fu_592_p4 <= ret_V_6_fu_532_p2(14 downto 7);
    tmp_14_fu_602_p4 <= ret_V_8_fu_550_p2(14 downto 7);
    tmp_54_fu_220_p4 <= F2_fu_214_p2(11 downto 3);
    tmp_56_fu_393_p3 <= bitcast_ln696_fu_390_p1(31 downto 31);
    tmp_57_fu_461_p3 <= p_Val2_75_reg_123(7 downto 7);
    tmp_fu_182_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_178_p1);
    tmp_s_fu_564_p4 <= ret_V_fu_508_p2(14 downto 7);
    trunc_ln556_fu_152_p1 <= ireg_V_fu_148_p1(63 - 1 downto 0);
    trunc_ln565_fu_178_p1 <= ireg_V_fu_148_p1(52 - 1 downto 0);
    trunc_ln581_fu_387_p1 <= sh_amt_reg_643(8 - 1 downto 0);
    trunc_ln583_fu_262_p1 <= man_V_12_fu_200_p3(8 - 1 downto 0);
    trunc_ln586_fu_298_p1 <= ashr_ln586_fu_293_p2(8 - 1 downto 0);
    xor_ln571_fu_302_p2 <= (icmp_ln571_reg_631 xor ap_const_lv1_1);
    xor_ln581_fu_350_p2 <= (or_ln581_fu_345_p2 xor ap_const_lv1_1);
    xor_ln582_fu_316_p2 <= (or_ln582_fu_312_p2 xor ap_const_lv1_1);
    xor_ln585_fu_333_p2 <= (icmp_ln585_fu_279_p2 xor ap_const_lv1_1);
    z_i_V_fu_612_p3 <= 
        tmp_14_fu_602_p4 when (tmp_57_fu_461_p3(0) = '1') else 
        tmp_13_fu_592_p4;
    z_r_V_fu_584_p3 <= 
        tmp_12_fu_574_p4 when (tmp_57_fu_461_p3(0) = '1') else 
        tmp_s_fu_564_p4;
    zext_ln100_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_reg_133),64));
    zext_ln461_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_164_p4),12));
    zext_ln586_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_276_p1),54));
    zext_ln703_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_469_p3),8));
    zext_ln99_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ush_reg_133),8));
end behav;
