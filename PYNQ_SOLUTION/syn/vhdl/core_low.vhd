-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity core_low is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_in_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_in_ce0 : OUT STD_LOGIC;
    image_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    image_out_ce0 : OUT STD_LOGIC;
    image_out_we0 : OUT STD_LOGIC;
    image_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of core_low is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (92 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (92 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (92 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (92 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (92 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (92 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (92 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (92 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (92 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (92 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (92 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (92 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_3C800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111100100000000000000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_C01921FB54442D18 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000011001001000011111101101010100010001000010110100011000";
    constant ap_const_lv64_C00921FB54442D11 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000001001001000011111101101010100010001000010110100010001";
    constant ap_const_lv64_400921FB54442D11 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001001001000011111101101010100010001000010110100010001";
    constant ap_const_lv64_3F91DF46A252DD11 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110010001110111110100011010100010010100101101110100010001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_4012D97C7F3321D2 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010010110110010111110001111111001100110010000111010010";
    constant ap_const_lv64_3FF921FB54524550 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111001001000011111101101010100010100100100010101010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_BFF921FB54524550 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111111001001000011111101101010100010100100100010101010000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_E8 : STD_LOGIC_VECTOR (7 downto 0) := "11101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv15_168 : STD_LOGIC_VECTOR (14 downto 0) := "000000101101000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_356 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_45_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_i_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln367_fu_385_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln367_reg_1409 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal theta_fu_400_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal theta_reg_1422 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_i_reg_1427 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_i_reg_1432 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal x_assign_reg_1437 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_1444 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal or_ln165_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln165_reg_1452 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln165_reg_1458 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln167_reg_1462 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal and_ln169_1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln169_1_reg_1466 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_cordicCos_fix_fu_261_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_cordicCos_fix_fu_261_ap_ready : STD_LOGIC;
    signal grp_cordicCos_fix_fu_261_ap_done : STD_LOGIC;
    signal tmp_59_i_i_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_predicate_op181_call_state35 : BOOLEAN;
    signal ap_block_state35_on_subcall_done : BOOLEAN;
    signal sub_ln703_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal p_Result_75_reg_1495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_cordic360_Sin_fixed_fu_254_ap_ready : STD_LOGIC;
    signal grp_cordic360_Sin_fixed_fu_254_ap_done : STD_LOGIC;
    signal grp_cordic360_Sin_fixed_fu_254_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_38_reg_1501 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_78_reg_1508 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1514 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp_V_37_fu_487_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_37_reg_1519 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_fu_512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_1526 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln943_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1531 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln935_2_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_2_reg_1536 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_39_fu_534_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_39_reg_1541 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_3_fu_558_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_3_reg_1548 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln943_2_fu_566_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_2_reg_1553 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln944_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1558 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal or_ln_i_fu_677_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_i_reg_1564 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_1569 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln944_2_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_2_reg_1574 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_2_i_fu_798_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_2_i_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_2_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_2_reg_1585 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_s_reg_1590 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_37_reg_1595 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_5_reg_1600 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_41_reg_1605 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempCos_fu_966_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempCos_reg_1610 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal tempSin_fu_1017_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempSin_reg_1616 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_reg_1627 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_reg_1637 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_reg_1642 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_reg_1647 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln380_fu_1024_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal r_fu_1035_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_reg_1660 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln386_3_fu_1041_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln386_3_reg_1665 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln380_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln386_2_fu_1047_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln386_2_reg_1670 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_31_i_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal tmp_34_i_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_i_reg_1685 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_7_reg_1690 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_81_reg_1695 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal p_Val2_84_fu_1174_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_84_reg_1700 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_82_reg_1706 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_86_fu_1303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_86_reg_1711 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln386_1_fu_1351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln386_1_reg_1717 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_cordic360_Sin_fixed_fu_254_ap_start : STD_LOGIC;
    signal grp_cordic360_Sin_fixed_fu_254_ap_idle : STD_LOGIC;
    signal grp_cordicCos_fix_fu_261_ap_start : STD_LOGIC;
    signal grp_cordicCos_fix_fu_261_ap_idle : STD_LOGIC;
    signal grp_cordicCos_fix_fu_261_x : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_0_i_reg_207 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_36_reg_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_i_reg_232 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal phi_mul_reg_243 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_cordic360_Sin_fixed_fu_254_ap_start_reg : STD_LOGIC := '0';
    signal grp_cordicCos_fix_fu_261_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal sext_ln386_fu_1357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln386_fu_1361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grp_fu_272_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_302_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_318_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln165_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_409_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln165_fu_419_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln165_1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln169_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_481_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_494_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_76_fu_504_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_28_fu_529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_60_fu_540_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_79_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_585_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_601_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln947_fu_605_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln947_fu_611_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln947_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_56_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln947_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_4_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_638_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln949_fu_652_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_57_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lsb_index_3_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_706_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_2_fu_722_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln947_2_fu_726_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln947_2_fu_732_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln947_2_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_62_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln947_5_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_6_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_759_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_2_fu_696_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln949_2_fu_773_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_63_fu_779_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_2_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_2_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_3_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_2_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_812_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_815_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_831_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_31_fu_837_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_34_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_37_fu_867_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_2_fu_870_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_2_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_2_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_2_fu_886_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_38_fu_892_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_39_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln964_fu_932_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_925_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_937_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_42_fu_922_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_i_fu_943_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_77_fu_950_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_962_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln964_2_fu_983_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_2_fu_976_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_2_fu_988_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_43_fu_973_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_i_fu_994_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_80_fu_1001_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_2_fu_1013_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_74_fu_1052_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_41_fu_1074_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_1078_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_40_fu_1064_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_1092_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_1096_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_1110_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1102_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_1116_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1120_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_5_fu_1128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_8_fu_1132_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_1088_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_1136_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_1140_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_44_fu_1152_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_14_fu_1146_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_1160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1164_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_79_fu_1182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_43_fu_1203_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_2_fu_1207_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_42_fu_1193_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_2_fu_1221_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_2_fu_1225_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_2_fu_1239_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_1231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_6_fu_1245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_1249_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_7_fu_1257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_9_fu_1261_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_2_fu_1217_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_2_fu_1265_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_15_fu_1269_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_47_fu_1281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_16_fu_1275_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_2_fu_1289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1293_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_fu_1311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_fu_1322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_87_fu_1327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln386_1_fu_1339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_85_fu_1316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln386_fu_1345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln386_fu_1333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_302_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_fu_306_ce : STD_LOGIC;
    signal grp_fu_310_ce : STD_LOGIC;
    signal grp_fu_314_ce : STD_LOGIC;
    signal grp_fu_336_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln367_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (92 downto 0);

    component cordic360_Sin_fixed IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cordicCos_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component top_level2_faddfsqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level2_fadd_3g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level2_fmul_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level2_sitofpibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level2_fptrunncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_level2_fpext_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level2_dadd_6ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level2_dmul_6rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_level2_dcmp_6pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component top_level2_sitodpsc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_cordic360_Sin_fixed_fu_254 : component cordic360_Sin_fixed
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cordic360_Sin_fixed_fu_254_ap_start,
        ap_done => grp_cordic360_Sin_fixed_fu_254_ap_done,
        ap_idle => grp_cordic360_Sin_fixed_fu_254_ap_idle,
        ap_ready => grp_cordic360_Sin_fixed_fu_254_ap_ready,
        x => x_assign_reg_1437,
        ap_return => grp_cordic360_Sin_fixed_fu_254_ap_return);

    grp_cordicCos_fix_fu_261 : component cordicCos_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cordicCos_fix_fu_261_ap_start,
        ap_done => grp_cordicCos_fix_fu_261_ap_done,
        ap_idle => grp_cordicCos_fix_fu_261_ap_idle,
        ap_ready => grp_cordicCos_fix_fu_261_ap_ready,
        x => grp_cordicCos_fix_fu_261_x,
        ap_return => grp_cordicCos_fix_fu_261_ap_return);

    top_level2_faddfsqcK_U74 : component top_level2_faddfsqcK
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_268_p0,
        din1 => grp_fu_268_p1,
        opcode => grp_fu_268_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_268_p2);

    top_level2_fadd_3g8j_U75 : component top_level2_fadd_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_272_p0,
        din1 => reg_374,
        ce => ap_const_logic_1,
        dout => grp_fu_272_p2);

    top_level2_fadd_3g8j_U76 : component top_level2_fadd_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_23_i_reg_1403,
        din1 => tmp_29_i_reg_1622,
        ce => ap_const_logic_1,
        dout => grp_fu_276_p2);

    top_level2_fadd_3g8j_U77 : component top_level2_fadd_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_23_i_reg_1403,
        din1 => tmp_30_i_reg_1627,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p2);

    top_level2_fmul_3hbi_U78 : component top_level2_fmul_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => grp_fu_285_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);

    top_level2_fmul_3hbi_U79 : component top_level2_fmul_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_289_p0,
        din1 => grp_fu_289_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);

    top_level2_fmul_3hbi_U80 : component top_level2_fmul_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_45_reg_1391,
        din1 => tempSin_reg_1616,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p2);

    top_level2_fmul_3hbi_U81 : component top_level2_fmul_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_22_i_reg_1397,
        din1 => tempSin_reg_1616,
        ce => ap_const_logic_1,
        dout => grp_fu_297_p2);

    top_level2_sitofpibs_U82 : component top_level2_sitofpibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_302_p0,
        ce => grp_fu_302_ce,
        dout => grp_fu_302_p1);

    top_level2_sitofpibs_U83 : component top_level2_sitofpibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read2,
        ce => grp_fu_306_ce,
        dout => grp_fu_306_p1);

    top_level2_sitofpibs_U84 : component top_level2_sitofpibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read3,
        ce => grp_fu_310_ce,
        dout => grp_fu_310_p1);

    top_level2_sitofpibs_U85 : component top_level2_sitofpibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read1,
        ce => grp_fu_314_ce,
        dout => grp_fu_314_p1);

    top_level2_fptrunncg_U86 : component top_level2_fptrunncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_318_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_318_p1);

    top_level2_fpext_lbW_U87 : component top_level2_fpext_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_assign_reg_1437,
        ce => ap_const_logic_1,
        dout => grp_fu_321_p1);

    top_level2_dadd_6ocq_U88 : component top_level2_dadd_6ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_reg_1444,
        din1 => grp_fu_324_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    top_level2_dmul_6rcU_U89 : component top_level2_dmul_6rcU
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_24_i_reg_1427,
        din1 => ap_const_lv64_3F91DF46A252DD11,
        ce => ap_const_logic_1,
        dout => grp_fu_331_p2);

    top_level2_dcmp_6pcA_U90 : component top_level2_dcmp_6pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_reg_1444,
        din1 => grp_fu_336_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_336_opcode,
        dout => grp_fu_336_p2);

    top_level2_dcmp_6pcA_U91 : component top_level2_dcmp_6pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_reg_1444,
        din1 => ap_const_lv64_BFF921FB54524550,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_343_p2);

    top_level2_sitodpsc4_U92 : component top_level2_sitodpsc4
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_348_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_348_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln367_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_cordic360_Sin_fixed_fu_254_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cordic360_Sin_fixed_fu_254_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state35_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    grp_cordic360_Sin_fixed_fu_254_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cordic360_Sin_fixed_fu_254_ap_ready = ap_const_logic_1)) then 
                    grp_cordic360_Sin_fixed_fu_254_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cordicCos_fix_fu_261_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cordicCos_fix_fu_261_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_lv1_0 = and_ln169_1_fu_447_p2) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
                    grp_cordicCos_fix_fu_261_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cordicCos_fix_fu_261_ap_ready = ap_const_logic_1)) then 
                    grp_cordicCos_fix_fu_261_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    phi_mul_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                phi_mul_reg_243 <= add_ln386_3_reg_1665;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                phi_mul_reg_243 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    r_0_i_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                r_0_i_reg_232 <= r_reg_1660;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                r_0_i_reg_232 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    theta_0_i_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln380_fu_1029_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                theta_0_i_reg_207 <= theta_reg_1422;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                theta_0_i_reg_207 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    tmp_V_36_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state35_on_subcall_done) and (ap_const_lv1_1 = and_ln169_1_reg_1466) and (ap_const_lv1_0 = and_ln167_reg_1462) and (ap_const_lv1_0 = and_ln165_reg_1458) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((grp_cordicCos_fix_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((grp_cordicCos_fix_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
                tmp_V_36_reg_218 <= grp_cordicCos_fix_fu_261_ap_return;
            elsif (((grp_cordicCos_fix_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                tmp_V_36_reg_218 <= sub_ln703_fu_453_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                add_ln386_1_reg_1717 <= add_ln386_1_fu_1351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln380_fu_1029_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                add_ln386_2_reg_1670 <= add_ln386_2_fu_1047_p2;
                add_ln386_3_reg_1665 <= add_ln386_3_fu_1041_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                and_ln165_reg_1458 <= grp_fu_351_p2;
                or_ln165_reg_1452 <= or_ln165_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                and_ln167_reg_1462 <= grp_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                and_ln169_1_reg_1466 <= and_ln169_1_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                icmp_ln935_2_reg_1536 <= icmp_ln935_2_fu_524_p2;
                icmp_ln935_reg_1514 <= icmp_ln935_fu_475_p2;
                l_3_reg_1548 <= l_3_fu_558_p3;
                l_reg_1526 <= l_fu_512_p3;
                tmp_V_37_reg_1519 <= tmp_V_37_fu_487_p3;
                tmp_V_39_reg_1541 <= tmp_V_39_fu_534_p3;
                trunc_ln943_2_reg_1553 <= trunc_ln943_2_fu_566_p1;
                trunc_ln943_reg_1531 <= trunc_ln943_fu_520_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_2_reg_1536 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                icmp_ln958_2_reg_1585 <= icmp_ln958_2_fu_806_p2;
                    or_ln949_2_i_reg_1580(0) <= or_ln949_2_i_fu_798_p3(0);
                sub_ln944_2_reg_1574 <= sub_ln944_2_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1514 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                icmp_ln958_reg_1569 <= icmp_ln958_fu_685_p2;
                    or_ln_i_reg_1564(0) <= or_ln_i_fu_677_p3(0);
                sub_ln944_reg_1558 <= sub_ln944_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_2_reg_1536 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                m_5_reg_1600 <= m_39_fu_899_p2(31 downto 1);
                tmp_41_reg_1605 <= m_39_fu_899_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1514 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                m_s_reg_1590 <= m_34_fu_844_p2(31 downto 1);
                tmp_37_reg_1595 <= m_34_fu_844_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cordic360_Sin_fixed_fu_254_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                p_Result_75_reg_1495 <= tmp_V_36_reg_218(7 downto 7);
                p_Result_78_reg_1508 <= grp_cordic360_Sin_fixed_fu_254_ap_return(7 downto 7);
                tmp_V_38_reg_1501 <= grp_cordic360_Sin_fixed_fu_254_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                p_Result_81_reg_1695 <= p_Val2_74_fu_1052_p1(31 downto 31);
                p_Result_82_reg_1706 <= p_Val2_79_fu_1182_p1(31 downto 31);
                p_Val2_84_reg_1700 <= p_Val2_84_fu_1174_p3;
                p_Val2_86_reg_1711 <= p_Val2_86_fu_1303_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                r_reg_1660 <= r_fu_1035_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_356 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state41))) then
                reg_361 <= grp_fu_318_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state60))) then
                reg_366 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state60))) then
                reg_374 <= grp_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state80))) then
                reg_379 <= grp_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                temp1_reg_1632 <= grp_fu_268_p2;
                temp2_reg_1637 <= grp_fu_272_p2;
                temp3_reg_1642 <= grp_fu_276_p2;
                temp4_reg_1647 <= grp_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                tempCos_reg_1610 <= tempCos_fu_966_p3;
                tempSin_reg_1616 <= tempSin_fu_1017_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                theta_reg_1422 <= theta_fu_400_p2;
                    zext_ln367_reg_1409(8 downto 0) <= zext_ln367_fu_385_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_22_i_reg_1397 <= grp_fu_310_p1;
                tmp_23_i_reg_1403 <= grp_fu_314_p1;
                tmp_i_45_reg_1391 <= grp_fu_306_p1;
                tmp_i_reg_1385 <= grp_fu_302_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_24_i_reg_1427 <= grp_fu_348_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_25_i_reg_1432 <= grp_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                tmp_29_i_reg_1622 <= grp_fu_293_p2;
                tmp_30_i_reg_1627 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                tmp_31_i_reg_1675 <= grp_fu_302_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                tmp_34_i_reg_1680 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                tmp_36_i_reg_1685 <= grp_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_59_i_i_reg_1475 <= grp_fu_318_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_i_i_reg_1444 <= grp_fu_321_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                x_assign_7_reg_1690 <= grp_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                x_assign_reg_1437 <= grp_fu_318_p1;
            end if;
        end if;
    end process;
    zext_ln367_reg_1409(14 downto 9) <= "000000";
    or_ln_i_reg_1564(31 downto 1) <= "0000000000000000000000000000000";
    or_ln949_2_i_reg_1580(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_CS_fsm_state24, grp_fu_351_p2, ap_CS_fsm_state25, and_ln169_1_fu_447_p2, ap_CS_fsm_state26, ap_CS_fsm_state27, grp_cordicCos_fix_fu_261_ap_done, ap_CS_fsm_state35, ap_block_state35_on_subcall_done, ap_CS_fsm_state43, ap_CS_fsm_state51, ap_CS_fsm_state52, grp_cordic360_Sin_fixed_fu_254_ap_done, ap_CS_fsm_state66, icmp_ln380_fu_1029_p2, icmp_ln367_fu_394_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln367_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((grp_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_lv1_1 = and_ln169_1_fu_447_p2) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((grp_cordicCos_fix_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_boolean_0 = ap_block_state35_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((grp_cordicCos_fix_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((grp_cordicCos_fix_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((grp_cordic360_Sin_fixed_fu_254_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((icmp_ln380_fu_1029_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_3_fu_753_p2 <= (icmp_ln947_6_fu_747_p2 and icmp_ln947_5_fu_716_p2);
    a_fu_632_p2 <= (icmp_ln947_fu_595_p2 and icmp_ln947_4_fu_626_p2);
    add_ln339_2_fu_1225_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_2_fu_1221_p1));
    add_ln339_fu_1096_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_1092_p1));
    add_ln386_1_fu_1351_p2 <= std_logic_vector(unsigned(add_ln386_fu_1345_p2) + unsigned(shl_ln386_fu_1333_p2));
    add_ln386_2_fu_1047_p2 <= std_logic_vector(unsigned(phi_mul_reg_243) + unsigned(zext_ln367_reg_1409));
    add_ln386_3_fu_1041_p2 <= std_logic_vector(unsigned(ap_const_lv15_168) + unsigned(phi_mul_reg_243));
    add_ln386_fu_1345_p2 <= std_logic_vector(unsigned(shl_ln386_1_fu_1339_p2) + unsigned(p_Val2_85_fu_1316_p3));
    add_ln949_2_fu_773_p2 <= std_logic_vector(signed(ap_const_lv8_E8) + signed(trunc_ln944_2_fu_696_p1));
    add_ln949_fu_652_p2 <= std_logic_vector(signed(ap_const_lv8_E8) + signed(trunc_ln944_fu_575_p1));
    add_ln958_2_fu_870_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_2_reg_1574));
    add_ln958_fu_815_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_1558));
    add_ln964_2_fu_988_p2 <= std_logic_vector(unsigned(sub_ln964_2_fu_983_p2) + unsigned(select_ln964_2_fu_976_p3));
    add_ln964_fu_937_p2 <= std_logic_vector(unsigned(sub_ln964_fu_932_p2) + unsigned(select_ln964_fu_925_p3));
    and_ln169_1_fu_447_p2 <= (grp_fu_343_p2 and and_ln169_fu_442_p2);
    and_ln169_fu_442_p2 <= (or_ln165_reg_1452 and grp_fu_336_p2);
    and_ln949_2_fu_786_p2 <= (xor_ln949_2_fu_767_p2 and p_Result_63_fu_779_p3);
    and_ln949_fu_665_p2 <= (xor_ln949_fu_646_p2 and p_Result_57_fu_658_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state35_on_subcall_done_assign_proc : process(grp_cordicCos_fix_fu_261_ap_done, ap_predicate_op181_call_state35)
    begin
                ap_block_state35_on_subcall_done <= ((grp_cordicCos_fix_fu_261_ap_done = ap_const_logic_0) and (ap_predicate_op181_call_state35 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7, icmp_ln367_fu_394_p2)
    begin
        if (((icmp_ln367_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op181_call_state35_assign_proc : process(and_ln165_reg_1458, and_ln167_reg_1462, and_ln169_1_reg_1466)
    begin
                ap_predicate_op181_call_state35 <= ((ap_const_lv1_1 = and_ln169_1_reg_1466) and (ap_const_lv1_0 = and_ln167_reg_1462) and (ap_const_lv1_0 = and_ln165_reg_1458));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln367_fu_394_p2)
    begin
        if (((icmp_ln367_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln165_fu_406_p1 <= tmp_i_i_reg_1444;
    bitcast_ln739_2_fu_1013_p1 <= p_Result_80_fu_1001_p5;
    bitcast_ln739_fu_962_p1 <= p_Result_77_fu_950_p5;
    grp_cordic360_Sin_fixed_fu_254_ap_start <= grp_cordic360_Sin_fixed_fu_254_ap_start_reg;
    grp_cordicCos_fix_fu_261_ap_start <= grp_cordicCos_fix_fu_261_ap_start_reg;

    grp_cordicCos_fix_fu_261_x_assign_proc : process(reg_361, x_assign_reg_1437, ap_CS_fsm_state27, tmp_59_i_i_reg_1475, ap_CS_fsm_state35, ap_predicate_op181_call_state35, ap_CS_fsm_state43, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            grp_cordicCos_fix_fu_261_x <= reg_361;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_predicate_op181_call_state35 = ap_const_boolean_1))) then 
            grp_cordicCos_fix_fu_261_x <= tmp_59_i_i_reg_1475;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_cordicCos_fix_fu_261_x <= x_assign_reg_1437;
        else 
            grp_cordicCos_fix_fu_261_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_268_opcode_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state76, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_268_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            grp_fu_268_opcode <= ap_const_lv2_0;
        else 
            grp_fu_268_opcode <= "XX";
        end if; 
    end process;


    grp_fu_268_p0_assign_proc : process(reg_366, tmp_i_reg_1385, ap_CS_fsm_state61, ap_CS_fsm_state76, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_268_p0 <= reg_366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_268_p0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_268_p0 <= tmp_i_reg_1385;
        else 
            grp_fu_268_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_268_p1_assign_proc : process(reg_366, tmp_34_i_reg_1680, ap_CS_fsm_state61, ap_CS_fsm_state76, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_268_p1 <= tmp_34_i_reg_1680;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            grp_fu_268_p1 <= reg_366;
        else 
            grp_fu_268_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_272_p0_assign_proc : process(tmp_i_reg_1385, tmp_36_i_reg_1685, ap_CS_fsm_state61, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_272_p0 <= tmp_36_i_reg_1685;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_272_p0 <= tmp_i_reg_1385;
        else 
            grp_fu_272_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_p0_assign_proc : process(reg_366, reg_379, tmp_i_45_reg_1391, tmp_31_i_reg_1675, ap_CS_fsm_state76, ap_CS_fsm_state57, ap_CS_fsm_state72, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_fu_285_p0 <= reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_285_p0 <= reg_366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_285_p0 <= tmp_31_i_reg_1675;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_285_p0 <= tmp_i_45_reg_1391;
        else 
            grp_fu_285_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_p1_assign_proc : process(tempCos_reg_1610, temp1_reg_1632, temp2_reg_1637, ap_CS_fsm_state76, ap_CS_fsm_state57, ap_CS_fsm_state72, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_fu_285_p1 <= temp1_reg_1632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_285_p1 <= temp2_reg_1637;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_285_p1 <= ap_const_lv32_3C800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_285_p1 <= tempCos_reg_1610;
        else 
            grp_fu_285_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_289_p0_assign_proc : process(reg_366, reg_379, tmp_22_i_reg_1397, ap_CS_fsm_state76, ap_CS_fsm_state57, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_fu_289_p0 <= reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_289_p0 <= reg_366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_289_p0 <= tmp_22_i_reg_1397;
        else 
            grp_fu_289_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_289_p1_assign_proc : process(tempCos_reg_1610, temp3_reg_1642, temp4_reg_1647, ap_CS_fsm_state76, ap_CS_fsm_state57, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_fu_289_p1 <= temp3_reg_1642;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_289_p1 <= temp4_reg_1647;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_289_p1 <= tempCos_reg_1610;
        else 
            grp_fu_289_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_302_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state66, ap_CS_fsm_state71, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_302_ce <= ap_const_logic_1;
        else 
            grp_fu_302_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_302_p0_assign_proc : process(ap_CS_fsm_state1, p_read, zext_ln380_fu_1024_p1, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_302_p0 <= zext_ln380_fu_1024_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_302_p0 <= p_read;
        else 
            grp_fu_302_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_306_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_306_ce <= ap_const_logic_1;
        else 
            grp_fu_306_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_310_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_310_ce <= ap_const_logic_1;
        else 
            grp_fu_310_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_314_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_314_ce <= ap_const_logic_1;
        else 
            grp_fu_314_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_318_p0_assign_proc : process(reg_356, tmp_25_i_reg_1432, ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state40, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_318_p0 <= reg_356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_318_p0 <= tmp_25_i_reg_1432;
        else 
            grp_fu_318_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_324_p1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_324_p1 <= ap_const_lv64_400921FB54442D11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_324_p1 <= ap_const_lv64_C00921FB54442D11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_324_p1 <= ap_const_lv64_C01921FB54442D18;
        else 
            grp_fu_324_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_336_opcode_assign_proc : process(ap_CS_fsm_state24, grp_fu_351_p2, ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if ((((grp_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((grp_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            grp_fu_336_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_336_opcode <= ap_const_lv5_3;
        else 
            grp_fu_336_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_336_p1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_336_p1 <= ap_const_lv64_C00921FB54442D11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_336_p1 <= ap_const_lv64_3FF921FB54524550;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_336_p1 <= ap_const_lv64_4012D97C7F3321D2;
        else 
            grp_fu_336_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_348_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(theta_0_i_reg_207),32));

    grp_fu_351_p0_assign_proc : process(or_ln165_fu_435_p2, or_ln165_reg_1452, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_351_p0 <= or_ln165_reg_1452;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_351_p0 <= or_ln165_fu_435_p2;
        else 
            grp_fu_351_p0 <= "X";
        end if; 
    end process;

    grp_fu_351_p2 <= (grp_fu_351_p0 and grp_fu_336_p2);
    icmp_ln165_1_fu_429_p2 <= "1" when (trunc_ln165_fu_419_p1 = ap_const_lv52_0) else "0";
    icmp_ln165_fu_423_p2 <= "0" when (tmp_s_fu_409_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln367_fu_394_p2 <= "1" when (theta_0_i_reg_207 = ap_const_lv9_168) else "0";
    icmp_ln380_fu_1029_p2 <= "1" when (r_0_i_reg_232 = ap_const_lv7_40) else "0";
    icmp_ln935_2_fu_524_p2 <= "1" when (tmp_V_38_reg_1501 = ap_const_lv8_0) else "0";
    icmp_ln935_fu_475_p2 <= "1" when (tmp_V_36_reg_218 = ap_const_lv8_0) else "0";
    icmp_ln947_4_fu_626_p2 <= "0" when (p_Result_56_fu_621_p2 = ap_const_lv8_0) else "1";
    icmp_ln947_5_fu_716_p2 <= "1" when (signed(tmp_39_fu_706_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln947_6_fu_747_p2 <= "0" when (p_Result_62_fu_742_p2 = ap_const_lv8_0) else "1";
    icmp_ln947_fu_595_p2 <= "1" when (signed(tmp_fu_585_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_2_fu_806_p2 <= "1" when (signed(lsb_index_3_fu_700_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_fu_685_p2 <= "1" when (signed(lsb_index_fu_579_p2) > signed(ap_const_lv32_0)) else "0";
    image_in_address0 <= sext_ln386_fu_1357_p1(17 - 1 downto 0);

    image_in_ce0_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            image_in_ce0 <= ap_const_logic_1;
        else 
            image_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    image_out_address0 <= zext_ln386_fu_1361_p1(15 - 1 downto 0);

    image_out_ce0_assign_proc : process(ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            image_out_ce0 <= ap_const_logic_1;
        else 
            image_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    image_out_d0 <= image_in_q0;

    image_out_we0_assign_proc : process(ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            image_out_we0 <= ap_const_logic_1;
        else 
            image_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_2_fu_1231_p3 <= add_ln339_2_fu_1225_p2(8 downto 8);
    isNeg_fu_1102_p3 <= add_ln339_fu_1096_p2(8 downto 8);
    
    l_3_fu_558_p3_proc : process(p_Result_79_fu_550_p3)
    begin
        l_3_fu_558_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_79_fu_550_p3(i) = '1' then
                l_3_fu_558_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_512_p3_proc : process(p_Result_76_fu_504_p3)
    begin
        l_fu_512_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_76_fu_504_p3(i) = '1' then
                l_fu_512_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_3_fu_700_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_2_fu_691_p2));
    lsb_index_fu_579_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_570_p2));
    lshr_ln947_2_fu_736_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln947_2_fu_732_p1(8-1 downto 0)))));
    lshr_ln947_fu_615_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln947_fu_611_p1(8-1 downto 0)))));
    lshr_ln958_2_fu_875_p2 <= std_logic_vector(shift_right(unsigned(m_37_fu_867_p1),to_integer(unsigned('0' & add_ln958_2_fu_870_p2(31-1 downto 0)))));
    lshr_ln958_fu_820_p2 <= std_logic_vector(shift_right(unsigned(m_fu_812_p1),to_integer(unsigned('0' & add_ln958_fu_815_p2(31-1 downto 0)))));
    m_31_fu_837_p3 <= 
        lshr_ln958_fu_820_p2 when (icmp_ln958_reg_1569(0) = '1') else 
        shl_ln958_fu_831_p2;
    m_34_fu_844_p2 <= std_logic_vector(unsigned(or_ln_i_reg_1564) + unsigned(m_31_fu_837_p3));
    m_37_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_39_reg_1541),32));
    m_38_fu_892_p3 <= 
        lshr_ln958_2_fu_875_p2 when (icmp_ln958_2_reg_1585(0) = '1') else 
        shl_ln958_2_fu_886_p2;
    m_39_fu_899_p2 <= std_logic_vector(unsigned(or_ln949_2_i_reg_1580) + unsigned(m_38_fu_892_p3));
    m_42_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_1590),32));
    m_43_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_1600),32));
    m_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_37_reg_1519),32));
    mantissa_V_2_fu_1207_p4 <= ((ap_const_lv1_1 & tmp_V_43_fu_1203_p1) & ap_const_lv1_0);
    mantissa_V_fu_1078_p4 <= ((ap_const_lv1_1 & tmp_V_41_fu_1074_p1) & ap_const_lv1_0);
    or_ln165_fu_435_p2 <= (icmp_ln165_fu_423_p2 or icmp_ln165_1_fu_429_p2);
    or_ln949_2_fu_792_p2 <= (and_ln949_2_fu_786_p2 or a_3_fu_753_p2);
    or_ln949_2_i_fu_798_p3 <= (ap_const_lv31_0 & or_ln949_2_fu_792_p2);
    or_ln949_fu_671_p2 <= (and_ln949_fu_665_p2 or a_fu_632_p2);
    or_ln_i_fu_677_p3 <= (ap_const_lv31_0 & or_ln949_fu_671_p2);
    p_Result_56_fu_621_p2 <= (tmp_V_37_reg_1519 and lshr_ln947_fu_615_p2);
    p_Result_57_fu_658_p3 <= tmp_V_37_reg_1519(to_integer(unsigned(add_ln949_fu_652_p2)) downto to_integer(unsigned(add_ln949_fu_652_p2))) when (to_integer(unsigned(add_ln949_fu_652_p2))>= 0 and to_integer(unsigned(add_ln949_fu_652_p2))<=7) else "-";
    
    p_Result_60_fu_540_p4_proc : process(tmp_V_39_fu_534_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable p_Result_60_fu_540_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := tmp_V_39_fu_534_p3;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for p_Result_60_fu_540_p4_i in 0 to 8-1 loop
                v0_cpy(p_Result_60_fu_540_p4_i) := tmp_V_39_fu_534_p3(8-1-p_Result_60_fu_540_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_60_fu_540_p4 <= resvalue(8-1 downto 0);
    end process;

    p_Result_62_fu_742_p2 <= (tmp_V_39_reg_1541 and lshr_ln947_2_fu_736_p2);
    p_Result_63_fu_779_p3 <= tmp_V_39_reg_1541(to_integer(unsigned(add_ln949_2_fu_773_p2)) downto to_integer(unsigned(add_ln949_2_fu_773_p2))) when (to_integer(unsigned(add_ln949_2_fu_773_p2))>= 0 and to_integer(unsigned(add_ln949_2_fu_773_p2))<=7) else "-";
    p_Result_76_fu_504_p3 <= (ap_const_lv24_FFFFFF & p_Result_s_fu_494_p4);
    p_Result_77_fu_950_p5 <= (tmp_41_i_fu_943_p3 & m_42_fu_922_p1(22 downto 0));
    p_Result_79_fu_550_p3 <= (ap_const_lv24_FFFFFF & p_Result_60_fu_540_p4);
    p_Result_80_fu_1001_p5 <= (tmp_43_i_fu_994_p3 & m_43_fu_973_p1(22 downto 0));
    
    p_Result_s_fu_494_p4_proc : process(tmp_V_37_fu_487_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable p_Result_s_fu_494_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := tmp_V_37_fu_487_p3;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for p_Result_s_fu_494_p4_i in 0 to 8-1 loop
                v0_cpy(p_Result_s_fu_494_p4_i) := tmp_V_37_fu_487_p3(8-1-p_Result_s_fu_494_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_494_p4 <= resvalue(8-1 downto 0);
    end process;

    p_Val2_74_fu_1052_p1 <= reg_379;
    p_Val2_79_fu_1182_p1 <= x_assign_7_reg_1690;
    p_Val2_84_fu_1174_p3 <= 
        zext_ln662_fu_1160_p1 when (isNeg_fu_1102_p3(0) = '1') else 
        tmp_5_fu_1164_p4;
    p_Val2_85_fu_1316_p3 <= 
        result_V_5_fu_1311_p2 when (p_Result_81_reg_1695(0) = '1') else 
        p_Val2_84_reg_1700;
    p_Val2_86_fu_1303_p3 <= 
        zext_ln662_2_fu_1289_p1 when (isNeg_2_fu_1231_p3(0) = '1') else 
        tmp_6_fu_1293_p4;
    p_Val2_87_fu_1327_p3 <= 
        result_V_7_fu_1322_p2 when (p_Result_82_reg_1706(0) = '1') else 
        p_Val2_86_reg_1711;
    r_V_14_fu_1146_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_1088_p1),to_integer(unsigned('0' & zext_ln1287_fu_1136_p1(31-1 downto 0)))));
    r_V_15_fu_1269_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_2_fu_1207_p4),to_integer(unsigned('0' & sext_ln1311_9_fu_1261_p1(25-1 downto 0)))));
    r_V_16_fu_1275_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_2_fu_1217_p1),to_integer(unsigned('0' & zext_ln1287_2_fu_1265_p1(31-1 downto 0)))));
    r_V_fu_1140_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_1078_p4),to_integer(unsigned('0' & sext_ln1311_8_fu_1132_p1(25-1 downto 0)))));
    r_fu_1035_p2 <= std_logic_vector(unsigned(r_0_i_reg_232) + unsigned(ap_const_lv7_1));
    result_V_5_fu_1311_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_84_reg_1700));
    result_V_7_fu_1322_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_86_reg_1711));
    select_ln964_2_fu_976_p3 <= 
        ap_const_lv8_7F when (tmp_41_reg_1605(0) = '1') else 
        ap_const_lv8_7E;
    select_ln964_fu_925_p3 <= 
        ap_const_lv8_7F when (tmp_37_reg_1595(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1311_5_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1120_p3),32));

        sext_ln1311_6_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_2_fu_1239_p2),9));

        sext_ln1311_7_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1249_p3),32));

        sext_ln1311_8_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1120_p3),25));

        sext_ln1311_9_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1249_p3),25));

        sext_ln1311_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_1110_p2),9));

        sext_ln386_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln386_1_reg_1717),64));

    shl_ln386_1_fu_1339_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_87_fu_1327_p3),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln386_fu_1333_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_87_fu_1327_p3),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln958_2_fu_886_p2 <= std_logic_vector(shift_left(unsigned(m_37_fu_867_p1),to_integer(unsigned('0' & sub_ln958_2_fu_881_p2(31-1 downto 0)))));
    shl_ln958_fu_831_p2 <= std_logic_vector(shift_left(unsigned(m_fu_812_p1),to_integer(unsigned('0' & sub_ln958_fu_826_p2(31-1 downto 0)))));
    sub_ln1311_2_fu_1239_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_42_fu_1193_p4));
    sub_ln1311_fu_1110_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_40_fu_1064_p4));
    sub_ln703_fu_453_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(grp_cordicCos_fix_fu_261_ap_return));
    sub_ln944_2_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) - unsigned(l_3_reg_1548));
    sub_ln944_fu_570_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) - unsigned(l_reg_1526));
    sub_ln947_2_fu_726_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) - unsigned(trunc_ln947_2_fu_722_p1));
    sub_ln947_fu_605_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) - unsigned(trunc_ln947_fu_601_p1));
    sub_ln958_2_fu_881_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_2_reg_1574));
    sub_ln958_fu_826_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_1558));
    sub_ln964_2_fu_983_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) - unsigned(trunc_ln943_2_reg_1553));
    sub_ln964_fu_932_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) - unsigned(trunc_ln943_reg_1531));
    tempCos_fu_966_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_1514(0) = '1') else 
        bitcast_ln739_fu_962_p1;
    tempSin_fu_1017_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_2_reg_1536(0) = '1') else 
        bitcast_ln739_2_fu_1013_p1;
    theta_fu_400_p2 <= std_logic_vector(unsigned(theta_0_i_reg_207) + unsigned(ap_const_lv9_1));
    tmp_36_fu_638_p3 <= lsb_index_fu_579_p2(31 downto 31);
    tmp_39_fu_706_p4 <= lsb_index_3_fu_700_p2(31 downto 1);
    tmp_40_fu_759_p3 <= lsb_index_3_fu_700_p2(31 downto 31);
    tmp_41_i_fu_943_p3 <= (p_Result_75_reg_1495 & add_ln964_fu_937_p2);
    tmp_43_i_fu_994_p3 <= (p_Result_78_reg_1508 & add_ln964_2_fu_988_p2);
    tmp_44_fu_1152_p3 <= r_V_fu_1140_p2(24 downto 24);
    tmp_47_fu_1281_p3 <= r_V_15_fu_1269_p2(24 downto 24);
    tmp_5_fu_1164_p4 <= r_V_14_fu_1146_p2(55 downto 24);
    tmp_6_fu_1293_p4 <= r_V_16_fu_1275_p2(55 downto 24);
    tmp_V_28_fu_529_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_V_38_reg_1501));
    tmp_V_37_fu_487_p3 <= 
        tmp_V_fu_481_p2 when (p_Result_75_reg_1495(0) = '1') else 
        tmp_V_36_reg_218;
    tmp_V_39_fu_534_p3 <= 
        tmp_V_28_fu_529_p2 when (p_Result_78_reg_1508(0) = '1') else 
        tmp_V_38_reg_1501;
    tmp_V_40_fu_1064_p4 <= p_Val2_74_fu_1052_p1(30 downto 23);
    tmp_V_41_fu_1074_p1 <= p_Val2_74_fu_1052_p1(23 - 1 downto 0);
    tmp_V_42_fu_1193_p4 <= p_Val2_79_fu_1182_p1(30 downto 23);
    tmp_V_43_fu_1203_p1 <= p_Val2_79_fu_1182_p1(23 - 1 downto 0);
    tmp_V_fu_481_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_V_36_reg_218));
    tmp_fu_585_p4 <= lsb_index_fu_579_p2(31 downto 1);
    tmp_s_fu_409_p4 <= bitcast_ln165_fu_406_p1(62 downto 52);
    trunc_ln165_fu_419_p1 <= bitcast_ln165_fu_406_p1(52 - 1 downto 0);
    trunc_ln943_2_fu_566_p1 <= l_3_fu_558_p3(8 - 1 downto 0);
    trunc_ln943_fu_520_p1 <= l_fu_512_p3(8 - 1 downto 0);
    trunc_ln944_2_fu_696_p1 <= sub_ln944_2_fu_691_p2(8 - 1 downto 0);
    trunc_ln944_fu_575_p1 <= sub_ln944_fu_570_p2(8 - 1 downto 0);
    trunc_ln947_2_fu_722_p1 <= sub_ln944_2_fu_691_p2(4 - 1 downto 0);
    trunc_ln947_fu_601_p1 <= sub_ln944_fu_570_p2(4 - 1 downto 0);
    ush_2_fu_1249_p3 <= 
        sext_ln1311_6_fu_1245_p1 when (isNeg_2_fu_1231_p3(0) = '1') else 
        add_ln339_2_fu_1225_p2;
    ush_fu_1120_p3 <= 
        sext_ln1311_fu_1116_p1 when (isNeg_fu_1102_p3(0) = '1') else 
        add_ln339_fu_1096_p2;
    xor_ln949_2_fu_767_p2 <= (tmp_40_fu_759_p3 xor ap_const_lv1_1);
    xor_ln949_fu_646_p2 <= (tmp_36_fu_638_p3 xor ap_const_lv1_1);
    zext_ln1287_2_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_7_fu_1257_p1),79));
    zext_ln1287_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_5_fu_1128_p1),79));
    zext_ln339_2_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_42_fu_1193_p4),9));
    zext_ln339_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_40_fu_1064_p4),9));
    zext_ln367_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(theta_0_i_reg_207),15));
    zext_ln380_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_i_reg_232),32));
    zext_ln386_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln386_2_reg_1670),64));
    zext_ln662_2_fu_1289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_1281_p3),32));
    zext_ln662_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_1152_p3),32));
    zext_ln682_2_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_2_fu_1207_p4),79));
    zext_ln682_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_1078_p4),79));
    zext_ln947_2_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_2_fu_726_p2),8));
    zext_ln947_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_605_p2),8));
end behav;
