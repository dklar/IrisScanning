-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity method1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    inputStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inputStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inputStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inputStream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inputStream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    inputStream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outputStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outputStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outputStream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_start : IN STD_LOGIC;
    inputStream_TVALID : IN STD_LOGIC;
    inputStream_TREADY : OUT STD_LOGIC;
    outputStream_TVALID : OUT STD_LOGIC;
    outputStream_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of method1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal imageIn_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal imageIn_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal imageOut_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal imageOut_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal method1_Block_proc_U0_ap_start : STD_LOGIC;
    signal method1_Block_proc_U0_ap_done : STD_LOGIC;
    signal method1_Block_proc_U0_ap_continue : STD_LOGIC;
    signal method1_Block_proc_U0_ap_idle : STD_LOGIC;
    signal method1_Block_proc_U0_ap_ready : STD_LOGIC;
    signal method1_Block_proc_U0_img0_rows_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal method1_Block_proc_U0_img0_rows_V_out_write : STD_LOGIC;
    signal method1_Block_proc_U0_img0_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal method1_Block_proc_U0_img0_cols_V_out_write : STD_LOGIC;
    signal method1_Block_proc_U0_img4_rows_V_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal method1_Block_proc_U0_img4_rows_V_out_write : STD_LOGIC;
    signal method1_Block_proc_U0_img4_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal method1_Block_proc_U0_img4_cols_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_inputStream_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal AXIvideo2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal AXIvideo2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal CvtColor_U0_ap_start : STD_LOGIC;
    signal CvtColor_U0_ap_done : STD_LOGIC;
    signal CvtColor_U0_ap_continue : STD_LOGIC;
    signal CvtColor_U0_ap_idle : STD_LOGIC;
    signal CvtColor_U0_ap_ready : STD_LOGIC;
    signal CvtColor_U0_start_out : STD_LOGIC;
    signal CvtColor_U0_start_write : STD_LOGIC;
    signal CvtColor_U0_p_src_rows_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_cols_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal findPupil_U0_ap_start : STD_LOGIC;
    signal findPupil_U0_ap_done : STD_LOGIC;
    signal findPupil_U0_ap_continue : STD_LOGIC;
    signal findPupil_U0_ap_idle : STD_LOGIC;
    signal findPupil_U0_ap_ready : STD_LOGIC;
    signal findPupil_U0_start_out : STD_LOGIC;
    signal findPupil_U0_start_write : STD_LOGIC;
    signal findPupil_U0_img_data_stream_V_read : STD_LOGIC;
    signal findPupil_U0_dst_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal findPupil_U0_dst_img_data_stream_V_write : STD_LOGIC;
    signal findPupil_U0_r_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal findPupil_U0_r_out_write : STD_LOGIC;
    signal findPupil_U0_x_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal findPupil_U0_x_out_write : STD_LOGIC;
    signal findPupil_U0_y_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal findPupil_U0_y_out_write : STD_LOGIC;
    signal find_iris_high_accur_U0_ap_start : STD_LOGIC;
    signal find_iris_high_accur_U0_ap_done : STD_LOGIC;
    signal find_iris_high_accur_U0_ap_continue : STD_LOGIC;
    signal find_iris_high_accur_U0_ap_idle : STD_LOGIC;
    signal find_iris_high_accur_U0_ap_ready : STD_LOGIC;
    signal find_iris_high_accur_U0_start_out : STD_LOGIC;
    signal find_iris_high_accur_U0_start_write : STD_LOGIC;
    signal find_iris_high_accur_U0_img_data_stream_V_read : STD_LOGIC;
    signal find_iris_high_accur_U0_x_read : STD_LOGIC;
    signal find_iris_high_accur_U0_y_read : STD_LOGIC;
    signal find_iris_high_accur_U0_dst_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal find_iris_high_accur_U0_dst_img_data_stream_V_write : STD_LOGIC;
    signal find_iris_high_accur_U0_x_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal find_iris_high_accur_U0_x_out_write : STD_LOGIC;
    signal find_iris_high_accur_U0_y_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal find_iris_high_accur_U0_y_out_write : STD_LOGIC;
    signal find_iris_high_accur_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_r2 : STD_LOGIC;
    signal r2_full_n : STD_LOGIC;
    signal Mat2Array_U0_ap_start : STD_LOGIC;
    signal Mat2Array_U0_ap_done : STD_LOGIC;
    signal Mat2Array_U0_ap_continue : STD_LOGIC;
    signal Mat2Array_U0_ap_idle : STD_LOGIC;
    signal Mat2Array_U0_ap_ready : STD_LOGIC;
    signal Mat2Array_U0_img_data_stream_V_read : STD_LOGIC;
    signal Mat2Array_U0_fb_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal Mat2Array_U0_fb_ce0 : STD_LOGIC;
    signal Mat2Array_U0_fb_we0 : STD_LOGIC;
    signal Mat2Array_U0_fb_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_imageIn : STD_LOGIC;
    signal Mat2Array_U0_fb_full_n : STD_LOGIC;
    signal writeValues_U0_ap_start : STD_LOGIC;
    signal writeValues_U0_ap_done : STD_LOGIC;
    signal writeValues_U0_ap_continue : STD_LOGIC;
    signal writeValues_U0_ap_idle : STD_LOGIC;
    signal writeValues_U0_ap_ready : STD_LOGIC;
    signal writeValues_U0_x_read : STD_LOGIC;
    signal writeValues_U0_y_read : STD_LOGIC;
    signal writeValues_U0_r1_read : STD_LOGIC;
    signal writeValues_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal writeValues_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal writeValues_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal writeValues_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_val_3_channel : STD_LOGIC;
    signal val_3_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_val_3_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_val_3_channel : STD_LOGIC;
    signal ap_channel_done_val_2_channel : STD_LOGIC;
    signal val_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_val_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_val_2_channel : STD_LOGIC;
    signal ap_channel_done_val_1_channel : STD_LOGIC;
    signal val_1_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_val_1_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_val_1_channel : STD_LOGIC;
    signal ap_channel_done_val_0_channel : STD_LOGIC;
    signal val_0_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_val_0_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_val_0_channel : STD_LOGIC;
    signal core_low_U0_ap_start : STD_LOGIC;
    signal core_low_U0_ap_done : STD_LOGIC;
    signal core_low_U0_ap_continue : STD_LOGIC;
    signal core_low_U0_ap_idle : STD_LOGIC;
    signal core_low_U0_ap_ready : STD_LOGIC;
    signal core_low_U0_image_in_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal core_low_U0_image_in_ce0 : STD_LOGIC;
    signal core_low_U0_image_out_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal core_low_U0_image_out_ce0 : STD_LOGIC;
    signal core_low_U0_image_out_we0 : STD_LOGIC;
    signal core_low_U0_image_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_imageOut : STD_LOGIC;
    signal core_low_U0_image_out_full_n : STD_LOGIC;
    signal Array2Mat_U0_ap_start : STD_LOGIC;
    signal Array2Mat_U0_ap_done : STD_LOGIC;
    signal Array2Mat_U0_ap_continue : STD_LOGIC;
    signal Array2Mat_U0_ap_idle : STD_LOGIC;
    signal Array2Mat_U0_ap_ready : STD_LOGIC;
    signal Array2Mat_U0_start_out : STD_LOGIC;
    signal Array2Mat_U0_start_write : STD_LOGIC;
    signal Array2Mat_U0_fb_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal Array2Mat_U0_fb_ce0 : STD_LOGIC;
    signal Array2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal Array2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal Array2Mat_U0_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Array2Mat_U0_img_data_stream_V_write : STD_LOGIC;
    signal Array2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Array2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal Array2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Array2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal CvtColor_1_U0_ap_start : STD_LOGIC;
    signal CvtColor_1_U0_ap_done : STD_LOGIC;
    signal CvtColor_1_U0_ap_continue : STD_LOGIC;
    signal CvtColor_1_U0_ap_idle : STD_LOGIC;
    signal CvtColor_1_U0_ap_ready : STD_LOGIC;
    signal CvtColor_1_U0_start_out : STD_LOGIC;
    signal CvtColor_1_U0_start_write : STD_LOGIC;
    signal CvtColor_1_U0_p_src_rows_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_src_cols_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_outputStream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIvideo_U0_outputStream_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_outputStream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_outputStream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_outputStream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_outputStream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_outputStream_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_outputStream_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal imageIn_i_full_n : STD_LOGIC;
    signal imageIn_t_empty_n : STD_LOGIC;
    signal imageOut_i_full_n : STD_LOGIC;
    signal imageOut_t_empty_n : STD_LOGIC;
    signal img0_rows_V_c_full_n : STD_LOGIC;
    signal img0_rows_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img0_rows_V_c_empty_n : STD_LOGIC;
    signal img0_cols_V_c_full_n : STD_LOGIC;
    signal img0_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img0_cols_V_c_empty_n : STD_LOGIC;
    signal img4_rows_V_c_full_n : STD_LOGIC;
    signal img4_rows_V_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img4_rows_V_c_empty_n : STD_LOGIC;
    signal img4_cols_V_c_full_n : STD_LOGIC;
    signal img4_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img4_cols_V_c_empty_n : STD_LOGIC;
    signal img0_data_stream_0_s_full_n : STD_LOGIC;
    signal img0_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img0_data_stream_0_s_empty_n : STD_LOGIC;
    signal img0_data_stream_1_s_full_n : STD_LOGIC;
    signal img0_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img0_data_stream_1_s_empty_n : STD_LOGIC;
    signal img0_data_stream_2_s_full_n : STD_LOGIC;
    signal img0_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img0_data_stream_2_s_empty_n : STD_LOGIC;
    signal img0_rows_V_c16_full_n : STD_LOGIC;
    signal img0_rows_V_c16_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img0_rows_V_c16_empty_n : STD_LOGIC;
    signal img0_cols_V_c17_full_n : STD_LOGIC;
    signal img0_cols_V_c17_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img0_cols_V_c17_empty_n : STD_LOGIC;
    signal img1_data_stream_0_s_full_n : STD_LOGIC;
    signal img1_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img1_data_stream_0_s_empty_n : STD_LOGIC;
    signal img2_data_stream_0_s_full_n : STD_LOGIC;
    signal img2_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img2_data_stream_0_s_empty_n : STD_LOGIC;
    signal r1_c_full_n : STD_LOGIC;
    signal r1_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal r1_c_empty_n : STD_LOGIC;
    signal x_c_full_n : STD_LOGIC;
    signal x_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal x_c_empty_n : STD_LOGIC;
    signal y_c_full_n : STD_LOGIC;
    signal y_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_c_empty_n : STD_LOGIC;
    signal img3_data_stream_0_s_full_n : STD_LOGIC;
    signal img3_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img3_data_stream_0_s_empty_n : STD_LOGIC;
    signal x_c18_full_n : STD_LOGIC;
    signal x_c18_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal x_c18_empty_n : STD_LOGIC;
    signal y_c19_full_n : STD_LOGIC;
    signal y_c19_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_c19_empty_n : STD_LOGIC;
    signal r2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal r2_empty_n : STD_LOGIC;
    signal val_0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_0_channel_empty_n : STD_LOGIC;
    signal val_1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_channel_empty_n : STD_LOGIC;
    signal val_2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_2_channel_empty_n : STD_LOGIC;
    signal val_3_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal val_3_channel_empty_n : STD_LOGIC;
    signal img4_data_stream_0_s_full_n : STD_LOGIC;
    signal img4_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img4_data_stream_0_s_empty_n : STD_LOGIC;
    signal img4_rows_V_c20_full_n : STD_LOGIC;
    signal img4_rows_V_c20_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img4_rows_V_c20_empty_n : STD_LOGIC;
    signal img4_cols_V_c21_full_n : STD_LOGIC;
    signal img4_cols_V_c21_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal img4_cols_V_c21_empty_n : STD_LOGIC;
    signal img5_data_stream_0_s_full_n : STD_LOGIC;
    signal img5_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img5_data_stream_0_s_empty_n : STD_LOGIC;
    signal img5_data_stream_1_s_full_n : STD_LOGIC;
    signal img5_data_stream_1_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img5_data_stream_1_s_empty_n : STD_LOGIC;
    signal img5_data_stream_2_s_full_n : STD_LOGIC;
    signal img5_data_stream_2_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img5_data_stream_2_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_method1_Block_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_method1_Block_proc_U0_ap_ready : STD_LOGIC;
    signal method1_Block_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal method1_Block_proc_U0_start_full_n : STD_LOGIC;
    signal method1_Block_proc_U0_start_write : STD_LOGIC;
    signal start_for_CvtColor_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_empty_n : STD_LOGIC;
    signal start_for_findPupil_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_findPupil_U0_full_n : STD_LOGIC;
    signal start_for_findPupil_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_findPupil_U0_empty_n : STD_LOGIC;
    signal start_for_find_iris_high_accur_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_find_iris_high_accur_U0_full_n : STD_LOGIC;
    signal start_for_find_iris_high_accur_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_find_iris_high_accur_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2Array_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2Array_U0_full_n : STD_LOGIC;
    signal start_for_Mat2Array_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2Array_U0_empty_n : STD_LOGIC;
    signal Mat2Array_U0_start_full_n : STD_LOGIC;
    signal Mat2Array_U0_start_write : STD_LOGIC;
    signal writeValues_U0_start_full_n : STD_LOGIC;
    signal writeValues_U0_start_write : STD_LOGIC;
    signal core_low_U0_start_full_n : STD_LOGIC;
    signal core_low_U0_start_write : STD_LOGIC;
    signal start_for_CvtColor_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_1_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_1_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component method1_Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img0_rows_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img0_rows_V_out_full_n : IN STD_LOGIC;
        img0_rows_V_out_write : OUT STD_LOGIC;
        img0_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img0_cols_V_out_full_n : IN STD_LOGIC;
        img0_cols_V_out_write : OUT STD_LOGIC;
        img4_rows_V_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img4_rows_V_out_full_n : IN STD_LOGIC;
        img4_rows_V_out_write : OUT STD_LOGIC;
        img4_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img4_cols_V_out_full_n : IN STD_LOGIC;
        img4_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        inputStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        inputStream_TVALID : IN STD_LOGIC;
        inputStream_TREADY : OUT STD_LOGIC;
        inputStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        inputStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        inputStream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inputStream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        inputStream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component findPupil IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        dst_img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_img_data_stream_V_full_n : IN STD_LOGIC;
        dst_img_data_stream_V_write : OUT STD_LOGIC;
        r_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_out_full_n : IN STD_LOGIC;
        r_out_write : OUT STD_LOGIC;
        x_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_out_full_n : IN STD_LOGIC;
        x_out_write : OUT STD_LOGIC;
        y_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_out_full_n : IN STD_LOGIC;
        y_out_write : OUT STD_LOGIC );
    end component;


    component find_iris_high_accur IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        x_empty_n : IN STD_LOGIC;
        x_read : OUT STD_LOGIC;
        y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_empty_n : IN STD_LOGIC;
        y_read : OUT STD_LOGIC;
        dst_img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_img_data_stream_V_full_n : IN STD_LOGIC;
        dst_img_data_stream_V_write : OUT STD_LOGIC;
        x_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_out_full_n : IN STD_LOGIC;
        x_out_write : OUT STD_LOGIC;
        y_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_out_full_n : IN STD_LOGIC;
        y_out_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Mat2Array IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        fb_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        fb_ce0 : OUT STD_LOGIC;
        fb_we0 : OUT STD_LOGIC;
        fb_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component writeValues IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        x_empty_n : IN STD_LOGIC;
        x_read : OUT STD_LOGIC;
        y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_empty_n : IN STD_LOGIC;
        y_read : OUT STD_LOGIC;
        r1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        r1_empty_n : IN STD_LOGIC;
        r1_read : OUT STD_LOGIC;
        r2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component core_low IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        image_in_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        image_in_ce0 : OUT STD_LOGIC;
        image_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        image_out_ce0 : OUT STD_LOGIC;
        image_out_we0 : OUT STD_LOGIC;
        image_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Array2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fb_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        fb_ce0 : OUT STD_LOGIC;
        fb_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component CvtColor_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        outputStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputStream_TVALID : OUT STD_LOGIC;
        outputStream_TREADY : IN STD_LOGIC;
        outputStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        outputStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        outputStream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        outputStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        outputStream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        outputStream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component method1_imageIn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component method1_imageOut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColoudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_findPupvdy IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_find_irwdI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2ArrxdS IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColoyd2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIzec IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    imageIn_U : component method1_imageIn
    generic map (
        DataWidth => 8,
        AddressRange => 89600,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Mat2Array_U0_fb_address0,
        i_ce0 => Mat2Array_U0_fb_ce0,
        i_we0 => Mat2Array_U0_fb_we0,
        i_d0 => Mat2Array_U0_fb_d0,
        i_q0 => imageIn_i_q0,
        t_address0 => core_low_U0_image_in_address0,
        t_ce0 => core_low_U0_image_in_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => imageIn_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => imageIn_i_full_n,
        i_write => Mat2Array_U0_ap_done,
        t_empty_n => imageIn_t_empty_n,
        t_read => core_low_U0_ap_ready);

    imageOut_U : component method1_imageOut
    generic map (
        DataWidth => 8,
        AddressRange => 23040,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => core_low_U0_image_out_address0,
        i_ce0 => core_low_U0_image_out_ce0,
        i_we0 => core_low_U0_image_out_we0,
        i_d0 => core_low_U0_image_out_d0,
        i_q0 => imageOut_i_q0,
        t_address0 => Array2Mat_U0_fb_address0,
        t_ce0 => Array2Mat_U0_fb_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => imageOut_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => imageOut_i_full_n,
        i_write => core_low_U0_ap_done,
        t_empty_n => imageOut_t_empty_n,
        t_read => Array2Mat_U0_ap_ready);

    method1_Block_proc_U0 : component method1_Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => method1_Block_proc_U0_ap_start,
        ap_done => method1_Block_proc_U0_ap_done,
        ap_continue => method1_Block_proc_U0_ap_continue,
        ap_idle => method1_Block_proc_U0_ap_idle,
        ap_ready => method1_Block_proc_U0_ap_ready,
        img0_rows_V_out_din => method1_Block_proc_U0_img0_rows_V_out_din,
        img0_rows_V_out_full_n => img0_rows_V_c_full_n,
        img0_rows_V_out_write => method1_Block_proc_U0_img0_rows_V_out_write,
        img0_cols_V_out_din => method1_Block_proc_U0_img0_cols_V_out_din,
        img0_cols_V_out_full_n => img0_cols_V_c_full_n,
        img0_cols_V_out_write => method1_Block_proc_U0_img0_cols_V_out_write,
        img4_rows_V_out_din => method1_Block_proc_U0_img4_rows_V_out_din,
        img4_rows_V_out_full_n => img4_rows_V_c_full_n,
        img4_rows_V_out_write => method1_Block_proc_U0_img4_rows_V_out_write,
        img4_cols_V_out_din => method1_Block_proc_U0_img4_cols_V_out_din,
        img4_cols_V_out_full_n => img4_cols_V_c_full_n,
        img4_cols_V_out_write => method1_Block_proc_U0_img4_cols_V_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_CvtColor_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        inputStream_TDATA => inputStream_TDATA,
        inputStream_TVALID => inputStream_TVALID,
        inputStream_TREADY => AXIvideo2Mat_U0_inputStream_TREADY,
        inputStream_TKEEP => inputStream_TKEEP,
        inputStream_TSTRB => inputStream_TSTRB,
        inputStream_TUSER => inputStream_TUSER,
        inputStream_TLAST => inputStream_TLAST,
        inputStream_TID => inputStream_TID,
        inputStream_TDEST => inputStream_TDEST,
        img_rows_V_dout => img0_rows_V_c_dout,
        img_rows_V_empty_n => img0_rows_V_c_empty_n,
        img_rows_V_read => AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => img0_cols_V_c_dout,
        img_cols_V_empty_n => img0_cols_V_c_empty_n,
        img_cols_V_read => AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img0_data_stream_0_s_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img0_data_stream_1_s_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img0_data_stream_2_s_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        img_rows_V_out_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => img0_rows_V_c16_full_n,
        img_rows_V_out_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => img0_cols_V_c17_full_n,
        img_cols_V_out_write => AXIvideo2Mat_U0_img_cols_V_out_write);

    CvtColor_U0 : component CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => CvtColor_U0_ap_start,
        start_full_n => start_for_findPupil_U0_full_n,
        ap_done => CvtColor_U0_ap_done,
        ap_continue => CvtColor_U0_ap_continue,
        ap_idle => CvtColor_U0_ap_idle,
        ap_ready => CvtColor_U0_ap_ready,
        start_out => CvtColor_U0_start_out,
        start_write => CvtColor_U0_start_write,
        p_src_rows_V_dout => img0_rows_V_c16_dout,
        p_src_rows_V_empty_n => img0_rows_V_c16_empty_n,
        p_src_rows_V_read => CvtColor_U0_p_src_rows_V_read,
        p_src_cols_V_dout => img0_cols_V_c17_dout,
        p_src_cols_V_empty_n => img0_cols_V_c17_empty_n,
        p_src_cols_V_read => CvtColor_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => img0_data_stream_0_s_dout,
        p_src_data_stream_0_V_empty_n => img0_data_stream_0_s_empty_n,
        p_src_data_stream_0_V_read => CvtColor_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img0_data_stream_1_s_dout,
        p_src_data_stream_1_V_empty_n => img0_data_stream_1_s_empty_n,
        p_src_data_stream_1_V_read => CvtColor_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img0_data_stream_2_s_dout,
        p_src_data_stream_2_V_empty_n => img0_data_stream_2_s_empty_n,
        p_src_data_stream_2_V_read => CvtColor_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_V_din => CvtColor_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => img1_data_stream_0_s_full_n,
        p_dst_data_stream_V_write => CvtColor_U0_p_dst_data_stream_V_write);

    findPupil_U0 : component findPupil
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => findPupil_U0_ap_start,
        start_full_n => start_for_find_iris_high_accur_U0_full_n,
        ap_done => findPupil_U0_ap_done,
        ap_continue => findPupil_U0_ap_continue,
        ap_idle => findPupil_U0_ap_idle,
        ap_ready => findPupil_U0_ap_ready,
        start_out => findPupil_U0_start_out,
        start_write => findPupil_U0_start_write,
        img_data_stream_V_dout => img1_data_stream_0_s_dout,
        img_data_stream_V_empty_n => img1_data_stream_0_s_empty_n,
        img_data_stream_V_read => findPupil_U0_img_data_stream_V_read,
        dst_img_data_stream_V_din => findPupil_U0_dst_img_data_stream_V_din,
        dst_img_data_stream_V_full_n => img2_data_stream_0_s_full_n,
        dst_img_data_stream_V_write => findPupil_U0_dst_img_data_stream_V_write,
        r_out_din => findPupil_U0_r_out_din,
        r_out_full_n => r1_c_full_n,
        r_out_write => findPupil_U0_r_out_write,
        x_out_din => findPupil_U0_x_out_din,
        x_out_full_n => x_c_full_n,
        x_out_write => findPupil_U0_x_out_write,
        y_out_din => findPupil_U0_y_out_din,
        y_out_full_n => y_c_full_n,
        y_out_write => findPupil_U0_y_out_write);

    find_iris_high_accur_U0 : component find_iris_high_accur
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => find_iris_high_accur_U0_ap_start,
        start_full_n => start_for_Mat2Array_U0_full_n,
        ap_done => find_iris_high_accur_U0_ap_done,
        ap_continue => find_iris_high_accur_U0_ap_continue,
        ap_idle => find_iris_high_accur_U0_ap_idle,
        ap_ready => find_iris_high_accur_U0_ap_ready,
        start_out => find_iris_high_accur_U0_start_out,
        start_write => find_iris_high_accur_U0_start_write,
        img_data_stream_V_dout => img2_data_stream_0_s_dout,
        img_data_stream_V_empty_n => img2_data_stream_0_s_empty_n,
        img_data_stream_V_read => find_iris_high_accur_U0_img_data_stream_V_read,
        x_dout => x_c_dout,
        x_empty_n => x_c_empty_n,
        x_read => find_iris_high_accur_U0_x_read,
        y_dout => y_c_dout,
        y_empty_n => y_c_empty_n,
        y_read => find_iris_high_accur_U0_y_read,
        dst_img_data_stream_V_din => find_iris_high_accur_U0_dst_img_data_stream_V_din,
        dst_img_data_stream_V_full_n => img3_data_stream_0_s_full_n,
        dst_img_data_stream_V_write => find_iris_high_accur_U0_dst_img_data_stream_V_write,
        x_out_din => find_iris_high_accur_U0_x_out_din,
        x_out_full_n => x_c18_full_n,
        x_out_write => find_iris_high_accur_U0_x_out_write,
        y_out_din => find_iris_high_accur_U0_y_out_din,
        y_out_full_n => y_c19_full_n,
        y_out_write => find_iris_high_accur_U0_y_out_write,
        ap_return => find_iris_high_accur_U0_ap_return);

    Mat2Array_U0 : component Mat2Array
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Mat2Array_U0_ap_start,
        ap_done => Mat2Array_U0_ap_done,
        ap_continue => Mat2Array_U0_ap_continue,
        ap_idle => Mat2Array_U0_ap_idle,
        ap_ready => Mat2Array_U0_ap_ready,
        img_data_stream_V_dout => img3_data_stream_0_s_dout,
        img_data_stream_V_empty_n => img3_data_stream_0_s_empty_n,
        img_data_stream_V_read => Mat2Array_U0_img_data_stream_V_read,
        fb_address0 => Mat2Array_U0_fb_address0,
        fb_ce0 => Mat2Array_U0_fb_ce0,
        fb_we0 => Mat2Array_U0_fb_we0,
        fb_d0 => Mat2Array_U0_fb_d0);

    writeValues_U0 : component writeValues
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writeValues_U0_ap_start,
        ap_done => writeValues_U0_ap_done,
        ap_continue => writeValues_U0_ap_continue,
        ap_idle => writeValues_U0_ap_idle,
        ap_ready => writeValues_U0_ap_ready,
        x_dout => x_c18_dout,
        x_empty_n => x_c18_empty_n,
        x_read => writeValues_U0_x_read,
        y_dout => y_c19_dout,
        y_empty_n => y_c19_empty_n,
        y_read => writeValues_U0_y_read,
        r1_dout => r1_c_dout,
        r1_empty_n => r1_c_empty_n,
        r1_read => writeValues_U0_r1_read,
        r2 => r2_dout,
        ap_return_0 => writeValues_U0_ap_return_0,
        ap_return_1 => writeValues_U0_ap_return_1,
        ap_return_2 => writeValues_U0_ap_return_2,
        ap_return_3 => writeValues_U0_ap_return_3);

    core_low_U0 : component core_low
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => core_low_U0_ap_start,
        ap_done => core_low_U0_ap_done,
        ap_continue => core_low_U0_ap_continue,
        ap_idle => core_low_U0_ap_idle,
        ap_ready => core_low_U0_ap_ready,
        image_in_address0 => core_low_U0_image_in_address0,
        image_in_ce0 => core_low_U0_image_in_ce0,
        image_in_q0 => imageIn_t_q0,
        image_out_address0 => core_low_U0_image_out_address0,
        image_out_ce0 => core_low_U0_image_out_ce0,
        image_out_we0 => core_low_U0_image_out_we0,
        image_out_d0 => core_low_U0_image_out_d0,
        p_read => val_0_channel_dout,
        p_read1 => val_1_channel_dout,
        p_read2 => val_2_channel_dout,
        p_read3 => val_3_channel_dout);

    Array2Mat_U0 : component Array2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Array2Mat_U0_ap_start,
        start_full_n => start_for_CvtColor_1_U0_full_n,
        ap_done => Array2Mat_U0_ap_done,
        ap_continue => Array2Mat_U0_ap_continue,
        ap_idle => Array2Mat_U0_ap_idle,
        ap_ready => Array2Mat_U0_ap_ready,
        start_out => Array2Mat_U0_start_out,
        start_write => Array2Mat_U0_start_write,
        fb_address0 => Array2Mat_U0_fb_address0,
        fb_ce0 => Array2Mat_U0_fb_ce0,
        fb_q0 => imageOut_t_q0,
        img_rows_V_dout => img4_rows_V_c_dout,
        img_rows_V_empty_n => img4_rows_V_c_empty_n,
        img_rows_V_read => Array2Mat_U0_img_rows_V_read,
        img_cols_V_dout => img4_cols_V_c_dout,
        img_cols_V_empty_n => img4_cols_V_c_empty_n,
        img_cols_V_read => Array2Mat_U0_img_cols_V_read,
        img_data_stream_V_din => Array2Mat_U0_img_data_stream_V_din,
        img_data_stream_V_full_n => img4_data_stream_0_s_full_n,
        img_data_stream_V_write => Array2Mat_U0_img_data_stream_V_write,
        img_rows_V_out_din => Array2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => img4_rows_V_c20_full_n,
        img_rows_V_out_write => Array2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => Array2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => img4_cols_V_c21_full_n,
        img_cols_V_out_write => Array2Mat_U0_img_cols_V_out_write);

    CvtColor_1_U0 : component CvtColor_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => CvtColor_1_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => CvtColor_1_U0_ap_done,
        ap_continue => CvtColor_1_U0_ap_continue,
        ap_idle => CvtColor_1_U0_ap_idle,
        ap_ready => CvtColor_1_U0_ap_ready,
        start_out => CvtColor_1_U0_start_out,
        start_write => CvtColor_1_U0_start_write,
        p_src_rows_V_dout => img4_rows_V_c20_dout,
        p_src_rows_V_empty_n => img4_rows_V_c20_empty_n,
        p_src_rows_V_read => CvtColor_1_U0_p_src_rows_V_read,
        p_src_cols_V_dout => img4_cols_V_c21_dout,
        p_src_cols_V_empty_n => img4_cols_V_c21_empty_n,
        p_src_cols_V_read => CvtColor_1_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => img4_data_stream_0_s_dout,
        p_src_data_stream_V_empty_n => img4_data_stream_0_s_empty_n,
        p_src_data_stream_V_read => CvtColor_1_U0_p_src_data_stream_V_read,
        p_dst_data_stream_0_V_din => CvtColor_1_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img5_data_stream_0_s_full_n,
        p_dst_data_stream_0_V_write => CvtColor_1_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => CvtColor_1_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img5_data_stream_1_s_full_n,
        p_dst_data_stream_1_V_write => CvtColor_1_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => CvtColor_1_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img5_data_stream_2_s_full_n,
        p_dst_data_stream_2_V_write => CvtColor_1_U0_p_dst_data_stream_2_V_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_data_stream_0_V_dout => img5_data_stream_0_s_dout,
        img_data_stream_0_V_empty_n => img5_data_stream_0_s_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img5_data_stream_1_s_dout,
        img_data_stream_1_V_empty_n => img5_data_stream_1_s_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img5_data_stream_2_s_dout,
        img_data_stream_2_V_empty_n => img5_data_stream_2_s_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        outputStream_TDATA => Mat2AXIvideo_U0_outputStream_TDATA,
        outputStream_TVALID => Mat2AXIvideo_U0_outputStream_TVALID,
        outputStream_TREADY => outputStream_TREADY,
        outputStream_TKEEP => Mat2AXIvideo_U0_outputStream_TKEEP,
        outputStream_TSTRB => Mat2AXIvideo_U0_outputStream_TSTRB,
        outputStream_TUSER => Mat2AXIvideo_U0_outputStream_TUSER,
        outputStream_TLAST => Mat2AXIvideo_U0_outputStream_TLAST,
        outputStream_TID => Mat2AXIvideo_U0_outputStream_TID,
        outputStream_TDEST => Mat2AXIvideo_U0_outputStream_TDEST);

    img0_rows_V_c_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => method1_Block_proc_U0_img0_rows_V_out_din,
        if_full_n => img0_rows_V_c_full_n,
        if_write => method1_Block_proc_U0_img0_rows_V_out_write,
        if_dout => img0_rows_V_c_dout,
        if_empty_n => img0_rows_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_rows_V_read);

    img0_cols_V_c_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => method1_Block_proc_U0_img0_cols_V_out_din,
        if_full_n => img0_cols_V_c_full_n,
        if_write => method1_Block_proc_U0_img0_cols_V_out_write,
        if_dout => img0_cols_V_c_dout,
        if_empty_n => img0_cols_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_cols_V_read);

    img4_rows_V_c_U : component fifo_w8_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => method1_Block_proc_U0_img4_rows_V_out_din,
        if_full_n => img4_rows_V_c_full_n,
        if_write => method1_Block_proc_U0_img4_rows_V_out_write,
        if_dout => img4_rows_V_c_dout,
        if_empty_n => img4_rows_V_c_empty_n,
        if_read => Array2Mat_U0_img_rows_V_read);

    img4_cols_V_c_U : component fifo_w10_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => method1_Block_proc_U0_img4_cols_V_out_din,
        if_full_n => img4_cols_V_c_full_n,
        if_write => method1_Block_proc_U0_img4_cols_V_out_write,
        if_dout => img4_cols_V_c_dout,
        if_empty_n => img4_cols_V_c_empty_n,
        if_read => Array2Mat_U0_img_cols_V_read);

    img0_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img0_data_stream_0_s_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img0_data_stream_0_s_dout,
        if_empty_n => img0_data_stream_0_s_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_0_V_read);

    img0_data_stream_1_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img0_data_stream_1_s_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img0_data_stream_1_s_dout,
        if_empty_n => img0_data_stream_1_s_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_1_V_read);

    img0_data_stream_2_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => img0_data_stream_2_s_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => img0_data_stream_2_s_dout,
        if_empty_n => img0_data_stream_2_s_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_2_V_read);

    img0_rows_V_c16_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        if_full_n => img0_rows_V_c16_full_n,
        if_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        if_dout => img0_rows_V_c16_dout,
        if_empty_n => img0_rows_V_c16_empty_n,
        if_read => CvtColor_U0_p_src_rows_V_read);

    img0_cols_V_c17_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        if_full_n => img0_cols_V_c17_full_n,
        if_write => AXIvideo2Mat_U0_img_cols_V_out_write,
        if_dout => img0_cols_V_c17_dout,
        if_empty_n => img0_cols_V_c17_empty_n,
        if_read => CvtColor_U0_p_src_cols_V_read);

    img1_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_V_din,
        if_full_n => img1_data_stream_0_s_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_V_write,
        if_dout => img1_data_stream_0_s_dout,
        if_empty_n => img1_data_stream_0_s_empty_n,
        if_read => findPupil_U0_img_data_stream_V_read);

    img2_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => findPupil_U0_dst_img_data_stream_V_din,
        if_full_n => img2_data_stream_0_s_full_n,
        if_write => findPupil_U0_dst_img_data_stream_V_write,
        if_dout => img2_data_stream_0_s_dout,
        if_empty_n => img2_data_stream_0_s_empty_n,
        if_read => find_iris_high_accur_U0_img_data_stream_V_read);

    r1_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => findPupil_U0_r_out_din,
        if_full_n => r1_c_full_n,
        if_write => findPupil_U0_r_out_write,
        if_dout => r1_c_dout,
        if_empty_n => r1_c_empty_n,
        if_read => writeValues_U0_r1_read);

    x_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => findPupil_U0_x_out_din,
        if_full_n => x_c_full_n,
        if_write => findPupil_U0_x_out_write,
        if_dout => x_c_dout,
        if_empty_n => x_c_empty_n,
        if_read => find_iris_high_accur_U0_x_read);

    y_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => findPupil_U0_y_out_din,
        if_full_n => y_c_full_n,
        if_write => findPupil_U0_y_out_write,
        if_dout => y_c_dout,
        if_empty_n => y_c_empty_n,
        if_read => find_iris_high_accur_U0_y_read);

    img3_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => find_iris_high_accur_U0_dst_img_data_stream_V_din,
        if_full_n => img3_data_stream_0_s_full_n,
        if_write => find_iris_high_accur_U0_dst_img_data_stream_V_write,
        if_dout => img3_data_stream_0_s_dout,
        if_empty_n => img3_data_stream_0_s_empty_n,
        if_read => Mat2Array_U0_img_data_stream_V_read);

    x_c18_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => find_iris_high_accur_U0_x_out_din,
        if_full_n => x_c18_full_n,
        if_write => find_iris_high_accur_U0_x_out_write,
        if_dout => x_c18_dout,
        if_empty_n => x_c18_empty_n,
        if_read => writeValues_U0_x_read);

    y_c19_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => find_iris_high_accur_U0_y_out_din,
        if_full_n => y_c19_full_n,
        if_write => find_iris_high_accur_U0_y_out_write,
        if_dout => y_c19_dout,
        if_empty_n => y_c19_empty_n,
        if_read => writeValues_U0_y_read);

    r2_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => find_iris_high_accur_U0_ap_return,
        if_full_n => r2_full_n,
        if_write => find_iris_high_accur_U0_ap_done,
        if_dout => r2_dout,
        if_empty_n => r2_empty_n,
        if_read => writeValues_U0_ap_ready);

    val_0_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writeValues_U0_ap_return_0,
        if_full_n => val_0_channel_full_n,
        if_write => ap_channel_done_val_0_channel,
        if_dout => val_0_channel_dout,
        if_empty_n => val_0_channel_empty_n,
        if_read => core_low_U0_ap_ready);

    val_1_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writeValues_U0_ap_return_1,
        if_full_n => val_1_channel_full_n,
        if_write => ap_channel_done_val_1_channel,
        if_dout => val_1_channel_dout,
        if_empty_n => val_1_channel_empty_n,
        if_read => core_low_U0_ap_ready);

    val_2_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writeValues_U0_ap_return_2,
        if_full_n => val_2_channel_full_n,
        if_write => ap_channel_done_val_2_channel,
        if_dout => val_2_channel_dout,
        if_empty_n => val_2_channel_empty_n,
        if_read => core_low_U0_ap_ready);

    val_3_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => writeValues_U0_ap_return_3,
        if_full_n => val_3_channel_full_n,
        if_write => ap_channel_done_val_3_channel,
        if_dout => val_3_channel_dout,
        if_empty_n => val_3_channel_empty_n,
        if_read => core_low_U0_ap_ready);

    img4_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Array2Mat_U0_img_data_stream_V_din,
        if_full_n => img4_data_stream_0_s_full_n,
        if_write => Array2Mat_U0_img_data_stream_V_write,
        if_dout => img4_data_stream_0_s_dout,
        if_empty_n => img4_data_stream_0_s_empty_n,
        if_read => CvtColor_1_U0_p_src_data_stream_V_read);

    img4_rows_V_c20_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Array2Mat_U0_img_rows_V_out_din,
        if_full_n => img4_rows_V_c20_full_n,
        if_write => Array2Mat_U0_img_rows_V_out_write,
        if_dout => img4_rows_V_c20_dout,
        if_empty_n => img4_rows_V_c20_empty_n,
        if_read => CvtColor_1_U0_p_src_rows_V_read);

    img4_cols_V_c21_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Array2Mat_U0_img_cols_V_out_din,
        if_full_n => img4_cols_V_c21_full_n,
        if_write => Array2Mat_U0_img_cols_V_out_write,
        if_dout => img4_cols_V_c21_dout,
        if_empty_n => img4_cols_V_c21_empty_n,
        if_read => CvtColor_1_U0_p_src_cols_V_read);

    img5_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_0_V_din,
        if_full_n => img5_data_stream_0_s_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_0_V_write,
        if_dout => img5_data_stream_0_s_dout,
        if_empty_n => img5_data_stream_0_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img5_data_stream_1_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_1_V_din,
        if_full_n => img5_data_stream_1_s_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_1_V_write,
        if_dout => img5_data_stream_1_s_dout,
        if_empty_n => img5_data_stream_1_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    img5_data_stream_2_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_2_V_din,
        if_full_n => img5_data_stream_2_s_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_2_V_write,
        if_dout => img5_data_stream_2_s_dout,
        if_empty_n => img5_data_stream_2_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_CvtColoudo_U : component start_for_CvtColoudo
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_U0_din,
        if_full_n => start_for_CvtColor_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_CvtColor_U0_dout,
        if_empty_n => start_for_CvtColor_U0_empty_n,
        if_read => CvtColor_U0_ap_ready);

    start_for_findPupvdy_U : component start_for_findPupvdy
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_findPupil_U0_din,
        if_full_n => start_for_findPupil_U0_full_n,
        if_write => CvtColor_U0_start_write,
        if_dout => start_for_findPupil_U0_dout,
        if_empty_n => start_for_findPupil_U0_empty_n,
        if_read => findPupil_U0_ap_ready);

    start_for_find_irwdI_U : component start_for_find_irwdI
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_find_iris_high_accur_U0_din,
        if_full_n => start_for_find_iris_high_accur_U0_full_n,
        if_write => findPupil_U0_start_write,
        if_dout => start_for_find_iris_high_accur_U0_dout,
        if_empty_n => start_for_find_iris_high_accur_U0_empty_n,
        if_read => find_iris_high_accur_U0_ap_ready);

    start_for_Mat2ArrxdS_U : component start_for_Mat2ArrxdS
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2Array_U0_din,
        if_full_n => start_for_Mat2Array_U0_full_n,
        if_write => find_iris_high_accur_U0_start_write,
        if_dout => start_for_Mat2Array_U0_dout,
        if_empty_n => start_for_Mat2Array_U0_empty_n,
        if_read => Mat2Array_U0_ap_ready);

    start_for_CvtColoyd2_U : component start_for_CvtColoyd2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_1_U0_din,
        if_full_n => start_for_CvtColor_1_U0_full_n,
        if_write => Array2Mat_U0_start_write,
        if_dout => start_for_CvtColor_1_U0_dout,
        if_empty_n => start_for_CvtColor_1_U0_empty_n,
        if_read => CvtColor_1_U0_ap_ready);

    start_for_Mat2AXIzec_U : component start_for_Mat2AXIzec
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => CvtColor_1_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_val_0_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_val_0_channel <= ap_const_logic_0;
            else
                if (((writeValues_U0_ap_done and writeValues_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_val_0_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_val_0_channel <= ap_sync_channel_write_val_0_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_val_1_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_val_1_channel <= ap_const_logic_0;
            else
                if (((writeValues_U0_ap_done and writeValues_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_val_1_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_val_1_channel <= ap_sync_channel_write_val_1_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_val_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_val_2_channel <= ap_const_logic_0;
            else
                if (((writeValues_U0_ap_done and writeValues_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_val_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_val_2_channel <= ap_sync_channel_write_val_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_val_3_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_val_3_channel <= ap_const_logic_0;
            else
                if (((writeValues_U0_ap_done and writeValues_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_val_3_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_val_3_channel <= ap_sync_channel_write_val_3_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_method1_Block_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_method1_Block_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_method1_Block_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_method1_Block_proc_U0_ap_ready <= ap_sync_method1_Block_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    method1_Block_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((method1_Block_proc_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                method1_Block_proc_U0_ap_ready_count <= std_logic_vector(unsigned(method1_Block_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (method1_Block_proc_U0_ap_ready = ap_const_logic_1))) then 
                method1_Block_proc_U0_ap_ready_count <= std_logic_vector(unsigned(method1_Block_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ((ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Array2Mat_U0_ap_continue <= ap_const_logic_1;
    Array2Mat_U0_ap_start <= imageOut_t_empty_n;
    CvtColor_1_U0_ap_continue <= ap_const_logic_1;
    CvtColor_1_U0_ap_start <= start_for_CvtColor_1_U0_empty_n;
    CvtColor_U0_ap_continue <= ap_const_logic_1;
    CvtColor_U0_ap_start <= start_for_CvtColor_U0_empty_n;
    Mat2AXIvideo_U0_ap_continue <= ap_continue;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    Mat2Array_U0_ap_continue <= imageIn_i_full_n;
    Mat2Array_U0_ap_start <= start_for_Mat2Array_U0_empty_n;
    Mat2Array_U0_fb_full_n <= imageIn_i_full_n;
    Mat2Array_U0_start_full_n <= ap_const_logic_1;
    Mat2Array_U0_start_write <= ap_const_logic_0;
    ap_channel_done_imageIn <= Mat2Array_U0_ap_done;
    ap_channel_done_imageOut <= core_low_U0_ap_done;
    ap_channel_done_r2 <= find_iris_high_accur_U0_ap_done;
    ap_channel_done_val_0_channel <= (writeValues_U0_ap_done and (ap_sync_reg_channel_write_val_0_channel xor ap_const_logic_1));
    ap_channel_done_val_1_channel <= (writeValues_U0_ap_done and (ap_sync_reg_channel_write_val_1_channel xor ap_const_logic_1));
    ap_channel_done_val_2_channel <= (writeValues_U0_ap_done and (ap_sync_reg_channel_write_val_2_channel xor ap_const_logic_1));
    ap_channel_done_val_3_channel <= (writeValues_U0_ap_done and (ap_sync_reg_channel_write_val_3_channel xor ap_const_logic_1));
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (writeValues_U0_ap_idle and method1_Block_proc_U0_ap_idle and find_iris_high_accur_U0_ap_idle and findPupil_U0_ap_idle and (val_3_channel_empty_n xor ap_const_logic_1) and (val_2_channel_empty_n xor ap_const_logic_1) and (val_1_channel_empty_n xor ap_const_logic_1) and (val_0_channel_empty_n xor ap_const_logic_1) and (r2_empty_n xor ap_const_logic_1) and (imageOut_t_empty_n xor ap_const_logic_1) and (imageIn_t_empty_n xor ap_const_logic_1) and core_low_U0_ap_idle and Mat2Array_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and CvtColor_U0_ap_idle and CvtColor_1_U0_ap_idle and Array2Mat_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_AXIvideo2Mat_U0_ap_ready <= (ap_sync_reg_AXIvideo2Mat_U0_ap_ready or AXIvideo2Mat_U0_ap_ready);
    ap_sync_channel_write_val_0_channel <= ((val_0_channel_full_n and ap_channel_done_val_0_channel) or ap_sync_reg_channel_write_val_0_channel);
    ap_sync_channel_write_val_1_channel <= ((val_1_channel_full_n and ap_channel_done_val_1_channel) or ap_sync_reg_channel_write_val_1_channel);
    ap_sync_channel_write_val_2_channel <= ((val_2_channel_full_n and ap_channel_done_val_2_channel) or ap_sync_reg_channel_write_val_2_channel);
    ap_sync_channel_write_val_3_channel <= ((val_3_channel_full_n and ap_channel_done_val_3_channel) or ap_sync_reg_channel_write_val_3_channel);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_method1_Block_proc_U0_ap_ready <= (method1_Block_proc_U0_ap_ready or ap_sync_reg_method1_Block_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_method1_Block_proc_U0_ap_ready and ap_sync_AXIvideo2Mat_U0_ap_ready);
    core_low_U0_ap_continue <= imageOut_i_full_n;
    core_low_U0_ap_start <= (val_3_channel_empty_n and val_2_channel_empty_n and val_1_channel_empty_n and val_0_channel_empty_n and imageIn_t_empty_n);
    core_low_U0_image_out_full_n <= imageOut_i_full_n;
    core_low_U0_start_full_n <= ap_const_logic_1;
    core_low_U0_start_write <= ap_const_logic_0;
    findPupil_U0_ap_continue <= ap_const_logic_1;
    findPupil_U0_ap_start <= start_for_findPupil_U0_empty_n;
    find_iris_high_accur_U0_ap_continue <= r2_full_n;
    find_iris_high_accur_U0_ap_start <= start_for_find_iris_high_accur_U0_empty_n;
    inputStream_TREADY <= AXIvideo2Mat_U0_inputStream_TREADY;
    method1_Block_proc_U0_ap_continue <= ap_const_logic_1;
    method1_Block_proc_U0_ap_start <= ((ap_sync_reg_method1_Block_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    method1_Block_proc_U0_start_full_n <= ap_const_logic_1;
    method1_Block_proc_U0_start_write <= ap_const_logic_0;
    outputStream_TDATA <= Mat2AXIvideo_U0_outputStream_TDATA;
    outputStream_TDEST <= Mat2AXIvideo_U0_outputStream_TDEST;
    outputStream_TID <= Mat2AXIvideo_U0_outputStream_TID;
    outputStream_TKEEP <= Mat2AXIvideo_U0_outputStream_TKEEP;
    outputStream_TLAST <= Mat2AXIvideo_U0_outputStream_TLAST;
    outputStream_TSTRB <= Mat2AXIvideo_U0_outputStream_TSTRB;
    outputStream_TUSER <= Mat2AXIvideo_U0_outputStream_TUSER;
    outputStream_TVALID <= Mat2AXIvideo_U0_outputStream_TVALID;
    start_for_CvtColor_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_CvtColor_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2Array_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_findPupil_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_find_iris_high_accur_U0_din <= (0=>ap_const_logic_1, others=>'-');
    writeValues_U0_ap_continue <= (ap_sync_channel_write_val_3_channel and ap_sync_channel_write_val_2_channel and ap_sync_channel_write_val_1_channel and ap_sync_channel_write_val_0_channel);
    writeValues_U0_ap_start <= r2_empty_n;
    writeValues_U0_start_full_n <= ap_const_logic_1;
    writeValues_U0_start_write <= ap_const_logic_0;
end behav;
