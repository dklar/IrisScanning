#include "hls_video.h"
#include <ap_fixed.h>
#include "hls_math.h"
#define PI 3.14159265358979
#define TWOPI 6.28318530717958647692
#define ThreeHalfPI 4.7123889803846898
#define PIHALF 1.570796327
#define DEGtoRAD 0.01745329252

typedef ap_fixed<16,1> float30;
typedef ap_ufixed<8,0> float8;//only decimal point .00000000

static const float8 arctan[] = {
		0.7853981633974483,//0.1100100100..
		0.4636476090008061,//0.0111011010..
		0.24497866312686414,//0.0011111010..
		0.12435499454676144,
		0.06241880999595735,
		0.031239833430268277,
		0.015623728620476831,
		0.007812341060101111,
		0.0039062301319669718,
		0.0019531225164788188,
		0.0009765621895593195,
		0.0004882812111948983,
		0.00024414062014936177,
		0.00012207031189367021,
		6.103515617420877e-05,
		3.0517578115526096e-05,
		1.5258789061315762e-05,
		7.62939453110197e-06,
		3.814697265606496e-06,
		1.907348632810187e-06,
		9.536743164059608e-07,
		4.7683715820308884e-07,
		2.3841857910155797e-07,
		1.1920928955078068e-07,
		5.960464477539055e-08,
		2.9802322387695303e-08,
		1.4901161193847655e-08,
		7.450580596923828e-09,
		3.725290298461914e-09,
		1.862645149230957e-09,
		9.313225746154785e-10,
		4.656612873077393e-10,
		2.3283064365386963e-10,
		1.1641532182693481e-10,
		5.820766091346741e-11,
		2.9103830456733704e-11,
		1.4551915228366852e-11,
		7.275957614183426e-12,
		3.637978807091713e-12,
		1.8189894035458565e-12,
		9.094947017729282e-13,
		4.547473508864641e-13,
		2.2737367544323206e-13,
		1.1368683772161603e-13,
		5.684341886080802e-14,
		2.842170943040401e-14,
		1.4210854715202004e-14,
		7.105427357601002e-15,
		3.552713678800501e-15,
		1.7763568394002505e-15};
static const float arctan_double[] = {
		0.7853981633974483,
		0.4636476090008061,
		0.24497866312686414,
		0.12435499454676144,
		0.06241880999595735,
		0.031239833430268277,
		0.015623728620476831,
		0.007812341060101111,
		0.0039062301319669718,
		0.0019531225164788188,
		0.0009765621895593195,
		0.0004882812111948983,
		0.00024414062014936177,
		0.00012207031189367021,
		6.103515617420877e-05,
		3.0517578115526096e-05,
		1.5258789061315762e-05,
		7.62939453110197e-06,
		3.814697265606496e-06,
		1.907348632810187e-06,
		9.536743164059608e-07,
		4.7683715820308884e-07,
		2.3841857910155797e-07,
		1.1920928955078068e-07,
		5.960464477539055e-08,
		2.9802322387695303e-08,
		1.4901161193847655e-08,
		7.450580596923828e-09,
		3.725290298461914e-09,
		1.862645149230957e-09,
		9.313225746154785e-10,
		4.656612873077393e-10,
		2.3283064365386963e-10,
		1.1641532182693481e-10,
		5.820766091346741e-11,
		2.9103830456733704e-11,
		1.4551915228366852e-11,
		7.275957614183426e-12,
		3.637978807091713e-12,
		1.8189894035458565e-12,
		9.094947017729282e-13,
		4.547473508864641e-13,
		2.2737367544323206e-13,
		1.1368683772161603e-13,
		5.684341886080802e-14,
		2.842170943040401e-14,
		1.4210854715202004e-14,
		7.105427357601002e-15,
		3.552713678800501e-15,
		1.7763568394002505e-15
		};

float sinTaylor(float x);
float cosTaylor(float x);

float30 cosTaylor_fix(float x);
float30 sinTaylor_fix(float x);

/*
 * Simple replace function defined for 45 degree steps (45,90,135)
 */
float replaceSIN(int val);
/*
 * Simple replace function defined for 45 degree steps (45,90,135)
 */
float replaceCOS(int val);

/*
 * CORDIC implementaion for sine
 * defined in a range up to 2pi, for values bigger than 2 pi
 * the functions returns not defined/correct values
 */
float cordic360_COS(float x, int nMax);
/*
 * CORDIC implementaion for sine
 * defined in a range up to 2pi, for values bigger than 2 pi
 * the functions returns not defined/correct values
 * @param x angle
 * @param nMax iterationsteps
 */
float cordic360_SIN(float x, int nMax);

float30 cordic360_Sin_fixed(float x, int nMax);
float30 cordic360_Cos_fixed(float x, int nMax);
void cordic360_COS_SIN(float x, float &s, float &c,int nMax);
void cordic360_COS_SIN_fix(float x, float &s, float &c,int nMax);

