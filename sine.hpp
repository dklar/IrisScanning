#include "hls_video.h"
#include <ap_fixed.h>
#include "hls_math.h"
const float PI = 3.14159265358979;
const float TWOPI = 6.28318530717958647692;
const float ThreeHalfPI = 4.7123889803846898;
const float PIHALF = 1.570796327;
const float DEGtoRAD = 0.01745329252;


typedef ap_fixed<16,5> floatGauss;
typedef ap_fixed<16,5> floatGabor;//orginal 18,5
typedef ap_ufixed<16,0> floatTan;
typedef ap_fixed<16,2> floatSin;
typedef ap_fixed<16,4> floatArg;


static const floatTan arctan[] = {
		0.7853981633974483,//0.1100100100..
		0.4636476090008061,//0.0111011010..
		0.24497866312686414,//0.0011111010..
		0.12435499454676144,//0.000111111101010
		0.06241880999595735,//0.000011111111101//last value fo 4 bits
		0.031239833430268277,
		0.015623728620476831,
		0.007812341060101111,//für 8 bit letzte stelle
		0.0039062301319669718,
		0.0019531225164788188,//10 it
		0.0009765621895593195,
		0.0004882812111948983,
		0.00024414062014936177,
		0.00012207031189367021,
		6.103515617420877e-05,
		3.0517578115526096e-05,
		1.5258789061315762e-05,
		7.62939453110197e-06,
		3.814697265606496e-06,
		1.907348632810187e-06,//20 it
		9.536743164059608e-07,
		4.7683715820308884e-07,
		2.3841857910155797e-07,
		1.1920928955078068e-07,
		5.960464477539055e-08,
		2.9802322387695303e-08,
		1.4901161193847655e-08,
		7.450580596923828e-09,
		3.725290298461914e-09,
		1.862645149230957e-09,
		9.313225746154785e-10,
		4.656612873077393e-10
		};
static const float arctan_double[] = {
		0.7853981633974483,
		0.4636476090008061,
		0.24497866312686414,
		0.12435499454676144,
		0.06241880999595735,
		0.031239833430268277,
		0.015623728620476831,
		0.007812341060101111,
		0.0039062301319669718,
		0.0019531225164788188,
		0.0009765621895593195,
		0.0004882812111948983,
		0.00024414062014936177,
		0.00012207031189367021,
		6.103515617420877e-05,
		3.0517578115526096e-05,
		1.5258789061315762e-05,
		7.62939453110197e-06,
		3.814697265606496e-06,
		1.907348632810187e-06,
		9.536743164059608e-07,
		4.7683715820308884e-07,
		2.3841857910155797e-07,
		1.1920928955078068e-07,
		5.960464477539055e-08,
		2.9802322387695303e-08,
		1.4901161193847655e-08,
		7.450580596923828e-09,
		3.725290298461914e-09,
		1.862645149230957e-09,
		9.313225746154785e-10,
		4.656612873077393e-10,
		2.3283064365386963e-10,
		1.1641532182693481e-10
		};

float sinTaylor(float x);
float cosTaylor(float x);

/*
 * Simple replace function defined for 45 degree steps (45,90,135)
 */
float replaceSIN(int val);
/*
 * Simple replace function defined for 45 degree steps (45,90,135)
 */
float replaceCOS(int val);


void cordic360_COS_SIN(float x, float &s, float &c,int nMax);

void cordic360_COS_SIN_fix(floatArg x, floatSin &s, floatSin &c,int nMax);
